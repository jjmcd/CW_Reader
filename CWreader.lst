MP2COD 3.80, COFF to COD File Converter
Copyright (c) 2004 Microchip Technology Inc.
Listing File Generated: Fri Feb 11 15:18:07 2005


Address  Value    Disassembly              Source                                                                           File
-------  -------  -----------------------  -------------------------------------------------------------------------------  -----
                                           		title		"CW Decoding Program"                                                   H:\PIC\CWreadr\CWreadr.asm
                                           		subtitle	"CWreadr.asm $Revision: 1.4 $ $Date: 2005-02-11 15:15:30-05 $"        H:\PIC\CWreadr\CWreadr.asm
                                           ;**************************************************************                  H:\PIC\CWreadr\CWreadr.asm
                                           ;                    CW decoding program                      *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;                for PIC16F628 microprocessor                 *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;                     40 chars display                        *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;**************************************************************                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       displays on LCD the last N characters received        *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       with automatic left shift of the text                 *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       A "service" push button (P1) displays                 *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       the CW rate in characters / minute                    *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;                                                             *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;	I/O pins configuration :                                  *                    H:\PIC\CWreadr\CWreadr.asm
                                           ;                                                             *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;	RB0 : Enable  (RB3)                                       *                            H:\PIC\CWreadr\CWreadr.asm
                                           ;	RB1 : RS                                                  *                    H:\PIC\CWreadr\CWreadr.asm
                                           ;       RB2 : n/c                                             *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       RB3 : n/c                                             *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       RB4 : LCD (B4) LSB                                    *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       RB5 : LCD (B5)                                        *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       RB6 : LCD (B6)                                        *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       RB7 : LCD (B7) MSB                                    *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;                                                             *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;  	RA0 : input CW      (RA4)                                 *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       RA1 : P0                                              *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       RA2 : n/c                                             *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       RA3 : n/c                                             *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;       RA4 : n/c                                             *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;                                                             *                  H:\PIC\CWreadr\CWreadr.asm
                                           ;**************************************************************                  H:\PIC\CWreadr\CWreadr.asm
                                           ;	processor pic16f628                                       *                    H:\PIC\CWreadr\CWreadr.asm
                                           ;	no code protection                                        *                    H:\PIC\CWreadr\CWreadr.asm
                                           ;	power up timer disabled                                   *                    H:\PIC\CWreadr\CWreadr.asm
                                           ;	WDT enabled                                               *                    H:\PIC\CWreadr\CWreadr.asm
                                           ;	XT oscillator                                             *         	          H:\PIC\CWreadr\CWreadr.asm
                                           ;**************************************************************                  H:\PIC\CWreadr\CWreadr.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWreadr.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
002007   3f21     ADDLW     0x21           		__config	_XT_OSC & _WDT_OFF & _BODEN_OFF & _LVP_OFF & _PWRTE_ON                H:\PIC\CWreadr\CWreadr.asm
                                           		include		CWdefs.inc                                                            H:\PIC\CWreadr\CWreadr.asm
                                           ;	Constants used by multiple routines                                            H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ;       program constants definitions                                            H:\PIC\CWreadr\CWdefs.inc
                                           swon	equ	 0x00                                                                   H:\PIC\CWreadr\CWdefs.inc
                                           swoff	equ	 0x01	                                                                 H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ; 	program settable parameters                                                   H:\PIC\CWreadr\CWdefs.inc
                                           chrparm equ	 0x08		; chars number for speed calculation                          H:\PIC\CWreadr\CWdefs.inc
                                           rowparm equ	 0x28		; chars number on the LCD raw                                 H:\PIC\CWreadr\CWdefs.inc
                                           sgparm  equ	 0x0f		; dit/dashes number for param. refresh	                       H:\PIC\CWreadr\CWdefs.inc
                                            	                                                                               H:\PIC\CWreadr\CWdefs.inc
                                           ; port_a bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_P0	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_P1	equ	2                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_CW	equ	4                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           ; port_b bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_EN	equ	3                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_RS	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWreadr.asm
                                           ;	external functions                                                             H:\PIC\CWreadr\CWreadr.asm
                                           		extern		tmrint,Initialize                                                      H:\PIC\CWreadr\CWreadr.asm
                                           		extern		del05                                                                  H:\PIC\CWreadr\CWreadr.asm
                                           		extern		inilcd,bytelcd,wrtlcd                                                  H:\PIC\CWreadr\CWreadr.asm
                                           		extern		panel,displ,cw_rate,agspeed                                            H:\PIC\CWreadr\CWreadr.asm
                                           		extern		c_minof,c_minon,decod,ag_parm,dec_sg                                   H:\PIC\CWreadr\CWreadr.asm
                                           ;	provided storage	                                                              H:\PIC\CWreadr\CWreadr.asm
                                           		global		swinput                                                                H:\PIC\CWreadr\CWreadr.asm
                                           ;	external storage                                                               H:\PIC\CWreadr\CWreadr.asm
                                           		extern		timeon,timeoff                                                         H:\PIC\CWreadr\CWreadr.asm
                                           		extern  	ctrsegn,tmed_of,tmax_of                                               H:\PIC\CWreadr\CWreadr.asm
                                           		extern		cntchar                                                                H:\PIC\CWreadr\CWreadr.asm
                                                                                                                            H:\PIC\CWreadr\CWreadr.asm
                                           		udata                                                                          H:\PIC\CWreadr\CWreadr.asm
                                           swinput res		 	1 				; input ON/OFF state indicator                              H:\PIC\CWreadr\CWreadr.asm
                                                                                                                            H:\PIC\CWreadr\CWreadr.asm
                                           ;       Reset address                                                            H:\PIC\CWreadr\CWreadr.asm
                                           STARTUP	code                                                                     H:\PIC\CWreadr\CWreadr.asm
000000   287d     GOTO      0x7d           		goto		 main00                                                                  H:\PIC\CWreadr\CWreadr.asm
                                                                                                                            H:\PIC\CWreadr\CWreadr.asm
                                           ;       main program                                                             H:\PIC\CWreadr\CWreadr.asm
                                           		code                                                                           H:\PIC\CWreadr\CWreadr.asm
                                           main00                                                                           H:\PIC\CWreadr\CWreadr.asm
00007d   20cb     CALL      0xcb           		call		Initialize                                                               H:\PIC\CWreadr\CWreadr.asm
                                                                                                                            H:\PIC\CWreadr\CWreadr.asm
                                           ;	initialize LCD display                                                         H:\PIC\CWreadr\CWreadr.asm
00007e   2112     CALL      0x112          		call	 	inilcd                                                                  H:\PIC\CWreadr\CWreadr.asm
00007f   2259     CALL      0x259          		call		panel                                                                    H:\PIC\CWreadr\CWreadr.asm
                                                                                                                            H:\PIC\CWreadr\CWreadr.asm
                                           ;	main loop                                                                      H:\PIC\CWreadr\CWreadr.asm
                                           main10                                                                           H:\PIC\CWreadr\CWreadr.asm
000080   2101     CALL      0x101          		call		del05			; delay 5 mS                                                     H:\PIC\CWreadr\CWreadr.asm
                                           main15                                                                           H:\PIC\CWreadr\CWreadr.asm
000081   2101     CALL      0x101          		call		del05			; delay 5 mS                                                     H:\PIC\CWreadr\CWreadr.asm
000082   1c85     BTFSS     0x5,0x1        		btfss	 	PORTA,bit_P0	; verify if P1 pressed                                    H:\PIC\CWreadr\CWreadr.asm
000083   2885     GOTO      0x85           		goto		disparm			; if so call parameters display routine                        H:\PIC\CWreadr\CWreadr.asm
000084   2889     GOTO      0x89           		goto		main20                                                                   H:\PIC\CWreadr\CWreadr.asm
                                           disparm                                                                          H:\PIC\CWreadr\CWreadr.asm
000085   2286     CALL      0x286          		call		displ                                                                    H:\PIC\CWreadr\CWreadr.asm
                                           dispar1                                                                          H:\PIC\CWreadr\CWreadr.asm
000086   0064     CLRWDT                   		clrwdt						; watchdog clear                                                   H:\PIC\CWreadr\CWreadr.asm
000087   1c85     BTFSS     0x5,0x1        		btfss	 	PORTA,bit_P0	; display remains active as long as                       H:\PIC\CWreadr\CWreadr.asm
000088   2886     GOTO      0x86           		goto		dispar1			; P1 is pressed                                                H:\PIC\CWreadr\CWreadr.asm
                                                                                                                            H:\PIC\CWreadr\CWreadr.asm
                                           ;	ramo di decodifica CW                                                          H:\PIC\CWreadr\CWreadr.asm
                                           main20                                                                           H:\PIC\CWreadr\CWreadr.asm
000089   1e05     BTFSS     0x5,0x4        		btfss		PORTA,bit_CW	; verify if signal HIGH on P0                              H:\PIC\CWreadr\CWreadr.asm
00008a   28a1     GOTO      0xa1           		goto		st_off			;                                                               H:\PIC\CWreadr\CWreadr.asm
                                                                                                                            H:\PIC\CWreadr\CWreadr.asm
                                           ;	decoding branch for an HIGH input level                                        H:\PIC\CWreadr\CWreadr.asm
                                           st_on                                                                            H:\PIC\CWreadr\CWreadr.asm
00008b   1820     BTFSC     0x20,0x0       		btfsc		swinput,swon	; verify if input state changed                            H:\PIC\CWreadr\CWreadr.asm
00008c   2881     GOTO      0x81           		goto		main15			; otherwise wait (goto loop)                                    H:\PIC\CWreadr\CWreadr.asm
                                           set_on                                                                           H:\PIC\CWreadr\CWreadr.asm
00008d   1420     BSF       0x20,0x0       		bsf			swinput,swon	; if changed set SWON                                       H:\PIC\CWreadr\CWreadr.asm
00008e   10a0     BCF       0x20,0x1       		bcf			swinput,swoff	; reset SWOFF                                              H:\PIC\CWreadr\CWreadr.asm
00008f   01a3     CLRF      0x23           		clrf		timeon			; and clear TIMEON                                              H:\PIC\CWreadr\CWreadr.asm
000090   2367     CALL      0x367          		call		c_minof			; refresh min OFF-state time                                   H:\PIC\CWreadr\CWreadr.asm
000091   083b     MOVF      0x3b,0x0       		movf		tmed_of,W                                                                H:\PIC\CWreadr\CWreadr.asm
000092   0224     SUBWF     0x24,0x0       		subwf		timeoff,W		; verify if OFF-state time greater                           H:\PIC\CWreadr\CWreadr.asm
000093   1c03     BTFSS     0x3,0x0        		btfss		STATUS,C		; inter-character time (tmed_of)                              H:\PIC\CWreadr\CWreadr.asm
000094   2880     GOTO      0x80           		goto		main10			; if less re-cycle otherwise                                    H:\PIC\CWreadr\CWreadr.asm
000095   22ce     CALL      0x2ce          		call		agspeed			; update CW speed value                                        H:\PIC\CWreadr\CWreadr.asm
000096   22db     CALL      0x2db          		call		decod			; decode and display received char                               H:\PIC\CWreadr\CWreadr.asm
000097   1d05     BTFSS     0x5,0x2        		btfss		PORTA,bit_P1	; verify if 'space' mode active                            H:\PIC\CWreadr\CWreadr.asm
000098   2880     GOTO      0x80           		goto		main10			; otherwise re-cycle                                            H:\PIC\CWreadr\CWreadr.asm
000099   083c     MOVF      0x3c,0x0       		movf		tmax_of,W                                                                H:\PIC\CWreadr\CWreadr.asm
00009a   0224     SUBWF     0x24,0x0       		subwf		timeoff,W		; verify if OFF-state greater                                H:\PIC\CWreadr\CWreadr.asm
00009b   1c03     BTFSS     0x3,0x0        		btfss		STATUS,C		; inter-word time (tmax_of)                                   H:\PIC\CWreadr\CWreadr.asm
00009c   2880     GOTO      0x80           		goto		main10			; if less re-cycle                                              H:\PIC\CWreadr\CWreadr.asm
00009d   3020     MOVLW     0x20           		movlw		" "				; otherwise insert a space                                       H:\PIC\CWreadr\CWreadr.asm
00009e   00a9     MOVWF     0x29           		movwf		bytelcd			; on LCD display                                              H:\PIC\CWreadr\CWreadr.asm
00009f   214e     CALL      0x14e          		call		wrtlcd			; at end re-cycle                                               H:\PIC\CWreadr\CWreadr.asm
0000a0   2880     GOTO      0x80           		goto		main10		                                                                 H:\PIC\CWreadr\CWreadr.asm
                                                                                                                            H:\PIC\CWreadr\CWreadr.asm
                                           ;	decoding branch for a LOW input level                                          H:\PIC\CWreadr\CWreadr.asm
                                           st_off                                                                           H:\PIC\CWreadr\CWreadr.asm
0000a1   1ca0     BTFSS     0x20,0x1       		btfss		swinput,swoff	; verify if input state changed                           H:\PIC\CWreadr\CWreadr.asm
0000a2   28ac     GOTO      0xac           		goto		set_off			; if so set SWON                                               H:\PIC\CWreadr\CWreadr.asm
0000a3   30c8     MOVLW     0xc8           		movlw		d'200'			; otherwise verify if OFF state                                H:\PIC\CWreadr\CWreadr.asm
0000a4   0224     SUBWF     0x24,0x0       		subwf		timeoff,W		; duration greater 2 seconds                                 H:\PIC\CWreadr\CWreadr.asm
0000a5   1c03     BTFSS     0x3,0x0        		btfss		STATUS,C		; if less (ris < 0)                                           H:\PIC\CWreadr\CWreadr.asm
0000a6   2881     GOTO      0x81           		goto		main15			; re-cycle (wait)                                               H:\PIC\CWreadr\CWreadr.asm
0000a7   01a4     CLRF      0x24           		clrf		timeoff			; if greater 2 seconds (ris > 0) clear timeof                  H:\PIC\CWreadr\CWreadr.asm
0000a8   22db     CALL      0x2db          		call		decod			; decode last received character                                 H:\PIC\CWreadr\CWreadr.asm
0000a9   3008     MOVLW     0x8            		movlw		chrparm			; set characters counter                                      H:\PIC\CWreadr\CWreadr.asm
0000aa   00b6     MOVWF     0x36           		movwf		cntchar			; to force count start                                        H:\PIC\CWreadr\CWreadr.asm
0000ab   2881     GOTO      0x81           		goto		main15			; and re-cycle (wait)                                           H:\PIC\CWreadr\CWreadr.asm
                                           set_off                                                                          H:\PIC\CWreadr\CWreadr.asm
0000ac   14a0     BSF       0x20,0x1       		bsf			swinput,swoff	; if input state changed set SWOFF                         H:\PIC\CWreadr\CWreadr.asm
0000ad   1020     BCF       0x20,0x0       		bcf			swinput,swon	; reset SWON                                                H:\PIC\CWreadr\CWreadr.asm
0000ae   01a4     CLRF      0x24           		clrf		timeoff			; and clear TIMEOFF                                            H:\PIC\CWreadr\CWreadr.asm
0000af   235b     CALL      0x35b          		call		c_minon			; update min ON-state time                                     H:\PIC\CWreadr\CWreadr.asm
0000b0   0abd     INCF      0x3d,0x1       		incf		ctrsegn,F		; increment received signs counter                            H:\PIC\CWreadr\CWreadr.asm
0000b1   300f     MOVLW     0xf            		movlw		sgparm 			;                                                             H:\PIC\CWreadr\CWreadr.asm
0000b2   023d     SUBWF     0x3d,0x0       		subwf		ctrsegn,W		; verify if more than N signs received                       H:\PIC\CWreadr\CWreadr.asm
0000b3   1803     BTFSC     0x3,0x0        		btfsc		STATUS,C		;                                                             H:\PIC\CWreadr\CWreadr.asm
0000b4   233d     CALL      0x33d          		call		ag_parm 		; if ctrsegn > N refresh calculation parameters                H:\PIC\CWreadr\CWreadr.asm
0000b5   230b     CALL      0x30b          		call		dec_sg			; and received sign decoding                                    H:\PIC\CWreadr\CWreadr.asm
0000b6   2880     GOTO      0x80           		goto		main10			; at end re-cycle (wait)	                                       H:\PIC\CWreadr\CWreadr.asm
                                           	                                                                                H:\PIC\CWreadr\CWreadr.asm
                                           ;	end main program                                                               H:\PIC\CWreadr\CWreadr.asm
                                           		end                                                                            H:\PIC\CWreadr\CWreadr.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWtables.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                                                                                            H:\PIC\CWreadr\CWtables.asm
                                           		global	tab_a,tab_b,tab_c,tab_d,tab_e,tab_f                                     H:\PIC\CWreadr\CWtables.asm
                                           Tables		code	H'0005'                                                             H:\PIC\CWreadr\CWtables.asm
                                           ;     subroutine searching the character with W offset in the 1 sign tab_char    H:\PIC\CWreadr\CWtables.asm
                                           tab_a                                                                            H:\PIC\CWreadr\CWtables.asm
                                           	                                                                                H:\PIC\CWreadr\CWtables.asm
000005   0782     ADDWF     0x2,0x1        	addwf    PCL,1 		; increments jump address                                      H:\PIC\CWreadr\CWtables.asm
000006   3400     RETLW     0x0            	dt       b'00000000'	; only a dit                                               H:\PIC\CWreadr\CWtables.asm
000007   3445     RETLW     0x45           	dt       "E"                                                                    H:\PIC\CWreadr\CWtables.asm
000008   3401     RETLW     0x1            	dt       b'00000001'  	; only a dash                                            H:\PIC\CWreadr\CWtables.asm
000009   3454     RETLW     0x54           	dt       "T"                                                                    H:\PIC\CWreadr\CWtables.asm
00000a   34ff     RETLW     0xff           	dt       b'11111111'  	; filler                                                 H:\PIC\CWreadr\CWtables.asm
00000b   3420     RETLW     0x20           	dt       " "                                                                    H:\PIC\CWreadr\CWtables.asm
                                           endtb_a                                                                          H:\PIC\CWreadr\CWtables.asm
                                                                                                                            H:\PIC\CWreadr\CWtables.asm
                                           ;     subroutine searching the character with W offset in the 2 signs tab_char   H:\PIC\CWreadr\CWtables.asm
                                           tab_b                                                                            H:\PIC\CWreadr\CWtables.asm
                                           	                                                                                H:\PIC\CWreadr\CWtables.asm
00000c   0782     ADDWF     0x2,0x1        	addwf    PCL,1 		; increments jump address                                      H:\PIC\CWreadr\CWtables.asm
00000d   3400     RETLW     0x0            	dt       b'00000000'	; ..                                                       H:\PIC\CWreadr\CWtables.asm
00000e   3449     RETLW     0x49           	dt       "I"                                                                    H:\PIC\CWreadr\CWtables.asm
00000f   3402     RETLW     0x2            	dt       b'00000010'  	; .-                                                     H:\PIC\CWreadr\CWtables.asm
000010   3441     RETLW     0x41           	dt       "A"                                                                    H:\PIC\CWreadr\CWtables.asm
000011   3401     RETLW     0x1            	dt       b'00000001'  	; -.                                                     H:\PIC\CWreadr\CWtables.asm
000012   344e     RETLW     0x4e           	dt       "N"                                                                    H:\PIC\CWreadr\CWtables.asm
000013   3403     RETLW     0x3            	dt       b'00000011'  	; --                                                     H:\PIC\CWreadr\CWtables.asm
000014   344d     RETLW     0x4d           	dt       "M"                                                                    H:\PIC\CWreadr\CWtables.asm
000015   34ff     RETLW     0xff           	dt       b'11111111'  	; filler                                                 H:\PIC\CWreadr\CWtables.asm
000016   3420     RETLW     0x20           	dt       " "                                                                    H:\PIC\CWreadr\CWtables.asm
                                           endtb_b                                                                          H:\PIC\CWreadr\CWtables.asm
                                                                                                                            H:\PIC\CWreadr\CWtables.asm
                                           ;     subroutine searching the character with W offset in the 3 signs tab_char   H:\PIC\CWreadr\CWtables.asm
                                           tab_c                                                                            H:\PIC\CWreadr\CWtables.asm
                                           	                                                                                H:\PIC\CWreadr\CWtables.asm
000017   0782     ADDWF     0x2,0x1        	addwf    PCL,1 		; increments jump address                                      H:\PIC\CWreadr\CWtables.asm
000018   3400     RETLW     0x0            	dt       b'00000000'	; ...                                                      H:\PIC\CWreadr\CWtables.asm
000019   3453     RETLW     0x53           	dt       "S"                                                                    H:\PIC\CWreadr\CWtables.asm
00001a   3404     RETLW     0x4            	dt       b'00000100'  	; ..-                                                    H:\PIC\CWreadr\CWtables.asm
00001b   3455     RETLW     0x55           	dt       "U"                                                                    H:\PIC\CWreadr\CWtables.asm
00001c   3402     RETLW     0x2            	dt       b'00000010'  	; .-.                                                    H:\PIC\CWreadr\CWtables.asm
00001d   3452     RETLW     0x52           	dt       "R"                                                                    H:\PIC\CWreadr\CWtables.asm
00001e   3406     RETLW     0x6            	dt       b'00000110'  	; .--                                                    H:\PIC\CWreadr\CWtables.asm
00001f   3457     RETLW     0x57           	dt       "W"                                                                    H:\PIC\CWreadr\CWtables.asm
000020   3401     RETLW     0x1            	dt       b'00000001'  	; -..                                                    H:\PIC\CWreadr\CWtables.asm
000021   3444     RETLW     0x44           	dt       "D"                                                                    H:\PIC\CWreadr\CWtables.asm
000022   3405     RETLW     0x5            	dt       b'00000101'  	; -.-                                                    H:\PIC\CWreadr\CWtables.asm
000023   344b     RETLW     0x4b           	dt       "K"                                                                    H:\PIC\CWreadr\CWtables.asm
000024   3403     RETLW     0x3            	dt       b'00000011'  	; --.                                                    H:\PIC\CWreadr\CWtables.asm
000025   3447     RETLW     0x47           	dt       "G"                                                                    H:\PIC\CWreadr\CWtables.asm
000026   3407     RETLW     0x7            	dt       b'00000111'  	; ---                                                    H:\PIC\CWreadr\CWtables.asm
000027   344f     RETLW     0x4f           	dt       "O"                                                                    H:\PIC\CWreadr\CWtables.asm
000028   34ff     RETLW     0xff           	dt       b'11111111'  	; filler                                                 H:\PIC\CWreadr\CWtables.asm
000029   3420     RETLW     0x20           	dt       " "                                                                    H:\PIC\CWreadr\CWtables.asm
                                           endtb_c                                                                          H:\PIC\CWreadr\CWtables.asm
                                                                                                                            H:\PIC\CWreadr\CWtables.asm
                                           ;     subroutine searching the character with W offset in the 4 signs tab_char   H:\PIC\CWreadr\CWtables.asm
                                           tab_d                                                                            H:\PIC\CWreadr\CWtables.asm
                                           	                                                                                H:\PIC\CWreadr\CWtables.asm
00002a   0782     ADDWF     0x2,0x1        	addwf    PCL,1 		; increments jump address                                      H:\PIC\CWreadr\CWtables.asm
00002b   3400     RETLW     0x0            	dt       b'00000000'	; ....                                                     H:\PIC\CWreadr\CWtables.asm
00002c   3448     RETLW     0x48           	dt       "H"                                                                    H:\PIC\CWreadr\CWtables.asm
00002d   3408     RETLW     0x8            	dt       b'00001000'  	; ...-                                                   H:\PIC\CWreadr\CWtables.asm
00002e   3456     RETLW     0x56           	dt       "V"                                                                    H:\PIC\CWreadr\CWtables.asm
00002f   3404     RETLW     0x4            	dt       b'00000100'  	; ..-.                                                   H:\PIC\CWreadr\CWtables.asm
000030   3446     RETLW     0x46           	dt       "F"                                                                    H:\PIC\CWreadr\CWtables.asm
000031   3402     RETLW     0x2            	dt       b'00000010'  	; .-..                                                   H:\PIC\CWreadr\CWtables.asm
000032   344c     RETLW     0x4c           	dt       "L"                                                                    H:\PIC\CWreadr\CWtables.asm
000033   3406     RETLW     0x6            	dt       b'00000110'  	; .--.                                                   H:\PIC\CWreadr\CWtables.asm
000034   3450     RETLW     0x50           	dt       "P"                                                                    H:\PIC\CWreadr\CWtables.asm
000035   340e     RETLW     0xe            	dt       b'00001110'  	; .---                                                   H:\PIC\CWreadr\CWtables.asm
000036   344a     RETLW     0x4a           	dt       "J"                                                                    H:\PIC\CWreadr\CWtables.asm
000037   3401     RETLW     0x1            	dt       b'00000001'	; -...                                                     H:\PIC\CWreadr\CWtables.asm
000038   3442     RETLW     0x42           	dt       "B"                                                                    H:\PIC\CWreadr\CWtables.asm
000039   3409     RETLW     0x9            	dt       b'00001001'  	; -..-                                                   H:\PIC\CWreadr\CWtables.asm
00003a   3458     RETLW     0x58           	dt       "X"                                                                    H:\PIC\CWreadr\CWtables.asm
00003b   3405     RETLW     0x5            	dt       b'00000101'  	; -.-.                                                   H:\PIC\CWreadr\CWtables.asm
00003c   3443     RETLW     0x43           	dt       "C"                                                                    H:\PIC\CWreadr\CWtables.asm
00003d   340d     RETLW     0xd            	dt       b'00001101'  	; -.--                                                   H:\PIC\CWreadr\CWtables.asm
00003e   3459     RETLW     0x59           	dt       "Y"                                                                    H:\PIC\CWreadr\CWtables.asm
00003f   3403     RETLW     0x3            	dt       b'00000011'  	; --..                                                   H:\PIC\CWreadr\CWtables.asm
000040   345a     RETLW     0x5a           	dt       "Z"                                                                    H:\PIC\CWreadr\CWtables.asm
000041   340b     RETLW     0xb            	dt       b'00001011'  	; --.-                                                   H:\PIC\CWreadr\CWtables.asm
000042   3451     RETLW     0x51           	dt       "Q"                                                                    H:\PIC\CWreadr\CWtables.asm
000043   34ff     RETLW     0xff           	dt       b'11111111'  	; filler                                                 H:\PIC\CWreadr\CWtables.asm
000044   3420     RETLW     0x20           	dt       " "                                                                    H:\PIC\CWreadr\CWtables.asm
                                           endtb_d                                                                          H:\PIC\CWreadr\CWtables.asm
                                                                                                                            H:\PIC\CWreadr\CWtables.asm
                                           ;     subroutine searching the character with W offset in the 5 signs tab_char   H:\PIC\CWreadr\CWtables.asm
                                           tab_e                                                                            H:\PIC\CWreadr\CWtables.asm
                                           	                                                                                H:\PIC\CWreadr\CWtables.asm
000045   0782     ADDWF     0x2,0x1        	addwf    PCL,1 		; increments jump address                                      H:\PIC\CWreadr\CWtables.asm
000046   3400     RETLW     0x0            	dt       b'00000000'	; .....                                                    H:\PIC\CWreadr\CWtables.asm
000047   3435     RETLW     0x35           	dt       "5"                                                                    H:\PIC\CWreadr\CWtables.asm
000048   3410     RETLW     0x10           	dt       b'00010000'  	; ....-                                                  H:\PIC\CWreadr\CWtables.asm
000049   3434     RETLW     0x34           	dt       "4"                                                                    H:\PIC\CWreadr\CWtables.asm
00004a   3418     RETLW     0x18           	dt       b'00011000'  	; ...--                                                  H:\PIC\CWreadr\CWtables.asm
00004b   3433     RETLW     0x33           	dt       "3"                                                                    H:\PIC\CWreadr\CWtables.asm
00004c   341c     RETLW     0x1c           	dt       b'00011100'  	; ..---                                                  H:\PIC\CWreadr\CWtables.asm
00004d   3432     RETLW     0x32           	dt       "2"                                                                    H:\PIC\CWreadr\CWtables.asm
00004e   341e     RETLW     0x1e           	dt       b'00011110'  	; .----                                                  H:\PIC\CWreadr\CWtables.asm
00004f   3431     RETLW     0x31           	dt       "1"                                                                    H:\PIC\CWreadr\CWtables.asm
000050   341f     RETLW     0x1f           	dt       b'00011111'  	; -----                                                  H:\PIC\CWreadr\CWtables.asm
000051   3430     RETLW     0x30           	dt       "0"                                                                    H:\PIC\CWreadr\CWtables.asm
000052   3401     RETLW     0x1            	dt       b'00000001'  	; -....                                                  H:\PIC\CWreadr\CWtables.asm
000053   3436     RETLW     0x36           	dt       "6"                                                                    H:\PIC\CWreadr\CWtables.asm
000054   3403     RETLW     0x3            	dt       b'00000011'  	; --...                                                  H:\PIC\CWreadr\CWtables.asm
000055   3437     RETLW     0x37           	dt       "7"                                                                    H:\PIC\CWreadr\CWtables.asm
000056   3407     RETLW     0x7            	dt       b'00000111'	; ---..                                                    H:\PIC\CWreadr\CWtables.asm
000057   3438     RETLW     0x38           	dt       "8"                                                                    H:\PIC\CWreadr\CWtables.asm
000058   340f     RETLW     0xf            	dt       b'00001111'  	; ----.                                                  H:\PIC\CWreadr\CWtables.asm
000059   3439     RETLW     0x39           	dt       "9"                                                                    H:\PIC\CWreadr\CWtables.asm
00005a   3411     RETLW     0x11           	dt       b'00010001'  	; -...-                                                  H:\PIC\CWreadr\CWtables.asm
00005b   343d     RETLW     0x3d           	dt       "="                                                                    H:\PIC\CWreadr\CWtables.asm
00005c   3409     RETLW     0x9            	dt       b'00001001'  	; -..-.                                                  H:\PIC\CWreadr\CWtables.asm
00005d   342f     RETLW     0x2f           	dt       "/"                                                                    H:\PIC\CWreadr\CWtables.asm
00005e   3402     RETLW     0x2            	dt       b'00000010'  	; .-...                                                  H:\PIC\CWreadr\CWtables.asm
00005f   3477     RETLW     0x77           	dt       "w"                                                                    H:\PIC\CWreadr\CWtables.asm
000060   3416     RETLW     0x16           	dt       b'00010110'  	; -.--.  same as KN :-(                                  H:\PIC\CWreadr\CWtables.asm
000061   3428     RETLW     0x28           	dt       "("                                                                    H:\PIC\CWreadr\CWtables.asm
000062   34ff     RETLW     0xff           	dt       b'11111111'  	; filler                                                 H:\PIC\CWreadr\CWtables.asm
000063   3420     RETLW     0x20           	dt       " "                                                                    H:\PIC\CWreadr\CWtables.asm
                                           endtb_e                                                                          H:\PIC\CWreadr\CWtables.asm
                                                                                                                            H:\PIC\CWreadr\CWtables.asm
                                           ;     subroutine searching the character with W offset in the 6 signs tab_char   H:\PIC\CWreadr\CWtables.asm
                                           tab_f                                                                            H:\PIC\CWreadr\CWtables.asm
                                           	                                                                                H:\PIC\CWreadr\CWtables.asm
000064   0782     ADDWF     0x2,0x1        	addwf    PCL,1 		; increments jump address                                      H:\PIC\CWreadr\CWtables.asm
000065   3428     RETLW     0x28           	dt       b'00101000'	; ...-.-   SK                                              H:\PIC\CWreadr\CWtables.asm
000066   3423     RETLW     0x23           	dt       "#"                                                                    H:\PIC\CWreadr\CWtables.asm
000067   340c     RETLW     0xc            	dt       b'00001100'	; ..--..                                                   H:\PIC\CWreadr\CWtables.asm
000068   343f     RETLW     0x3f           	dt       "?"                                                                    H:\PIC\CWreadr\CWtables.asm
000069   3421     RETLW     0x21           	dt       b'00100001'	; -....-                                                   H:\PIC\CWreadr\CWtables.asm
00006a   342d     RETLW     0x2d           	dt       "-"                                                                    H:\PIC\CWreadr\CWtables.asm
00006b   342a     RETLW     0x2a           	dt       b'00101010'	; .-.-.-                                                   H:\PIC\CWreadr\CWtables.asm
00006c   342e     RETLW     0x2e           	dt       "."                                                                    H:\PIC\CWreadr\CWtables.asm
00006d   3433     RETLW     0x33           	dt       b'00110011'	; --..--                                                   H:\PIC\CWreadr\CWtables.asm
00006e   342c     RETLW     0x2c           	dt       ","                                                                    H:\PIC\CWreadr\CWtables.asm
00006f   342d     RETLW     0x2d           	dt       b'00101101'  	; -.--.-                                                 H:\PIC\CWreadr\CWtables.asm
000070   3429     RETLW     0x29           	dt       ")"                                                                    H:\PIC\CWreadr\CWtables.asm
000071   342a     RETLW     0x2a           	dt       b'00101010'  	; -.-.-.                                                 H:\PIC\CWreadr\CWtables.asm
000072   343b     RETLW     0x3b           	dt       ";"                                                                    H:\PIC\CWreadr\CWtables.asm
000073   3412     RETLW     0x12           	dt       b'00010010'  	; .-..-.                                                 H:\PIC\CWreadr\CWtables.asm
000074   3422     RETLW     0x22           	dt       022h                                                                   H:\PIC\CWreadr\CWtables.asm
000075   341e     RETLW     0x1e           	dt       b'00011110'  	; .----.                                                 H:\PIC\CWreadr\CWtables.asm
000076   3427     RETLW     0x27           	dt       "'"                                                                    H:\PIC\CWreadr\CWtables.asm
000077   340d     RETLW     0xd            	dt       b'00001101'  	; ..--.-                                                 H:\PIC\CWreadr\CWtables.asm
000078   345f     RETLW     0x5f           	dt       "_"                                                                    H:\PIC\CWreadr\CWtables.asm
000079   34ff     RETLW     0xff           	dt       b'11111111'  	; filler                                                 H:\PIC\CWreadr\CWtables.asm
00007a   3420     RETLW     0x20           	dt       " "                                                                    H:\PIC\CWreadr\CWtables.asm
                                           endtb_f                                                                          H:\PIC\CWreadr\CWtables.asm
                                           	end                                                                             H:\PIC\CWreadr\CWtables.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWinter.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           		global		tmrint                                                                 H:\PIC\CWreadr\CWinter.asm
                                           		global		timeon,timeoff,timchr1,timchr2                                         H:\PIC\CWreadr\CWinter.asm
                                                                                                                            H:\PIC\CWreadr\CWinter.asm
                                           	udata                                                                           H:\PIC\CWreadr\CWinter.asm
                                           save_w	res 1 ;	 0x22		;W register save area                                      H:\PIC\CWreadr\CWinter.asm
                                           save_s	res 1 ;	 0x23		;STATUS register save area                                 H:\PIC\CWreadr\CWinter.asm
                                           timeon  res 1 ;  0x12		;ON signal duration                                       H:\PIC\CWreadr\CWinter.asm
                                           timeoff res 1 ;	 0x13		;OFF signal duration                                      H:\PIC\CWreadr\CWinter.asm
                                           timchr1	res 1 ;	 0x14		;received characters timer1 (sec/10)                      H:\PIC\CWreadr\CWinter.asm
                                           timchr2	res 1 ;	 0x15		;received characters timer2 (sec/100)                     H:\PIC\CWreadr\CWinter.asm
                                                                                                                            H:\PIC\CWreadr\CWinter.asm
                                                                                                                            H:\PIC\CWreadr\CWinter.asm
                                           STARTUP	code                                                                     H:\PIC\CWreadr\CWinter.asm
                                           ;       Interrupt address                                                        H:\PIC\CWreadr\CWinter.asm
                                           	org      h'0004'                                                                H:\PIC\CWreadr\CWinter.asm
000004   28b7     GOTO      0xb7           tmr	goto	 tmrint	                                                                H:\PIC\CWreadr\CWinter.asm
                                                                                                                            H:\PIC\CWreadr\CWinter.asm
                                           	code                                                                            H:\PIC\CWreadr\CWinter.asm
                                           ;       interrupt subroutine (only TIMER INTERRUPT)                              H:\PIC\CWreadr\CWinter.asm
                                           tmrint                                                                           H:\PIC\CWreadr\CWinter.asm
0000b7   00a1     MOVWF     0x21           	movwf 	save_w		; store W in save_w                                              H:\PIC\CWreadr\CWinter.asm
0000b8   0e03     SWAPF     0x3,0x0        	swapf	STATUS,W	; store STATUS in W                                              H:\PIC\CWreadr\CWinter.asm
0000b9   00a2     MOVWF     0x22           	movwf	save_s		; store W in save_s                                               H:\PIC\CWreadr\CWinter.asm
                                                                                                                            H:\PIC\CWreadr\CWinter.asm
0000ba   0aa3     INCF      0x23,0x1       	incf	timeon,F	; ON timer increment                                              H:\PIC\CWreadr\CWinter.asm
0000bb   0aa4     INCF      0x24,0x1       	incf	timeoff,F	; OFF timer increment                                            H:\PIC\CWreadr\CWinter.asm
0000bc   0aa6     INCF      0x26,0x1       	incf	timchr2,F	; sec/100 timer increment                                        H:\PIC\CWreadr\CWinter.asm
0000bd   300a     MOVLW     0xa            	movlw	d'10'                                                                     H:\PIC\CWreadr\CWinter.asm
0000be   0226     SUBWF     0x26,0x0       	subwf	timchr2,W	; verify if sec/100 timer > 9                                   H:\PIC\CWreadr\CWinter.asm
0000bf   1c03     BTFSS     0x3,0x0        	btfss	STATUS,C                                                                  H:\PIC\CWreadr\CWinter.asm
0000c0   28c3     GOTO      0xc3           	goto	tmrint1                                                                    H:\PIC\CWreadr\CWinter.asm
0000c1   01a6     CLRF      0x26           	clrf	timchr2		; if an overflow occurred clear sec/100                           H:\PIC\CWreadr\CWinter.asm
0000c2   0aa5     INCF      0x25,0x1       	incf	timchr1,F		; and sec/10 timer increment                                    H:\PIC\CWreadr\CWinter.asm
                                           tmrint1                                                                          H:\PIC\CWreadr\CWinter.asm
0000c3   3064     MOVLW     0x64           	movlw	d'100'		; set initial TMR0 value to 100                                   H:\PIC\CWreadr\CWinter.asm
0000c4   0081     MOVWF     0x1            	movwf	TMR0		; 155 x 64 = 9.9 mS interrupt cycle                                 H:\PIC\CWreadr\CWinter.asm
0000c5   110b     BCF       0xb,0x2        	bcf	INTCON,T0IF	; reset interrupt bit                                           H:\PIC\CWreadr\CWinter.asm
                                                                                                                            H:\PIC\CWreadr\CWinter.asm
0000c6   0e22     SWAPF     0x22,0x0       	swapf	save_s,W	;                                                                H:\PIC\CWreadr\CWinter.asm
0000c7   0083     MOVWF     0x3            	movwf	STATUS		; restore STATUS register                                         H:\PIC\CWreadr\CWinter.asm
0000c8   0ea1     SWAPF     0x21,0x1       	swapf	save_w,F	;                                                                H:\PIC\CWreadr\CWinter.asm
0000c9   0e21     SWAPF     0x21,0x0       	swapf	save_w,W	; restore W register                                             H:\PIC\CWreadr\CWinter.asm
0000ca   0009     RETFIE                   	retfie                                                                          H:\PIC\CWreadr\CWinter.asm
                                           	end                                                                             H:\PIC\CWreadr\CWinter.asm
                                           ;	Initialize I/O                                                                 H:\PIC\CWreadr\CWinit.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWinit.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           		include		CWdefs.inc                                                            H:\PIC\CWreadr\CWinit.asm
                                           ;	Constants used by multiple routines                                            H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ;       program constants definitions                                            H:\PIC\CWreadr\CWdefs.inc
                                           swon	equ	 0x00                                                                   H:\PIC\CWreadr\CWdefs.inc
                                           swoff	equ	 0x01	                                                                 H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ; 	program settable parameters                                                   H:\PIC\CWreadr\CWdefs.inc
                                           chrparm equ	 0x08		; chars number for speed calculation                          H:\PIC\CWreadr\CWdefs.inc
                                           rowparm equ	 0x28		; chars number on the LCD raw                                 H:\PIC\CWreadr\CWdefs.inc
                                           sgparm  equ	 0x0f		; dit/dashes number for param. refresh	                       H:\PIC\CWreadr\CWdefs.inc
                                            	                                                                               H:\PIC\CWreadr\CWdefs.inc
                                           ; port_a bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_P0	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_P1	equ	2                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_CW	equ	4                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           ; port_b bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_EN	equ	3                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_RS	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWinit.asm
                                           		global	Initialize                                                              H:\PIC\CWreadr\CWinit.asm
                                           		extern	timeon,timeoff,timchr1,timchr2                                          H:\PIC\CWreadr\CWinit.asm
                                           		extern  ctrsegn,swinput,tmed_on,tmed_of,tmax_of                                H:\PIC\CWreadr\CWinit.asm
                                           		extern	tmin1_on,tmin1_of,tmin2_on,tmin2_of,tmin3_on,tmin3_of                   H:\PIC\CWreadr\CWinit.asm
                                           		extern	plval,pldata,speed,cntchar                                              H:\PIC\CWreadr\CWinit.asm
                                                                                                                            H:\PIC\CWreadr\CWinit.asm
                                           	code                                                                            H:\PIC\CWreadr\CWinit.asm
                                           Initialize                                                                       H:\PIC\CWreadr\CWinit.asm
                                           ; turn off comparators                                                           H:\PIC\CWreadr\CWinit.asm
0000cb   3007     MOVLW     0x7            	movlw		H'07'		; Turn off comparators                                            H:\PIC\CWreadr\CWinit.asm
0000cc   009f     MOVWF     0x1f           	movwf		CMCON		; so they can be I/O                                              H:\PIC\CWreadr\CWinit.asm
                                                                                                                            H:\PIC\CWreadr\CWinit.asm
                                           ;	set initial value to I/O pins, timer and control registers                     H:\PIC\CWreadr\CWinit.asm
0000cd   0185     CLRF      0x5            	clrf	 PORTA		; clear data registers                                             H:\PIC\CWreadr\CWinit.asm
0000ce   0186     CLRF      0x6            	clrf	 PORTB                                                                     H:\PIC\CWreadr\CWinit.asm
                                               errorlevel	-302                                                              H:\PIC\CWreadr\CWinit.asm
0000cf   1683     BSF       0x3,0x5        	bsf	 STATUS,RP0	; memory bank1 set to address special registers                 H:\PIC\CWreadr\CWinit.asm
                                                                                                                            H:\PIC\CWreadr\CWinit.asm
0000d0   30ff     MOVLW     0xff           	movlw	 0xff		; all PORTA pins as input                                          H:\PIC\CWreadr\CWinit.asm
0000d1   0085     MOVWF     0x5            	movwf	 TRISA                                                                    H:\PIC\CWreadr\CWinit.asm
0000d2   3000     MOVLW     0x0            	movlw	 0x00		; all PORTB pins as output                                         H:\PIC\CWreadr\CWinit.asm
0000d3   0086     MOVWF     0x6            	movwf	 TRISB                                                                    H:\PIC\CWreadr\CWinit.asm
                                                                                                                            H:\PIC\CWreadr\CWinit.asm
0000d4   1401     BSF       0x1,0x0        	bsf	 OPTION_REG,PS0                                                             H:\PIC\CWreadr\CWinit.asm
0000d5   1081     BCF       0x1,0x1        	bcf	 OPTION_REG,PS1	; set prescaler ratio to 64                                 H:\PIC\CWreadr\CWinit.asm
0000d6   1501     BSF       0x1,0x2        	bsf	 OPTION_REG,PS2	                                                            H:\PIC\CWreadr\CWinit.asm
0000d7   1181     BCF       0x1,0x3        	bcf	 OPTION_REG,PSA	; assign prescaler to timer                                 H:\PIC\CWreadr\CWinit.asm
0000d8   1281     BCF       0x1,0x5        	bcf	 OPTION_REG,T0CS	; assign counter to internal clock                         H:\PIC\CWreadr\CWinit.asm
                                                                                                                            H:\PIC\CWreadr\CWinit.asm
0000d9   1283     BCF       0x3,0x5        	bcf	 STATUS,RP0	; memory bank0 reset to address data RAM                        H:\PIC\CWreadr\CWinit.asm
                                               errorlevel	+302                                                              H:\PIC\CWreadr\CWinit.asm
0000da   3064     MOVLW     0x64           	movlw	 d'100'                                                                   H:\PIC\CWreadr\CWinit.asm
0000db   0081     MOVWF     0x1            	movwf	 TMR0		; set TMR0 initial value to 100                                    H:\PIC\CWreadr\CWinit.asm
0000dc   168b     BSF       0xb,0x5        	bsf	 INTCON,T0IE	; timer interrupt enable                                       H:\PIC\CWreadr\CWinit.asm
0000dd   178b     BSF       0xb,0x7        	bsf	 INTCON,GIE	; global interrupt enable                                       H:\PIC\CWreadr\CWinit.asm
                                                                                                                            H:\PIC\CWreadr\CWinit.asm
0000de   01bd     CLRF      0x3d           	clrf     ctrsegn	; clear received signs counter                                 H:\PIC\CWreadr\CWinit.asm
0000df   01a0     CLRF      0x20           	clrf	 swinput	; clear input state indicators                                    H:\PIC\CWreadr\CWinit.asm
0000e0   14a0     BSF       0x20,0x1       	bsf	 swinput,swoff	; set default OFF state                                      H:\PIC\CWreadr\CWinit.asm
0000e1   300f     MOVLW     0xf            	movlw	 h'0f'		; set HIGH and LOW mean time to 150 mS                            H:\PIC\CWreadr\CWinit.asm
0000e2   00ba     MOVWF     0x3a           	movwf	 tmed_on	;                                                                H:\PIC\CWreadr\CWinit.asm
0000e3   00bb     MOVWF     0x3b           	movwf	 tmed_of                                                                  H:\PIC\CWreadr\CWinit.asm
0000e4   3026     MOVLW     0x26           	movlw	 h'26'		; set max LOW time to 380 ms                                      H:\PIC\CWreadr\CWinit.asm
0000e5   00bc     MOVWF     0x3c           	movwf	 tmax_of	;                                                                H:\PIC\CWreadr\CWinit.asm
0000e6   30ff     MOVLW     0xff           	movlw	 h'ff'		; set min ON and OFF times to high-value                          H:\PIC\CWreadr\CWinit.asm
0000e7   00b0     MOVWF     0x30           	movwf	 tmin1_on	;                                                               H:\PIC\CWreadr\CWinit.asm
0000e8   00b1     MOVWF     0x31           	movwf	 tmin2_on	;                                                               H:\PIC\CWreadr\CWinit.asm
0000e9   00b2     MOVWF     0x32           	movwf	 tmin3_on                                                                 H:\PIC\CWreadr\CWinit.asm
0000ea   00b3     MOVWF     0x33           	movwf	 tmin1_of                                                                 H:\PIC\CWreadr\CWinit.asm
0000eb   00b4     MOVWF     0x34           	movwf	 tmin2_of                                                                 H:\PIC\CWreadr\CWinit.asm
0000ec   00b5     MOVWF     0x35           	movwf	 tmin3_of                                                                 H:\PIC\CWreadr\CWinit.asm
                                                                                                                            H:\PIC\CWreadr\CWinit.asm
0000ed   01a3     CLRF      0x23           	clrf	 timeon		; clear ON and OFF timers                                         H:\PIC\CWreadr\CWinit.asm
0000ee   01a4     CLRF      0x24           	clrf	 timeoff                                                                   H:\PIC\CWreadr\CWinit.asm
0000ef   01a5     CLRF      0x25           	clrf	 timchr1	; clear received characters timers                                H:\PIC\CWreadr\CWinit.asm
0000f0   01a6     CLRF      0x26           	clrf	 timchr2                                                                   H:\PIC\CWreadr\CWinit.asm
                                                                                                                            H:\PIC\CWreadr\CWinit.asm
0000f1   01b8     CLRF      0x38           	clrf	 plval		; clear PLVAL and PLDATA                                           H:\PIC\CWreadr\CWinit.asm
0000f2   01b7     CLRF      0x37           	clrf	 pldata                                                                    H:\PIC\CWreadr\CWinit.asm
0000f3   01b9     CLRF      0x39           	clrf	 speed                                                                     H:\PIC\CWreadr\CWinit.asm
0000f4   3008     MOVLW     0x8            	movlw	 chrparm	; set to CHRPARM the characters counter                          H:\PIC\CWreadr\CWinit.asm
0000f5   00b6     MOVWF     0x36           	movwf	 cntchar	; to force count start                                           H:\PIC\CWreadr\CWinit.asm
0000f6   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWinit.asm
                                                                                                                            H:\PIC\CWreadr\CWinit.asm
                                           	end                                                                             H:\PIC\CWreadr\CWinit.asm
                                           ;	Delay routines                                                                 H:\PIC\CWreadr\CWdelay.asm
                                                                                                                            H:\PIC\CWreadr\CWdelay.asm
                                           		global		del50,del05,delcd                                                      H:\PIC\CWreadr\CWdelay.asm
                                                                                                                            H:\PIC\CWreadr\CWdelay.asm
                                           		udata                                                                          H:\PIC\CWreadr\CWdelay.asm
                                           rit1    res 1 ;      0x0c                                                        H:\PIC\CWreadr\CWdelay.asm
                                           rit2    res 1 ;      0x0d                                                        H:\PIC\CWreadr\CWdelay.asm
                                                                                                                            H:\PIC\CWreadr\CWdelay.asm
                                           		code                                                                           H:\PIC\CWreadr\CWdelay.asm
                                           ;       50 mS delay routine                                                      H:\PIC\CWreadr\CWdelay.asm
                                           del50                                                                            H:\PIC\CWreadr\CWdelay.asm
0000f7   307d     MOVLW     0x7d           	movlw    d'125'         ; 125 primary cycles                                    H:\PIC\CWreadr\CWdelay.asm
0000f8   00a7     MOVWF     0x27           	movwf    rit1           ;                                                       H:\PIC\CWreadr\CWdelay.asm
                                           del51                                                                            H:\PIC\CWreadr\CWdelay.asm
0000f9   3064     MOVLW     0x64           	movlw    d'100'         ; 100 secondary cycles                                  H:\PIC\CWreadr\CWdelay.asm
0000fa   00a8     MOVWF     0x28           	movwf    rit2                                                                   H:\PIC\CWreadr\CWdelay.asm
                                           del52                                                                            H:\PIC\CWreadr\CWdelay.asm
0000fb   0064     CLRWDT                   	clrwdt                  ; watchdog clear                                        H:\PIC\CWreadr\CWdelay.asm
0000fc   0ba8     DECFSZ    0x28,0x1       	decfsz   rit2,1         ; decrement counter2                                    H:\PIC\CWreadr\CWdelay.asm
0000fd   28fb     GOTO      0xfb           	goto     del52          ; if counter2 > 0 re-cycle				; re-cycle                H:\PIC\CWreadr\CWdelay.asm
0000fe   0ba7     DECFSZ    0x27,0x1       	decfsz   rit1,1         ; if counter2 = 0 decrement counter1                    H:\PIC\CWreadr\CWdelay.asm
0000ff   28f9     GOTO      0xf9           	goto     del51          ; if counter1 > 0 re-cycle                              H:\PIC\CWreadr\CWdelay.asm
                                           endl50                                                                           H:\PIC\CWreadr\CWdelay.asm
000100   0008     RETURN                   	return                  ; end routine                                           H:\PIC\CWreadr\CWdelay.asm
                                                                                                                            H:\PIC\CWreadr\CWdelay.asm
                                           ;       5 mS delay routine                                                       H:\PIC\CWreadr\CWdelay.asm
                                           del05                                                                            H:\PIC\CWreadr\CWdelay.asm
000101   3030     MOVLW     0x30           	movlw    d'48'         ; 48 primary cycles                                      H:\PIC\CWreadr\CWdelay.asm
000102   00a7     MOVWF     0x27           	movwf    rit1           ;                                                       H:\PIC\CWreadr\CWdelay.asm
                                           del051                                                                           H:\PIC\CWreadr\CWdelay.asm
000103   3019     MOVLW     0x19           	movlw    d'25'         ; 25 secondary cycles                                    H:\PIC\CWreadr\CWdelay.asm
000104   00a8     MOVWF     0x28           	movwf    rit2                                                                   H:\PIC\CWreadr\CWdelay.asm
                                           del052                                                                           H:\PIC\CWreadr\CWdelay.asm
000105   0064     CLRWDT                   	clrwdt                  ; watchdog clear                                        H:\PIC\CWreadr\CWdelay.asm
000106   0ba8     DECFSZ    0x28,0x1       	decfsz   rit2,1         ; decrement counter2                                    H:\PIC\CWreadr\CWdelay.asm
000107   2905     GOTO      0x105          	goto     del052         ; if counter2 > 0 re-cycle                              H:\PIC\CWreadr\CWdelay.asm
000108   0ba7     DECFSZ    0x27,0x1       	decfsz   rit1,1         ; if counter2 = 0 decrement counter1                    H:\PIC\CWreadr\CWdelay.asm
000109   2903     GOTO      0x103          	goto     del051         ; if counter1 > 0 re-cycle                              H:\PIC\CWreadr\CWdelay.asm
                                           endl05                                                                           H:\PIC\CWreadr\CWdelay.asm
00010a   0008     RETURN                   	return                  ; end routine                                           H:\PIC\CWreadr\CWdelay.asm
                                                                                                                            H:\PIC\CWreadr\CWdelay.asm
                                           ;       0.25 mS delay routine                                                    H:\PIC\CWreadr\CWdelay.asm
                                           delcd                                                                            H:\PIC\CWreadr\CWdelay.asm
00010b   3032     MOVLW     0x32           	movlw    d'50'          ; 50 delay cycles                                       H:\PIC\CWreadr\CWdelay.asm
00010c   00a7     MOVWF     0x27           	movwf    rit1                                                                   H:\PIC\CWreadr\CWdelay.asm
                                           delcd1                                                                           H:\PIC\CWreadr\CWdelay.asm
00010d   0064     CLRWDT                   	clrwdt                  ; watchdog clear                                        H:\PIC\CWreadr\CWdelay.asm
00010e   0000     NOP                      	nop                     ; 1 microsec delay                                      H:\PIC\CWreadr\CWdelay.asm
00010f   0ba7     DECFSZ    0x27,0x1       	decfsz   rit1,1         ; if counter > 0 re-cycle                               H:\PIC\CWreadr\CWdelay.asm
000110   290d     GOTO      0x10d          	goto     delcd1                                                                 H:\PIC\CWreadr\CWdelay.asm
                                           endcd                                                                            H:\PIC\CWreadr\CWdelay.asm
000111   0008     RETURN                   	return                  ; end routine                                           H:\PIC\CWreadr\CWdelay.asm
                                                                                                                            H:\PIC\CWreadr\CWdelay.asm
                                                                                                                            H:\PIC\CWreadr\CWdelay.asm
                                           		end                                                                            H:\PIC\CWreadr\CWdelay.asm
                                                                                                                            H:\PIC\CWreadr\CWdelay.asm
                                           ;	LCD routines                                                                   H:\PIC\CWreadr\CWlcd.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWlcd.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           		include		CWdefs.inc                                                            H:\PIC\CWreadr\CWlcd.asm
                                           ;	Constants used by multiple routines                                            H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ;       program constants definitions                                            H:\PIC\CWreadr\CWdefs.inc
                                           swon	equ	 0x00                                                                   H:\PIC\CWreadr\CWdefs.inc
                                           swoff	equ	 0x01	                                                                 H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ; 	program settable parameters                                                   H:\PIC\CWreadr\CWdefs.inc
                                           chrparm equ	 0x08		; chars number for speed calculation                          H:\PIC\CWreadr\CWdefs.inc
                                           rowparm equ	 0x28		; chars number on the LCD raw                                 H:\PIC\CWreadr\CWdefs.inc
                                           sgparm  equ	 0x0f		; dit/dashes number for param. refresh	                       H:\PIC\CWreadr\CWdefs.inc
                                            	                                                                               H:\PIC\CWreadr\CWdefs.inc
                                           ; port_a bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_P0	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_P1	equ	2                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_CW	equ	4                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           ; port_b bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_EN	equ	3                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_RS	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
                                           		global		sendlcd,cmdlcd,wrtlcd,bytelcd,inilcd                                   H:\PIC\CWreadr\CWlcd.asm
                                           		extern		delcd,del50                                                            H:\PIC\CWreadr\CWlcd.asm
                                           		extern		w_num1,w_count                                                         H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
                                           		udata                                                                          H:\PIC\CWreadr\CWlcd.asm
                                           bytelcd res 1 ;      0x0f                                                        H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
                                           		code                                                                           H:\PIC\CWreadr\CWlcd.asm
                                           ;     LCD display initialization routine                                         H:\PIC\CWreadr\CWlcd.asm
                                           ;         - 1 raw 5x7                                                            H:\PIC\CWreadr\CWlcd.asm
                                           ;         - 4 bit operation                                                      H:\PIC\CWreadr\CWlcd.asm
                                           ;         - no cursor                                                            H:\PIC\CWreadr\CWlcd.asm
                                           inilcd                                                                           H:\PIC\CWreadr\CWlcd.asm
000112   3038     MOVLW     0x38           	movlw    b'00111000'    ; 8 bits initialization                                 H:\PIC\CWreadr\CWlcd.asm
000113   0086     MOVWF     0x6            	movwf    PORTB                                                                  H:\PIC\CWreadr\CWlcd.asm
000114   1186     BCF       0x6,0x3        	bcf      PORTB,bit_EN       ; reset enable                                      H:\PIC\CWreadr\CWlcd.asm
000115   20f7     CALL      0xf7           	call     del50                                                                  H:\PIC\CWreadr\CWlcd.asm
000116   3038     MOVLW     0x38           	movlw    b'00111000'    ; repeat 8 bits initialization                          H:\PIC\CWreadr\CWlcd.asm
000117   0086     MOVWF     0x6            	movwf    PORTB                                                                  H:\PIC\CWreadr\CWlcd.asm
000118   1186     BCF       0x6,0x3        	bcf      PORTB,bit_EN       ; reset enable                                      H:\PIC\CWreadr\CWlcd.asm
000119   20f7     CALL      0xf7           	call     del50                                                                  H:\PIC\CWreadr\CWlcd.asm
00011a   3038     MOVLW     0x38           	movlw    b'00111000'    ; repeat 8 bits initialization                          H:\PIC\CWreadr\CWlcd.asm
00011b   0086     MOVWF     0x6            	movwf    PORTB                                                                  H:\PIC\CWreadr\CWlcd.asm
00011c   1186     BCF       0x6,0x3        	bcf      PORTB,bit_EN       ; reset enable                                      H:\PIC\CWreadr\CWlcd.asm
00011d   20f7     CALL      0xf7           	call     del50                                                                  H:\PIC\CWreadr\CWlcd.asm
00011e   3028     MOVLW     0x28           	movlw    b'00101000'    ; 4 bits initialization                                 H:\PIC\CWreadr\CWlcd.asm
00011f   0086     MOVWF     0x6            	movwf    PORTB                                                                  H:\PIC\CWreadr\CWlcd.asm
000120   1186     BCF       0x6,0x3        	bcf      PORTB,bit_EN       ; reset enable                                      H:\PIC\CWreadr\CWlcd.asm
000121   20f7     CALL      0xf7           	call     del50                                                                  H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
000122   3020     MOVLW     0x20           	movlw    b'00100000'    ; set one 5x7 line                                      H:\PIC\CWreadr\CWlcd.asm
000123   00a9     MOVWF     0x29           	movwf    bytelcd                                                                H:\PIC\CWreadr\CWlcd.asm
000124   2141     CALL      0x141          	call     cmdlcd         ; send command                                          H:\PIC\CWreadr\CWlcd.asm
000125   20f7     CALL      0xf7           	call     del50                                                                  H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
000126   3007     MOVLW     0x7            	movlw    b'00000111'    ; set LCD mode                                          H:\PIC\CWreadr\CWlcd.asm
000127   00a9     MOVWF     0x29           	movwf    bytelcd	; cursor increment/display shift                               H:\PIC\CWreadr\CWlcd.asm
000128   2141     CALL      0x141          	call     cmdlcd         ; send command                                          H:\PIC\CWreadr\CWlcd.asm
000129   20f7     CALL      0xf7           	call     del50                                                                  H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
00012a   300c     MOVLW     0xc            	movlw    b'00001100'    ; display on / cursor off                               H:\PIC\CWreadr\CWlcd.asm
00012b   00a9     MOVWF     0x29           	movwf    bytelcd                                                                H:\PIC\CWreadr\CWlcd.asm
00012c   2141     CALL      0x141          	call     cmdlcd         ; send command                                          H:\PIC\CWreadr\CWlcd.asm
00012d   20f7     CALL      0xf7           	call     del50                                                                  H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
00012e   3001     MOVLW     0x1            	movlw    b'00000001'    ; clear LCD / home cursor                               H:\PIC\CWreadr\CWlcd.asm
00012f   00a9     MOVWF     0x29           	movwf    bytelcd                                                                H:\PIC\CWreadr\CWlcd.asm
000130   2141     CALL      0x141          	call     cmdlcd         ; send command                                          H:\PIC\CWreadr\CWlcd.asm
000131   20f7     CALL      0xf7           	call     del50                                                                  H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
000132   3028     MOVLW     0x28           	movlw	 rowparm                                                                  H:\PIC\CWreadr\CWlcd.asm
000133   3880     IORLW     0x80           	iorlw	 0x80		; set cursor at row end		                                          H:\PIC\CWreadr\CWlcd.asm
000134   00a9     MOVWF     0x29           	movwf    bytelcd                                                                H:\PIC\CWreadr\CWlcd.asm
000135   2141     CALL      0x141          	call     cmdlcd         ; send command                                          H:\PIC\CWreadr\CWlcd.asm
000136   20f7     CALL      0xf7           	call     del50                                                                  H:\PIC\CWreadr\CWlcd.asm
                                           endlcd                                                                           H:\PIC\CWreadr\CWlcd.asm
000137   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
                                           ;	LCD display routine                                                            H:\PIC\CWreadr\CWlcd.asm
                                           ;                                                                                H:\PIC\CWreadr\CWlcd.asm
                                           ;	input : 	- string to display, starting at w_num1                               H:\PIC\CWreadr\CWlcd.asm
                                           ;			- characters number to display in w_count                                    H:\PIC\CWreadr\CWlcd.asm
                                           ;                                                                                H:\PIC\CWreadr\CWlcd.asm
                                           ;	output :	- send to LCD display                                                 H:\PIC\CWreadr\CWlcd.asm
                                           ;	                                                                               H:\PIC\CWreadr\CWlcd.asm
                                           sendlcd                                                                          H:\PIC\CWreadr\CWlcd.asm
000138   302b     MOVLW     0x2b           	movlw	 w_num1                                                                   H:\PIC\CWreadr\CWlcd.asm
000139   0084     MOVWF     0x4            	movwf    FSR		; load pointer to w_num1                                          H:\PIC\CWreadr\CWlcd.asm
                                           sendlc1                                                                          H:\PIC\CWreadr\CWlcd.asm
00013a   0800     MOVF      0x0,0x0        	movf	 INDF,W	;                                                                  H:\PIC\CWreadr\CWlcd.asm
00013b   00a9     MOVWF     0x29           	movwf	 bytelcd	; move to bytelcd the character to send                          H:\PIC\CWreadr\CWlcd.asm
00013c   214e     CALL      0x14e          	call	 wrtlcd                                                                    H:\PIC\CWreadr\CWlcd.asm
00013d   0a84     INCF      0x4,0x1        	incf	 FSR,F		; position INDF at next character	                                 H:\PIC\CWreadr\CWlcd.asm
00013e   0baa     DECFSZ    0x2a,0x1       	decfsz	 w_count,F	; re-cycle until counter is zero                              H:\PIC\CWreadr\CWlcd.asm
00013f   293a     GOTO      0x13a          	goto	 sendlc1                                                                   H:\PIC\CWreadr\CWlcd.asm
                                           endsend                                                                          H:\PIC\CWreadr\CWlcd.asm
000140   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
                                           ;     This routine sends a command to LCD display (4 bits at a time)             H:\PIC\CWreadr\CWlcd.asm
                                           cmdlcd                                                                           H:\PIC\CWreadr\CWlcd.asm
000141   0829     MOVF      0x29,0x0       	movf     bytelcd,W                                                              H:\PIC\CWreadr\CWlcd.asm
000142   39f0     ANDLW     0xf0           	andlw    b'11110000'    ; clear right nibble                                    H:\PIC\CWreadr\CWlcd.asm
000143   3808     IORLW     0x8            	iorlw    b'00001000'    ; set RS = 0, ENA = 1                                   H:\PIC\CWreadr\CWlcd.asm
000144   0086     MOVWF     0x6            	movwf    PORTB         ; move nibble to PORTB                                   H:\PIC\CWreadr\CWlcd.asm
000145   1186     BCF       0x6,0x3        	bcf      PORTB,bit_EN       ; enable goes down                                  H:\PIC\CWreadr\CWlcd.asm
000146   210b     CALL      0x10b          	call     delcd          ; one delay                                             H:\PIC\CWreadr\CWlcd.asm
                                           	                                                                                H:\PIC\CWreadr\CWlcd.asm
000147   0e29     SWAPF     0x29,0x0       	swapf    bytelcd,0      ; exchange nibbles in bytelcd                           H:\PIC\CWreadr\CWlcd.asm
000148   39f0     ANDLW     0xf0           	andlw    b'11110000'                                                            H:\PIC\CWreadr\CWlcd.asm
000149   3808     IORLW     0x8            	iorlw    b'00001000'                                                            H:\PIC\CWreadr\CWlcd.asm
00014a   0086     MOVWF     0x6            	movwf    PORTB                                                                  H:\PIC\CWreadr\CWlcd.asm
00014b   1186     BCF       0x6,0x3        	bcf      PORTB,bit_EN                                                           H:\PIC\CWreadr\CWlcd.asm
00014c   210b     CALL      0x10b          	call     delcd                                                                  H:\PIC\CWreadr\CWlcd.asm
                                           endcmlc                                                                          H:\PIC\CWreadr\CWlcd.asm
00014d   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
                                           ;       This routine sends a character to LCD display (4 bits at a time)         H:\PIC\CWreadr\CWlcd.asm
                                           wrtlcd                                                                           H:\PIC\CWreadr\CWlcd.asm
00014e   0829     MOVF      0x29,0x0       	movf     bytelcd,W                                                              H:\PIC\CWreadr\CWlcd.asm
00014f   39f0     ANDLW     0xf0           	andlw    b'11110000'    ; clear right nibble                                    H:\PIC\CWreadr\CWlcd.asm
000150   380a     IORLW     0xa            	iorlw    b'00001010'    ; set RS = 1, ENA = 1                                   H:\PIC\CWreadr\CWlcd.asm
000151   0086     MOVWF     0x6            	movwf    PORTB         ; move nibble to PORTB                                   H:\PIC\CWreadr\CWlcd.asm
000152   1186     BCF       0x6,0x3        	bcf      PORTB,bit_EN       ; enable goes down                                  H:\PIC\CWreadr\CWlcd.asm
000153   210b     CALL      0x10b          	call     delcd          ; one delay                                             H:\PIC\CWreadr\CWlcd.asm
                                           	                                                                                H:\PIC\CWreadr\CWlcd.asm
000154   0e29     SWAPF     0x29,0x0       	swapf    bytelcd,W      ; exchange nibbles in bytelcd                           H:\PIC\CWreadr\CWlcd.asm
000155   39f0     ANDLW     0xf0           	andlw    b'11110000'                                                            H:\PIC\CWreadr\CWlcd.asm
000156   380a     IORLW     0xa            	iorlw    b'00001010'                                                            H:\PIC\CWreadr\CWlcd.asm
000157   0086     MOVWF     0x6            	movwf    PORTB                                                                  H:\PIC\CWreadr\CWlcd.asm
000158   1186     BCF       0x6,0x3        	bcf      PORTB,bit_EN                                                           H:\PIC\CWreadr\CWlcd.asm
000159   210b     CALL      0x10b          	call     delcd                                                                  H:\PIC\CWreadr\CWlcd.asm
                                           endwrlc                                                                          H:\PIC\CWreadr\CWlcd.asm
00015a   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWlcd.asm
                                                                                                                            H:\PIC\CWreadr\CWlcd.asm
                                           	end                                                                             H:\PIC\CWreadr\CWlcd.asm
                                           ;	Multiply and divide routines                                                   H:\PIC\CWreadr\CWmuldiv.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWmuldiv.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                                                                                            H:\PIC\CWreadr\CWmuldiv.asm
                                           		global		moltip,dividi                                                          H:\PIC\CWreadr\CWmuldiv.asm
                                           		global		w_num1,w_num2,w_num3,w_num4,w_count                                    H:\PIC\CWreadr\CWmuldiv.asm
                                                                                                                            H:\PIC\CWreadr\CWmuldiv.asm
                                           		udata                                                                          H:\PIC\CWreadr\CWmuldiv.asm
                                           w_count	res 1 ;	 0x25		; - hex to ascii conversion                               H:\PIC\CWreadr\CWmuldiv.asm
                                           w_num1	res 1 ;	 0x26		; - multiply                                               H:\PIC\CWreadr\CWmuldiv.asm
                                           w_num2	res 1 ;	 0x27		; - divide                                                 H:\PIC\CWreadr\CWmuldiv.asm
                                           w_num3	res 1 ;	 0x28		;                                                          H:\PIC\CWreadr\CWmuldiv.asm
                                           w_num4	res 1 ;	 0x29		;                                                          H:\PIC\CWreadr\CWmuldiv.asm
                                                                                                                            H:\PIC\CWreadr\CWmuldiv.asm
                                           	code                                                                            H:\PIC\CWreadr\CWmuldiv.asm
                                           ;	Multiply routine between two 1 byte numbers                                    H:\PIC\CWreadr\CWmuldiv.asm
                                           ;                                                                                H:\PIC\CWreadr\CWmuldiv.asm
                                           ;	input :                                                                        H:\PIC\CWreadr\CWmuldiv.asm
                                           ;		multiplicand in w_num2                                                        H:\PIC\CWreadr\CWmuldiv.asm
                                           ;		multiplyer in w_num3                                                          H:\PIC\CWreadr\CWmuldiv.asm
                                           ;                                                                                H:\PIC\CWreadr\CWmuldiv.asm
                                           ;	output :                                                                       H:\PIC\CWreadr\CWmuldiv.asm
                                           ;		product in w_num1 + w_num2	                                                   H:\PIC\CWreadr\CWmuldiv.asm
                                           moltip                                                                           H:\PIC\CWreadr\CWmuldiv.asm
                                                                                                                            H:\PIC\CWreadr\CWmuldiv.asm
00015b   01ab     CLRF      0x2b           	clrf	 w_num1		; clear first product digit                                       H:\PIC\CWreadr\CWmuldiv.asm
00015c   082c     MOVF      0x2c,0x0       	movf	 w_num2,W	;                                                                H:\PIC\CWreadr\CWmuldiv.asm
00015d   00aa     MOVWF     0x2a           	movwf	 w_count	; save multiplicand in w_count                                   H:\PIC\CWreadr\CWmuldiv.asm
00015e   03ad     DECF      0x2d,0x1       	decf	 w_num3,F	;                                                                H:\PIC\CWreadr\CWmuldiv.asm
                                           moltip1		                                                                        H:\PIC\CWreadr\CWmuldiv.asm
00015f   0064     CLRWDT                   	clrwdt                  ; watchdog clear                                        H:\PIC\CWreadr\CWmuldiv.asm
000160   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; sum multiplicand to the result                                H:\PIC\CWreadr\CWmuldiv.asm
000161   07ac     ADDWF     0x2c,0x1       	addwf	 w_num2,F	; of the previous sum                                           H:\PIC\CWreadr\CWmuldiv.asm
000162   1c03     BTFSS     0x3,0x0        	btfss	 STATUS,C	;                                                               H:\PIC\CWreadr\CWmuldiv.asm
000163   2965     GOTO      0x165          	goto	 moltip2	; if there is a carry increment the                               H:\PIC\CWreadr\CWmuldiv.asm
000164   0aab     INCF      0x2b,0x1       	incf	 w_num1,F	; first product digit                                            H:\PIC\CWreadr\CWmuldiv.asm
                                           moltip2                                                                          H:\PIC\CWreadr\CWmuldiv.asm
000165   0bad     DECFSZ    0x2d,0x1       	decfsz	 w_num3,F	; otherwise decrement multiplyer                               H:\PIC\CWreadr\CWmuldiv.asm
000166   295f     GOTO      0x15f          	goto	 moltip1	; and re-cycle until zero	                                        H:\PIC\CWreadr\CWmuldiv.asm
                                           endmolt                                                                          H:\PIC\CWreadr\CWmuldiv.asm
000167   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWmuldiv.asm
                                                                                                                            H:\PIC\CWreadr\CWmuldiv.asm
                                           ;	Divide routine between a two bytes dividend                                    H:\PIC\CWreadr\CWmuldiv.asm
                                           ;	and a 1 byte divisor                                                           H:\PIC\CWreadr\CWmuldiv.asm
                                           ;  	Quotient must have only a digit                                              H:\PIC\CWreadr\CWmuldiv.asm
                                           ;                                                                                H:\PIC\CWreadr\CWmuldiv.asm
                                           ;	input :                                                                        H:\PIC\CWreadr\CWmuldiv.asm
                                           ;		dividend in w_num1 + w_num2                                                   H:\PIC\CWreadr\CWmuldiv.asm
                                           ;		divisor in w_num3                                                             H:\PIC\CWreadr\CWmuldiv.asm
                                           ;                                                                                H:\PIC\CWreadr\CWmuldiv.asm
                                           ;	output :                                                                       H:\PIC\CWreadr\CWmuldiv.asm
                                           ;		quotient in w_num1                                                            H:\PIC\CWreadr\CWmuldiv.asm
                                           ;		remainder in w_num2	                                                          H:\PIC\CWreadr\CWmuldiv.asm
                                           dividi                                                                           H:\PIC\CWreadr\CWmuldiv.asm
000168   01aa     CLRF      0x2a           	clrf	 w_count	; initial quotient clear                                          H:\PIC\CWreadr\CWmuldiv.asm
                                           dividi1				;                                                                     H:\PIC\CWreadr\CWmuldiv.asm
000169   0064     CLRWDT                   	clrwdt                  ; watchdog clear 		                                     H:\PIC\CWreadr\CWmuldiv.asm
00016a   0aaa     INCF      0x2a,0x1       	incf	 w_count,F 	; increment quotient at every re-cycle	                        H:\PIC\CWreadr\CWmuldiv.asm
00016b   082d     MOVF      0x2d,0x0       	movf	 w_num3,W	; subtract divisor from result obtained                          H:\PIC\CWreadr\CWmuldiv.asm
00016c   02ac     SUBWF     0x2c,0x1       	subwf	 w_num2,F	; by the previous subtraction                                   H:\PIC\CWreadr\CWmuldiv.asm
00016d   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	; if negative carry                                             H:\PIC\CWreadr\CWmuldiv.asm
00016e   2969     GOTO      0x169          	goto	 dividi1	; decrement fist dividend digit                                   H:\PIC\CWreadr\CWmuldiv.asm
00016f   3001     MOVLW     0x1            	movlw	 d'1'		;                                                                  H:\PIC\CWreadr\CWmuldiv.asm
000170   02ab     SUBWF     0x2b,0x1       	subwf	 w_num1,F                                                                 H:\PIC\CWreadr\CWmuldiv.asm
000171   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	; re-cycle until first digit                                    H:\PIC\CWreadr\CWmuldiv.asm
000172   2969     GOTO      0x169          	goto	 dividi1	; becomes negative and                                            H:\PIC\CWreadr\CWmuldiv.asm
000173   082d     MOVF      0x2d,0x0       	movf	 w_num3,W	; at end restore last                                            H:\PIC\CWreadr\CWmuldiv.asm
000174   07ac     ADDWF     0x2c,0x1       	addwf	 w_num2,F	; subtraction, putting the remainder                            H:\PIC\CWreadr\CWmuldiv.asm
000175   03aa     DECF      0x2a,0x1       	decf	 w_count,F	; in w_num2                                                     H:\PIC\CWreadr\CWmuldiv.asm
000176   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; then decrements quotient                                      H:\PIC\CWreadr\CWmuldiv.asm
000177   00ab     MOVWF     0x2b           	movwf	 w_num1		; and store it in w_num1                                         H:\PIC\CWreadr\CWmuldiv.asm
                                           enddiv                                                                           H:\PIC\CWreadr\CWmuldiv.asm
000178   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWmuldiv.asm
                                                                                                                            H:\PIC\CWreadr\CWmuldiv.asm
                                           	end                                                                             H:\PIC\CWreadr\CWmuldiv.asm
                                           		title		"CW Decoding Program - binary to ASCII conversion"                      H:\PIC\CWreadr\CWbinasc.asm
                                           		subtitle	"CWbinasc.asm $Revision: 1.2 $ $Date: 2005-02-03 09:06:54-05 $"       H:\PIC\CWreadr\CWbinasc.asm
                                           ;	Binary to ASCII conversion                                                     H:\PIC\CWreadr\CWbinasc.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWbinasc.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                                                                                            H:\PIC\CWreadr\CWbinasc.asm
                                           ;	Provided by this component                                                     H:\PIC\CWreadr\CWbinasc.asm
                                           		global		convert                                                                H:\PIC\CWreadr\CWbinasc.asm
                                           		global		w_conv                                                                 H:\PIC\CWreadr\CWbinasc.asm
                                           ;	External storage                                                               H:\PIC\CWreadr\CWbinasc.asm
                                           		extern		w_num1,w_num2,w_num3,w_num4,w_count                                    H:\PIC\CWreadr\CWbinasc.asm
                                                                                                                            H:\PIC\CWreadr\CWbinasc.asm
                                           		udata                                                                          H:\PIC\CWreadr\CWbinasc.asm
                                           w_conv	res 		1 				; subroutines work areas                                      H:\PIC\CWreadr\CWbinasc.asm
                                                                                                                            H:\PIC\CWreadr\CWbinasc.asm
                                           		code                                                                           H:\PIC\CWreadr\CWbinasc.asm
                                           ;	Conversion routine from hex (1 byte) to ascii (3 bytes)                        H:\PIC\CWreadr\CWbinasc.asm
                                           ;                                                                                H:\PIC\CWreadr\CWbinasc.asm
                                           ;	input : 	- hex value in w_num4                                                 H:\PIC\CWreadr\CWbinasc.asm
                                           ;                                                                                H:\PIC\CWreadr\CWbinasc.asm
                                           ;	output :	- ascii value on 3 bytes starting from w_num1                         H:\PIC\CWreadr\CWbinasc.asm
                                           ;	                                                                               H:\PIC\CWreadr\CWbinasc.asm
                                           convert                                                                          H:\PIC\CWreadr\CWbinasc.asm
000179   082e     MOVF      0x2e,0x0       	movf	 w_num4,W                                                                  H:\PIC\CWreadr\CWbinasc.asm
00017a   00af     MOVWF     0x2f           	movwf    w_conv		; move hex byte to working area                                H:\PIC\CWreadr\CWbinasc.asm
00017b   01aa     CLRF      0x2a           	clrf	 w_count	; clear digit counter	                                            H:\PIC\CWreadr\CWbinasc.asm
00017c   3064     MOVLW     0x64           	movlw	 d'100'		; set hundred in W                                               H:\PIC\CWreadr\CWbinasc.asm
                                           conve01                                                                          H:\PIC\CWreadr\CWbinasc.asm
00017d   02af     SUBWF     0x2f,0x1       	subwf	 w_conv,F	; subtract 100 from w_conv                                      H:\PIC\CWreadr\CWbinasc.asm
00017e   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	; if negative                                                   H:\PIC\CWreadr\CWbinasc.asm
00017f   2982     GOTO      0x182          	goto	 conve02	; restore last total                                              H:\PIC\CWreadr\CWbinasc.asm
000180   07af     ADDWF     0x2f,0x1       	addwf	 w_conv,F	; and exit                                                      H:\PIC\CWreadr\CWbinasc.asm
000181   2984     GOTO      0x184          	goto	 conve10	; otherwise ( >=0 )	                                              H:\PIC\CWreadr\CWbinasc.asm
                                           conve02				; increment hundred counter                                           H:\PIC\CWreadr\CWbinasc.asm
000182   0aaa     INCF      0x2a,0x1       	incf	 w_count,F	; and loop                                                      H:\PIC\CWreadr\CWbinasc.asm
000183   297d     GOTO      0x17d          	goto	 conve01	                                                                  H:\PIC\CWreadr\CWbinasc.asm
                                                                                                                            H:\PIC\CWreadr\CWbinasc.asm
                                           conve10                                                                          H:\PIC\CWreadr\CWbinasc.asm
000184   082a     MOVF      0x2a,0x0       	movf	 w_count,W	;                                                               H:\PIC\CWreadr\CWbinasc.asm
000185   3830     IORLW     0x30           	iorlw	 h'30'		; set numeric half digit                                          H:\PIC\CWreadr\CWbinasc.asm
000186   00ab     MOVWF     0x2b           	movwf	 w_num1		; move ascii character to first output byte                      H:\PIC\CWreadr\CWbinasc.asm
000187   300a     MOVLW     0xa            	movlw	 d'10'		; set ten in W                                                    H:\PIC\CWreadr\CWbinasc.asm
000188   01aa     CLRF      0x2a           	clrf	 w_count	; clear digit counter	                                            H:\PIC\CWreadr\CWbinasc.asm
                                           conve11                                                                          H:\PIC\CWreadr\CWbinasc.asm
000189   02af     SUBWF     0x2f,0x1       	subwf	 w_conv,F	; subtract 10 from w_conv                                       H:\PIC\CWreadr\CWbinasc.asm
00018a   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	; if negative                                                   H:\PIC\CWreadr\CWbinasc.asm
00018b   298e     GOTO      0x18e          	goto	 conve12	; restore last total                                              H:\PIC\CWreadr\CWbinasc.asm
00018c   07af     ADDWF     0x2f,0x1       	addwf	 w_conv,F	; and exit                                                      H:\PIC\CWreadr\CWbinasc.asm
00018d   2990     GOTO      0x190          	goto	 conve20	; otherwise	                                                      H:\PIC\CWreadr\CWbinasc.asm
                                           conve12				; increment ten counter                                               H:\PIC\CWreadr\CWbinasc.asm
00018e   0aaa     INCF      0x2a,0x1       	incf	 w_count,F	; and loop                                                      H:\PIC\CWreadr\CWbinasc.asm
00018f   2989     GOTO      0x189          	goto	 conve11	                                                                  H:\PIC\CWreadr\CWbinasc.asm
                                                                                                                            H:\PIC\CWreadr\CWbinasc.asm
                                           conve20	                                                                         H:\PIC\CWreadr\CWbinasc.asm
000190   082a     MOVF      0x2a,0x0       	movf	 w_count,W	;                                                               H:\PIC\CWreadr\CWbinasc.asm
000191   3830     IORLW     0x30           	iorlw	 h'30'		; set numeric half digit                                          H:\PIC\CWreadr\CWbinasc.asm
000192   00ac     MOVWF     0x2c           	movwf	 w_num2		; move ascii character to second output byte                     H:\PIC\CWreadr\CWbinasc.asm
000193   082f     MOVF      0x2f,0x0       	movf	 w_conv,W	;                                                                H:\PIC\CWreadr\CWbinasc.asm
000194   3830     IORLW     0x30           	iorlw	 h'30'		; set unit numeric half digit                                     H:\PIC\CWreadr\CWbinasc.asm
000195   00ad     MOVWF     0x2d           	movwf	 w_num3		; move ascii character to third output byte                      H:\PIC\CWreadr\CWbinasc.asm
                                           endconv                                                                          H:\PIC\CWreadr\CWbinasc.asm
000196   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWbinasc.asm
                                                                                                                            H:\PIC\CWreadr\CWbinasc.asm
                                           	end                                                                             H:\PIC\CWreadr\CWbinasc.asm
                                           ;	Table search routines                                                          H:\PIC\CWreadr\CWtabsrch.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWtabsrch.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                                                                                            H:\PIC\CWreadr\CWtabsrch.asm
                                           		global		ric_a,ric_b,ric_c,ric_d,ric_e,ric_f                                    H:\PIC\CWreadr\CWtabsrch.asm
                                                                                                                            H:\PIC\CWreadr\CWtabsrch.asm
                                           		extern	tab_a,tab_b,tab_c,tab_d,tab_e,tab_f                                     H:\PIC\CWreadr\CWtabsrch.asm
                                           		extern	w_num1,w_count                                                          H:\PIC\CWreadr\CWtabsrch.asm
                                           		extern	w_conv,pldata                                                           H:\PIC\CWreadr\CWtabsrch.asm
                                                                                                                            H:\PIC\CWreadr\CWtabsrch.asm
                                           		code                                                                           H:\PIC\CWreadr\CWtabsrch.asm
                                                                                                                            H:\PIC\CWreadr\CWtabsrch.asm
                                           ;	Tab search subroutines                                                         H:\PIC\CWreadr\CWtabsrch.asm
                                           ;                                                                                H:\PIC\CWreadr\CWtabsrch.asm
                                           ;	input : 	                                                                      H:\PIC\CWreadr\CWtabsrch.asm
                                           ;	- PLDATA area containing received values (0=dit,1=dash)                        H:\PIC\CWreadr\CWtabsrch.asm
                                           ;                                                                                H:\PIC\CWreadr\CWtabsrch.asm
                                           ;	output :                                                                       H:\PIC\CWreadr\CWtabsrch.asm
                                           ;	- decoded character in w_conv                                                  H:\PIC\CWreadr\CWtabsrch.asm
                                           ;	                                                                               H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_a                                                                            H:\PIC\CWreadr\CWtabsrch.asm
000197   0103     CLRW                     	clrw			; initial offset = 0                                                     H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_a1                                                                           H:\PIC\CWreadr\CWtabsrch.asm
000198   00aa     MOVWF     0x2a           	movwf	 w_count	; save current offset                                            H:\PIC\CWreadr\CWtabsrch.asm
000199   2005     CALL      0x5            	call     tab_a          ; search entry at offset W                              H:\PIC\CWreadr\CWtabsrch.asm
00019a   00ab     MOVWF     0x2b           	movwf	 w_num1		; save found map                                                 H:\PIC\CWreadr\CWtabsrch.asm
00019b   30ff     MOVLW     0xff           	movlw	 b'11111111'	; verify if tab bottom reached                               H:\PIC\CWreadr\CWtabsrch.asm
00019c   022b     SUBWF     0x2b,0x0       	subwf	 w_num1,W	;                                                               H:\PIC\CWreadr\CWtabsrch.asm
00019d   1d03     BTFSS     0x3,0x2        	btfss	 STATUS,Z	; if so enforce "*" in w_conv                                   H:\PIC\CWreadr\CWtabsrch.asm
00019e   29a1     GOTO      0x1a1          	goto	 ric_a2		; otherwise verify the map                                        H:\PIC\CWreadr\CWtabsrch.asm
00019f   302a     MOVLW     0x2a           	movlw	 "*"		;                                                                   H:\PIC\CWreadr\CWtabsrch.asm
0001a0   29ab     GOTO      0x1ab          	goto	 ric_a4		;                                                                 H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_a2                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001a1   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	; restore in W the map                                           H:\PIC\CWreadr\CWtabsrch.asm
0001a2   0237     SUBWF     0x37,0x0       	subwf	 pldata,W	; and verify if matches to PLDATA                               H:\PIC\CWreadr\CWtabsrch.asm
0001a3   1903     BTFSC     0x3,0x2        	btfsc	 STATUS,Z	; if not re-cycle                                               H:\PIC\CWreadr\CWtabsrch.asm
0001a4   29a8     GOTO      0x1a8          	goto	 ric_a3                                                                    H:\PIC\CWreadr\CWtabsrch.asm
0001a5   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; restore current offset to W                                   H:\PIC\CWreadr\CWtabsrch.asm
0001a6   3e02     ADDLW     0x2            	addlw	 d'2'		; 2 locations increment                                            H:\PIC\CWreadr\CWtabsrch.asm
0001a7   2998     GOTO      0x198          	goto	 ric_a1		; and re-cycle                                                    H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_a3                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001a8   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; if map matches                                                H:\PIC\CWreadr\CWtabsrch.asm
0001a9   3e01     ADDLW     0x1            	addlw	 d'1'		; 1 location increment                                             H:\PIC\CWreadr\CWtabsrch.asm
0001aa   2005     CALL      0x5            	call	 tab_a		; and get corresponding character                                  H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_a4                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001ab   00af     MOVWF     0x2f           	movwf	 w_conv                                                                   H:\PIC\CWreadr\CWtabsrch.asm
0001ac   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWtabsrch.asm
                                                                                                                            H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_b                                                                            H:\PIC\CWreadr\CWtabsrch.asm
0001ad   0103     CLRW                     	clrw			; initial offset = 0                                                     H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_b1                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001ae   00aa     MOVWF     0x2a           	movwf	 w_count	; save current offset                                            H:\PIC\CWreadr\CWtabsrch.asm
0001af   200c     CALL      0xc            	call     tab_b          ; search entry at offset W                              H:\PIC\CWreadr\CWtabsrch.asm
0001b0   00ab     MOVWF     0x2b           	movwf	 w_num1		; save found map                                                 H:\PIC\CWreadr\CWtabsrch.asm
0001b1   30ff     MOVLW     0xff           	movlw	 b'11111111'	; verify if tab bottom reached                               H:\PIC\CWreadr\CWtabsrch.asm
0001b2   022b     SUBWF     0x2b,0x0       	subwf	 w_num1,W	;                                                               H:\PIC\CWreadr\CWtabsrch.asm
0001b3   1d03     BTFSS     0x3,0x2        	btfss	 STATUS,Z	; if so enforce "*" in w_conv                                   H:\PIC\CWreadr\CWtabsrch.asm
0001b4   29b7     GOTO      0x1b7          	goto	 ric_b2		; otherwise verify the map                                        H:\PIC\CWreadr\CWtabsrch.asm
0001b5   302a     MOVLW     0x2a           	movlw	 "*"		;                                                                   H:\PIC\CWreadr\CWtabsrch.asm
0001b6   29c1     GOTO      0x1c1          	goto	 ric_b4		;                                                                 H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_b2                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001b7   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	; restore in W the map                                           H:\PIC\CWreadr\CWtabsrch.asm
0001b8   0237     SUBWF     0x37,0x0       	subwf	 pldata,W	; and verify if matches to PLDATA                               H:\PIC\CWreadr\CWtabsrch.asm
0001b9   1903     BTFSC     0x3,0x2        	btfsc	 STATUS,Z	; if not re-cycle                                               H:\PIC\CWreadr\CWtabsrch.asm
0001ba   29be     GOTO      0x1be          	goto	 ric_b3                                                                    H:\PIC\CWreadr\CWtabsrch.asm
0001bb   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; restore current offset to W                                   H:\PIC\CWreadr\CWtabsrch.asm
0001bc   3e02     ADDLW     0x2            	addlw	 d'2'		; 2 locations increment                                            H:\PIC\CWreadr\CWtabsrch.asm
0001bd   29ae     GOTO      0x1ae          	goto	 ric_b1		; and re-cycle                                                    H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_b3                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001be   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; if map matches                                                H:\PIC\CWreadr\CWtabsrch.asm
0001bf   3e01     ADDLW     0x1            	addlw	 d'1'		; 1 location increment                                             H:\PIC\CWreadr\CWtabsrch.asm
0001c0   200c     CALL      0xc            	call	 tab_b		; and get corresponding character                                  H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_b4                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001c1   00af     MOVWF     0x2f           	movwf	 w_conv                                                                   H:\PIC\CWreadr\CWtabsrch.asm
0001c2   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWtabsrch.asm
                                                                                                                            H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_c                                                                            H:\PIC\CWreadr\CWtabsrch.asm
0001c3   0103     CLRW                     	clrw			; initial offset = 0                                                     H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_c1                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001c4   00aa     MOVWF     0x2a           	movwf	 w_count	; save current offset                                            H:\PIC\CWreadr\CWtabsrch.asm
0001c5   2017     CALL      0x17           	call     tab_c          ; search entry at offset W                              H:\PIC\CWreadr\CWtabsrch.asm
0001c6   00ab     MOVWF     0x2b           	movwf	 w_num1		; save found map                                                 H:\PIC\CWreadr\CWtabsrch.asm
0001c7   30ff     MOVLW     0xff           	movlw	 b'11111111'	; verify if tab bottom reached                               H:\PIC\CWreadr\CWtabsrch.asm
0001c8   022b     SUBWF     0x2b,0x0       	subwf	 w_num1,W	;                                                               H:\PIC\CWreadr\CWtabsrch.asm
0001c9   1d03     BTFSS     0x3,0x2        	btfss	 STATUS,Z	; if so enforce "*" in w_conv                                   H:\PIC\CWreadr\CWtabsrch.asm
0001ca   29cd     GOTO      0x1cd          	goto	 ric_c2		; otherwise verify the map                                        H:\PIC\CWreadr\CWtabsrch.asm
0001cb   302a     MOVLW     0x2a           	movlw	 "*"		;                                                                   H:\PIC\CWreadr\CWtabsrch.asm
0001cc   29d7     GOTO      0x1d7          	goto	 ric_c4		;                                                                 H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_c2                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001cd   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	; restore in W the map                                           H:\PIC\CWreadr\CWtabsrch.asm
0001ce   0237     SUBWF     0x37,0x0       	subwf	 pldata,W	; and verify if matches to PLDATA                               H:\PIC\CWreadr\CWtabsrch.asm
0001cf   1903     BTFSC     0x3,0x2        	btfsc	 STATUS,Z	; if not re-cycle                                               H:\PIC\CWreadr\CWtabsrch.asm
0001d0   29d4     GOTO      0x1d4          	goto	 ric_c3                                                                    H:\PIC\CWreadr\CWtabsrch.asm
0001d1   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; restore current offset to W                                   H:\PIC\CWreadr\CWtabsrch.asm
0001d2   3e02     ADDLW     0x2            	addlw	 d'2'		; 2 locations increment                                            H:\PIC\CWreadr\CWtabsrch.asm
0001d3   29c4     GOTO      0x1c4          	goto	 ric_c1		; and re-cycle                                                    H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_c3                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001d4   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; if map matches                                                H:\PIC\CWreadr\CWtabsrch.asm
0001d5   3e01     ADDLW     0x1            	addlw	 d'1'		; 1 location increment                                             H:\PIC\CWreadr\CWtabsrch.asm
0001d6   2017     CALL      0x17           	call	 tab_c		; and get corresponding character                                  H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_c4                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001d7   00af     MOVWF     0x2f           	movwf	 w_conv                                                                   H:\PIC\CWreadr\CWtabsrch.asm
0001d8   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWtabsrch.asm
                                                                                                                            H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_d                                                                            H:\PIC\CWreadr\CWtabsrch.asm
0001d9   0103     CLRW                     	clrw			; initial offset = 0                                                     H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_d1                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001da   00aa     MOVWF     0x2a           	movwf	 w_count	; save current offset                                            H:\PIC\CWreadr\CWtabsrch.asm
0001db   202a     CALL      0x2a           	call     tab_d          ; search entry at offset W                              H:\PIC\CWreadr\CWtabsrch.asm
0001dc   00ab     MOVWF     0x2b           	movwf	 w_num1		; save found map                                                 H:\PIC\CWreadr\CWtabsrch.asm
0001dd   30ff     MOVLW     0xff           	movlw	 b'11111111'	; verify if tab bottom reached                               H:\PIC\CWreadr\CWtabsrch.asm
0001de   022b     SUBWF     0x2b,0x0       	subwf	 w_num1,W	;                                                               H:\PIC\CWreadr\CWtabsrch.asm
0001df   1d03     BTFSS     0x3,0x2        	btfss	 STATUS,Z	; if so enforce "*" in w_conv                                   H:\PIC\CWreadr\CWtabsrch.asm
0001e0   29e3     GOTO      0x1e3          	goto	 ric_d2		; otherwise verify the map                                        H:\PIC\CWreadr\CWtabsrch.asm
0001e1   302a     MOVLW     0x2a           	movlw	 "*"		;                                                                   H:\PIC\CWreadr\CWtabsrch.asm
0001e2   29ed     GOTO      0x1ed          	goto	 ric_d4		;                                                                 H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_d2                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001e3   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	; restore in W the map                                           H:\PIC\CWreadr\CWtabsrch.asm
0001e4   0237     SUBWF     0x37,0x0       	subwf	 pldata,W	; and verify if matches to PLDATA                               H:\PIC\CWreadr\CWtabsrch.asm
0001e5   1903     BTFSC     0x3,0x2        	btfsc	 STATUS,Z	; if not re-cycle                                               H:\PIC\CWreadr\CWtabsrch.asm
0001e6   29ea     GOTO      0x1ea          	goto	 ric_d3                                                                    H:\PIC\CWreadr\CWtabsrch.asm
0001e7   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; restore current offset to W                                   H:\PIC\CWreadr\CWtabsrch.asm
0001e8   3e02     ADDLW     0x2            	addlw	 d'2'		; 2 locations increment                                            H:\PIC\CWreadr\CWtabsrch.asm
0001e9   29da     GOTO      0x1da          	goto	 ric_d1		; and re-cycle                                                    H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_d3                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001ea   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; if map matches                                                H:\PIC\CWreadr\CWtabsrch.asm
0001eb   3e01     ADDLW     0x1            	addlw	 d'1'		; 1 location increment                                             H:\PIC\CWreadr\CWtabsrch.asm
0001ec   202a     CALL      0x2a           	call	 tab_d		; and get corresponding character                                  H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_d4                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001ed   00af     MOVWF     0x2f           	movwf	 w_conv                                                                   H:\PIC\CWreadr\CWtabsrch.asm
0001ee   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWtabsrch.asm
                                                                                                                            H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_e                                                                            H:\PIC\CWreadr\CWtabsrch.asm
0001ef   0103     CLRW                     	clrw			; initial offset = 0                                                     H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_e1                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001f0   00aa     MOVWF     0x2a           	movwf	 w_count	; save current offset                                            H:\PIC\CWreadr\CWtabsrch.asm
0001f1   2045     CALL      0x45           	call     tab_e          ; search entry at offset W                              H:\PIC\CWreadr\CWtabsrch.asm
0001f2   00ab     MOVWF     0x2b           	movwf	 w_num1		; save found map                                                 H:\PIC\CWreadr\CWtabsrch.asm
0001f3   30ff     MOVLW     0xff           	movlw	 b'11111111'	; verify if tab bottom reached                               H:\PIC\CWreadr\CWtabsrch.asm
0001f4   022b     SUBWF     0x2b,0x0       	subwf	 w_num1,W	;                                                               H:\PIC\CWreadr\CWtabsrch.asm
0001f5   1d03     BTFSS     0x3,0x2        	btfss	 STATUS,Z	; if so enforce "*" in w_conv                                   H:\PIC\CWreadr\CWtabsrch.asm
0001f6   29f9     GOTO      0x1f9          	goto	 ric_e2		; otherwise verify the map                                        H:\PIC\CWreadr\CWtabsrch.asm
0001f7   302a     MOVLW     0x2a           	movlw	 "*"		;                                                                   H:\PIC\CWreadr\CWtabsrch.asm
0001f8   2a03     GOTO      0x203          	goto	 ric_e4		;                                                                 H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_e2                                                                           H:\PIC\CWreadr\CWtabsrch.asm
0001f9   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	; restore in W the map                                           H:\PIC\CWreadr\CWtabsrch.asm
0001fa   0237     SUBWF     0x37,0x0       	subwf	 pldata,W	; and verify if matches to PLDATA                               H:\PIC\CWreadr\CWtabsrch.asm
0001fb   1903     BTFSC     0x3,0x2        	btfsc	 STATUS,Z	; if not re-cycle                                               H:\PIC\CWreadr\CWtabsrch.asm
0001fc   2a00     GOTO      0x200          	goto	 ric_e3                                                                    H:\PIC\CWreadr\CWtabsrch.asm
0001fd   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; restore current offset to W                                   H:\PIC\CWreadr\CWtabsrch.asm
0001fe   3e02     ADDLW     0x2            	addlw	 d'2'		; 2 locations increment                                            H:\PIC\CWreadr\CWtabsrch.asm
0001ff   29f0     GOTO      0x1f0          	goto	 ric_e1		; and re-cycle                                                    H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_e3                                                                           H:\PIC\CWreadr\CWtabsrch.asm
000200   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; if map matches                                                H:\PIC\CWreadr\CWtabsrch.asm
000201   3e01     ADDLW     0x1            	addlw	 d'1'		; 1 location increment                                             H:\PIC\CWreadr\CWtabsrch.asm
000202   2045     CALL      0x45           	call	 tab_e		; and get corresponding character                                  H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_e4                                                                           H:\PIC\CWreadr\CWtabsrch.asm
000203   00af     MOVWF     0x2f           	movwf	 w_conv                                                                   H:\PIC\CWreadr\CWtabsrch.asm
000204   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWtabsrch.asm
                                                                                                                            H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_f                                                                            H:\PIC\CWreadr\CWtabsrch.asm
000205   0103     CLRW                     	clrw			; initial offset = 0                                                     H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_f1                                                                           H:\PIC\CWreadr\CWtabsrch.asm
000206   00aa     MOVWF     0x2a           	movwf	 w_count	; save current offset                                            H:\PIC\CWreadr\CWtabsrch.asm
000207   2064     CALL      0x64           	call     tab_f          ; search entry at offset W                              H:\PIC\CWreadr\CWtabsrch.asm
000208   00ab     MOVWF     0x2b           	movwf	 w_num1		; save found map                                                 H:\PIC\CWreadr\CWtabsrch.asm
000209   30ff     MOVLW     0xff           	movlw	 b'11111111'	; verify if tab bottom reached                               H:\PIC\CWreadr\CWtabsrch.asm
00020a   022b     SUBWF     0x2b,0x0       	subwf	 w_num1,W	;                                                               H:\PIC\CWreadr\CWtabsrch.asm
00020b   1d03     BTFSS     0x3,0x2        	btfss	 STATUS,Z	; if so enforce "*" in w_conv                                   H:\PIC\CWreadr\CWtabsrch.asm
00020c   2a0f     GOTO      0x20f          	goto	 ric_f2		; otherwise verify the map                                        H:\PIC\CWreadr\CWtabsrch.asm
00020d   302a     MOVLW     0x2a           	movlw	 "*"		;                                                                   H:\PIC\CWreadr\CWtabsrch.asm
00020e   2a19     GOTO      0x219          	goto	 ric_f4		;                                                                 H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_f2                                                                           H:\PIC\CWreadr\CWtabsrch.asm
00020f   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	; restore in W the map                                           H:\PIC\CWreadr\CWtabsrch.asm
000210   0237     SUBWF     0x37,0x0       	subwf	 pldata,W	; and verify if matches to PLDATA                               H:\PIC\CWreadr\CWtabsrch.asm
000211   1903     BTFSC     0x3,0x2        	btfsc	 STATUS,Z	; if not re-cycle                                               H:\PIC\CWreadr\CWtabsrch.asm
000212   2a16     GOTO      0x216          	goto	 ric_f3                                                                    H:\PIC\CWreadr\CWtabsrch.asm
000213   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; restore current offset to W                                   H:\PIC\CWreadr\CWtabsrch.asm
000214   3e02     ADDLW     0x2            	addlw	 d'2'		; 2 locations increment                                            H:\PIC\CWreadr\CWtabsrch.asm
000215   2a06     GOTO      0x206          	goto	 ric_f1		; and re-cycle                                                    H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_f3                                                                           H:\PIC\CWreadr\CWtabsrch.asm
000216   082a     MOVF      0x2a,0x0       	movf	 w_count,W	; if map matches                                                H:\PIC\CWreadr\CWtabsrch.asm
000217   3e01     ADDLW     0x1            	addlw	 d'1'		; 1 location increment                                             H:\PIC\CWreadr\CWtabsrch.asm
000218   2064     CALL      0x64           	call	 tab_f		; and get corresponding character                                  H:\PIC\CWreadr\CWtabsrch.asm
                                           ric_f4                                                                           H:\PIC\CWreadr\CWtabsrch.asm
000219   00af     MOVWF     0x2f           	movwf	 w_conv                                                                   H:\PIC\CWreadr\CWtabsrch.asm
00021a   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWtabsrch.asm
                                           		                                                                               H:\PIC\CWreadr\CWtabsrch.asm
                                           		end                                                                            H:\PIC\CWreadr\CWtabsrch.asm
                                           ;	Sort routines                                                                  H:\PIC\CWreadr\CWsort.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWsort.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                                                                                            H:\PIC\CWreadr\CWsort.asm
                                           		global		ord_of,ord_on                                                          H:\PIC\CWreadr\CWsort.asm
                                           		global		tmin1_on,tmin1_of,tmin2_on,tmin2_of,tmin3_on,tmin3_of                  H:\PIC\CWreadr\CWsort.asm
                                           		extern		w_num1,w_num2,w_num3,w_num4,w_count                                    H:\PIC\CWreadr\CWsort.asm
                                                                                                                            H:\PIC\CWreadr\CWsort.asm
                                           		udata                                                                          H:\PIC\CWreadr\CWsort.asm
                                           tmin1_on res 1 ;     0x16		;ON signal lowest duration                            H:\PIC\CWreadr\CWsort.asm
                                           tmin2_on res 1 ;     0x17                                                        H:\PIC\CWreadr\CWsort.asm
                                           tmin3_on res 1 ;     0x18                                                        H:\PIC\CWreadr\CWsort.asm
                                           tmin1_of res 1 ;	 0x19		;OFF signal lowest duration                              H:\PIC\CWreadr\CWsort.asm
                                           tmin2_of res 1 ;	 0x1a                                                           H:\PIC\CWreadr\CWsort.asm
                                           tmin3_of res 1 ;	 0x1b                                                           H:\PIC\CWreadr\CWsort.asm
                                                                                                                            H:\PIC\CWreadr\CWsort.asm
                                           		code                                                                           H:\PIC\CWreadr\CWsort.asm
                                                                                                                            H:\PIC\CWreadr\CWsort.asm
                                           ;	Ascending sort routine for                                                     H:\PIC\CWreadr\CWsort.asm
                                           ;	tmin1_on, tmin2_on, tmin3_on                                                   H:\PIC\CWreadr\CWsort.asm
                                           ord_on                                                                           H:\PIC\CWreadr\CWsort.asm
00021b   0831     MOVF      0x31,0x0       	movf	 tmin2_on,W	;                                                              H:\PIC\CWreadr\CWsort.asm
00021c   0232     SUBWF     0x32,0x0       	subwf	 tmin3_on,W	; calculate tmin3_on - tmin2_on                               H:\PIC\CWreadr\CWsort.asm
00021d   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWsort.asm
00021e   2a25     GOTO      0x225          	goto	 ord_on1	; if result > 0 go on                                             H:\PIC\CWreadr\CWsort.asm
00021f   0831     MOVF      0x31,0x0       	movf	 tmin2_on,W	; otherwise swaps tmin2_on and tmin3_on                        H:\PIC\CWreadr\CWsort.asm
000220   00ab     MOVWF     0x2b           	movwf	 w_num1		;                                                                H:\PIC\CWreadr\CWsort.asm
000221   0832     MOVF      0x32,0x0       	movf	 tmin3_on,W	;                                                              H:\PIC\CWreadr\CWsort.asm
000222   00b1     MOVWF     0x31           	movwf	 tmin2_on	;                                                               H:\PIC\CWreadr\CWsort.asm
000223   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	;                                                                H:\PIC\CWreadr\CWsort.asm
000224   00b2     MOVWF     0x32           	movwf	 tmin3_on	;                                                               H:\PIC\CWreadr\CWsort.asm
                                           ord_on1                                                                          H:\PIC\CWreadr\CWsort.asm
000225   0830     MOVF      0x30,0x0       	movf	 tmin1_on,W	;                                                              H:\PIC\CWreadr\CWsort.asm
000226   0231     SUBWF     0x31,0x0       	subwf	 tmin2_on,W	; calculat tmin2_on - tmin1_on                                H:\PIC\CWreadr\CWsort.asm
000227   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWsort.asm
000228   2a39     GOTO      0x239          	goto	 en_ordn	; if result > 0 go to end sort                                    H:\PIC\CWreadr\CWsort.asm
000229   0830     MOVF      0x30,0x0       	movf	 tmin1_on,W	; otherwise swaps tmin1_on and tmin2_on                        H:\PIC\CWreadr\CWsort.asm
00022a   00ab     MOVWF     0x2b           	movwf	 w_num1		;                                                                H:\PIC\CWreadr\CWsort.asm
00022b   0831     MOVF      0x31,0x0       	movf	 tmin2_on,W	;                                                              H:\PIC\CWreadr\CWsort.asm
00022c   00b0     MOVWF     0x30           	movwf	 tmin1_on	;                                                               H:\PIC\CWreadr\CWsort.asm
00022d   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	;                                                                H:\PIC\CWreadr\CWsort.asm
00022e   00b1     MOVWF     0x31           	movwf	 tmin2_on	;                                                               H:\PIC\CWreadr\CWsort.asm
                                           ord_on2                                                                          H:\PIC\CWreadr\CWsort.asm
00022f   0831     MOVF      0x31,0x0       	movf	 tmin2_on,W	;                                                              H:\PIC\CWreadr\CWsort.asm
000230   0232     SUBWF     0x32,0x0       	subwf	 tmin3_on,W	; calculate tmin3_on - tmin2_on                               H:\PIC\CWreadr\CWsort.asm
000231   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWsort.asm
000232   2a39     GOTO      0x239          	goto	 en_ordn	; if result > 0 go to end sort                                    H:\PIC\CWreadr\CWsort.asm
000233   0831     MOVF      0x31,0x0       	movf	 tmin2_on,W	; otherwise swaps tmin2_on and tmin3_on                        H:\PIC\CWreadr\CWsort.asm
000234   00ab     MOVWF     0x2b           	movwf	 w_num1		;                                                                H:\PIC\CWreadr\CWsort.asm
000235   0832     MOVF      0x32,0x0       	movf	 tmin3_on,W	;                                                              H:\PIC\CWreadr\CWsort.asm
000236   00b1     MOVWF     0x31           	movwf	 tmin2_on	;                                                               H:\PIC\CWreadr\CWsort.asm
000237   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	;                                                                H:\PIC\CWreadr\CWsort.asm
000238   00b2     MOVWF     0x32           	movwf	 tmin3_on	;                                                               H:\PIC\CWreadr\CWsort.asm
                                           en_ordn                                                                          H:\PIC\CWreadr\CWsort.asm
000239   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWsort.asm
                                                                                                                            H:\PIC\CWreadr\CWsort.asm
                                           ;	Ascending sort routine for                                                     H:\PIC\CWreadr\CWsort.asm
                                           ;	tmin1_of, tmin2_of, tmin3_of                                                   H:\PIC\CWreadr\CWsort.asm
                                           ord_of                                                                           H:\PIC\CWreadr\CWsort.asm
00023a   0834     MOVF      0x34,0x0       	movf	 tmin2_of,W	;                                                              H:\PIC\CWreadr\CWsort.asm
00023b   0235     SUBWF     0x35,0x0       	subwf	 tmin3_of,W	; calculate tmin3_of - tmin2_of                               H:\PIC\CWreadr\CWsort.asm
00023c   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWsort.asm
00023d   2a44     GOTO      0x244          	goto	 ord_of1	; if result > 0 go on                                             H:\PIC\CWreadr\CWsort.asm
00023e   0834     MOVF      0x34,0x0       	movf	 tmin2_of,W	; otherwise swaps tmin2_of and tmin3_of                        H:\PIC\CWreadr\CWsort.asm
00023f   00ab     MOVWF     0x2b           	movwf	 w_num1		;                                                                H:\PIC\CWreadr\CWsort.asm
000240   0835     MOVF      0x35,0x0       	movf	 tmin3_of,W	;                                                              H:\PIC\CWreadr\CWsort.asm
000241   00b4     MOVWF     0x34           	movwf	 tmin2_of	;                                                               H:\PIC\CWreadr\CWsort.asm
000242   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	;                                                                H:\PIC\CWreadr\CWsort.asm
000243   00b5     MOVWF     0x35           	movwf	 tmin3_of	;                                                               H:\PIC\CWreadr\CWsort.asm
                                           ord_of1                                                                          H:\PIC\CWreadr\CWsort.asm
000244   0833     MOVF      0x33,0x0       	movf	 tmin1_of,W	;                                                              H:\PIC\CWreadr\CWsort.asm
000245   0234     SUBWF     0x34,0x0       	subwf	 tmin2_of,W	; calculate tmin2_of - tmin1_of                               H:\PIC\CWreadr\CWsort.asm
000246   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWsort.asm
000247   2a58     GOTO      0x258          	goto	 en_ordf	; if result > 0 go to end sort                                    H:\PIC\CWreadr\CWsort.asm
000248   0833     MOVF      0x33,0x0       	movf	 tmin1_of,W	; otherwise swaps tmin1_of and tmin2_of                        H:\PIC\CWreadr\CWsort.asm
000249   00ab     MOVWF     0x2b           	movwf	 w_num1		;                                                                H:\PIC\CWreadr\CWsort.asm
00024a   0834     MOVF      0x34,0x0       	movf	 tmin2_of,W	;                                                              H:\PIC\CWreadr\CWsort.asm
00024b   00b3     MOVWF     0x33           	movwf	 tmin1_of	;                                                               H:\PIC\CWreadr\CWsort.asm
00024c   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	;                                                                H:\PIC\CWreadr\CWsort.asm
00024d   00b4     MOVWF     0x34           	movwf	 tmin2_of	;                                                               H:\PIC\CWreadr\CWsort.asm
                                           ord_of2                                                                          H:\PIC\CWreadr\CWsort.asm
00024e   0834     MOVF      0x34,0x0       	movf	 tmin2_of,W	;                                                              H:\PIC\CWreadr\CWsort.asm
00024f   0235     SUBWF     0x35,0x0       	subwf	 tmin3_of,W	; calculate tmin3_of - tmin2_of                               H:\PIC\CWreadr\CWsort.asm
000250   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWsort.asm
000251   2a58     GOTO      0x258          	goto	 en_ordf	; if result > 0 go to end sort                                    H:\PIC\CWreadr\CWsort.asm
000252   0834     MOVF      0x34,0x0       	movf	 tmin2_of,W	; otherwise swaps tmin2_on and tmin3_on                        H:\PIC\CWreadr\CWsort.asm
000253   00ab     MOVWF     0x2b           	movwf	 w_num1		;                                                                H:\PIC\CWreadr\CWsort.asm
000254   0835     MOVF      0x35,0x0       	movf	 tmin3_of,W	;                                                              H:\PIC\CWreadr\CWsort.asm
000255   00b4     MOVWF     0x34           	movwf	 tmin2_of	;                                                               H:\PIC\CWreadr\CWsort.asm
000256   082b     MOVF      0x2b,0x0       	movf	 w_num1,W	;                                                                H:\PIC\CWreadr\CWsort.asm
000257   00b5     MOVWF     0x35           	movwf	 tmin3_of	;                                                               H:\PIC\CWreadr\CWsort.asm
                                           en_ordf                                                                          H:\PIC\CWreadr\CWsort.asm
000258   0008     RETURN                   	return	                                                                         H:\PIC\CWreadr\CWsort.asm
                                                                                                                            H:\PIC\CWreadr\CWsort.asm
                                                                                                                            H:\PIC\CWreadr\CWsort.asm
                                                                                                                            H:\PIC\CWreadr\CWsort.asm
                                           		end                                                                            H:\PIC\CWreadr\CWsort.asm
                                           ;	Welcome message                                                                H:\PIC\CWreadr\CWwelcome.asm
                                                                                                                            H:\PIC\CWreadr\CWwelcome.asm
                                           		global	panel                                                                   H:\PIC\CWreadr\CWwelcome.asm
                                           		extern	sendlcd                                                                 H:\PIC\CWreadr\CWwelcome.asm
                                           		extern		w_num1,w_num2,w_num3,w_num4,w_count                                    H:\PIC\CWreadr\CWwelcome.asm
                                                                                                                            H:\PIC\CWreadr\CWwelcome.asm
                                           		code                                                                           H:\PIC\CWreadr\CWwelcome.asm
                                                                                                                            H:\PIC\CWreadr\CWwelcome.asm
                                           ;	Initial text display routine                                                   H:\PIC\CWreadr\CWwelcome.asm
                                           ;                                                                                H:\PIC\CWreadr\CWwelcome.asm
                                           panel                                                                            H:\PIC\CWreadr\CWwelcome.asm
000259   3020     MOVLW     0x20           	movlw	 " "		; display " CW "                                                    H:\PIC\CWreadr\CWwelcome.asm
00025a   00ab     MOVWF     0x2b           	movwf	 w_num1                                                                   H:\PIC\CWreadr\CWwelcome.asm
00025b   3043     MOVLW     0x43           	movlw	 "C"                                                                      H:\PIC\CWreadr\CWwelcome.asm
00025c   00ac     MOVWF     0x2c           	movwf	 w_num2                                                                   H:\PIC\CWreadr\CWwelcome.asm
00025d   3057     MOVLW     0x57           	movlw	 "W"                                                                      H:\PIC\CWreadr\CWwelcome.asm
00025e   00ad     MOVWF     0x2d           	movwf	 w_num3                                                                   H:\PIC\CWreadr\CWwelcome.asm
00025f   3020     MOVLW     0x20           	movlw	 " "                                                                      H:\PIC\CWreadr\CWwelcome.asm
000260   00ae     MOVWF     0x2e           	movwf	 w_num4                                                                   H:\PIC\CWreadr\CWwelcome.asm
000261   3004     MOVLW     0x4            	movlw	 d'4'                                                                     H:\PIC\CWreadr\CWwelcome.asm
000262   00aa     MOVWF     0x2a           	movwf	 w_count                                                                  H:\PIC\CWreadr\CWwelcome.asm
000263   2138     CALL      0x138          	call	 sendlcd                                                                   H:\PIC\CWreadr\CWwelcome.asm
000264   3044     MOVLW     0x44           	movlw	 "D"		; display "Deco"                                                    H:\PIC\CWreadr\CWwelcome.asm
000265   00ab     MOVWF     0x2b           	movwf	 w_num1                                                                   H:\PIC\CWreadr\CWwelcome.asm
000266   3065     MOVLW     0x65           	movlw	 "e"                                                                      H:\PIC\CWreadr\CWwelcome.asm
000267   00ac     MOVWF     0x2c           	movwf	 w_num2                                                                   H:\PIC\CWreadr\CWwelcome.asm
000268   3063     MOVLW     0x63           	movlw	 "c"                                                                      H:\PIC\CWreadr\CWwelcome.asm
000269   00ad     MOVWF     0x2d           	movwf	 w_num3                                                                   H:\PIC\CWreadr\CWwelcome.asm
00026a   306f     MOVLW     0x6f           	movlw	 "o"                                                                      H:\PIC\CWreadr\CWwelcome.asm
00026b   00ae     MOVWF     0x2e           	movwf	 w_num4                                                                   H:\PIC\CWreadr\CWwelcome.asm
00026c   3004     MOVLW     0x4            	movlw	 d'4'                                                                     H:\PIC\CWreadr\CWwelcome.asm
00026d   00aa     MOVWF     0x2a           	movwf	 w_count                                                                  H:\PIC\CWreadr\CWwelcome.asm
00026e   2138     CALL      0x138          	call	 sendlcd                                                                   H:\PIC\CWreadr\CWwelcome.asm
00026f   3064     MOVLW     0x64           	movlw	 "d"		; display "der "                                                    H:\PIC\CWreadr\CWwelcome.asm
000270   00ab     MOVWF     0x2b           	movwf	 w_num1                                                                   H:\PIC\CWreadr\CWwelcome.asm
000271   3065     MOVLW     0x65           	movlw	 "e"                                                                      H:\PIC\CWreadr\CWwelcome.asm
000272   00ac     MOVWF     0x2c           	movwf	 w_num2                                                                   H:\PIC\CWreadr\CWwelcome.asm
000273   3072     MOVLW     0x72           	movlw	 "r"                                                                      H:\PIC\CWreadr\CWwelcome.asm
000274   00ad     MOVWF     0x2d           	movwf	 w_num3                                                                   H:\PIC\CWreadr\CWwelcome.asm
000275   3020     MOVLW     0x20           	movlw	 " "                                                                      H:\PIC\CWreadr\CWwelcome.asm
000276   00ae     MOVWF     0x2e           	movwf	 w_num4                                                                   H:\PIC\CWreadr\CWwelcome.asm
000277   3004     MOVLW     0x4            	movlw	 d'4'                                                                     H:\PIC\CWreadr\CWwelcome.asm
000278   00aa     MOVWF     0x2a           	movwf	 w_count                                                                  H:\PIC\CWreadr\CWwelcome.asm
000279   2138     CALL      0x138          	call	 sendlcd                                                                   H:\PIC\CWreadr\CWwelcome.asm
00027a   3020     MOVLW     0x20           	movlw	 " "		; display "  -> "                                                   H:\PIC\CWreadr\CWwelcome.asm
00027b   00ab     MOVWF     0x2b           	movwf	 w_num1                                                                   H:\PIC\CWreadr\CWwelcome.asm
00027c   3020     MOVLW     0x20           	movlw	 " "                                                                      H:\PIC\CWreadr\CWwelcome.asm
00027d   00ac     MOVWF     0x2c           	movwf	 w_num2                                                                   H:\PIC\CWreadr\CWwelcome.asm
00027e   307e     MOVLW     0x7e           	movlw	 0x7e                                                                     H:\PIC\CWreadr\CWwelcome.asm
00027f   00ad     MOVWF     0x2d           	movwf	 w_num3                                                                   H:\PIC\CWreadr\CWwelcome.asm
000280   3020     MOVLW     0x20           	movlw	 " "                                                                      H:\PIC\CWreadr\CWwelcome.asm
000281   00ae     MOVWF     0x2e           	movwf	 w_num4                                                                   H:\PIC\CWreadr\CWwelcome.asm
000282   3004     MOVLW     0x4            	movlw	 d'4'                                                                     H:\PIC\CWreadr\CWwelcome.asm
000283   00aa     MOVWF     0x2a           	movwf	 w_count                                                                  H:\PIC\CWreadr\CWwelcome.asm
000284   2138     CALL      0x138          	call	 sendlcd                                                                   H:\PIC\CWreadr\CWwelcome.asm
                                           endpanl                                                                          H:\PIC\CWreadr\CWwelcome.asm
000285   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWwelcome.asm
                                                                                                                            H:\PIC\CWreadr\CWwelcome.asm
                                           		end                                                                            H:\PIC\CWreadr\CWwelcome.asm
                                           ;	Display CW speed                                                               H:\PIC\CWreadr\CWshospd.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWshospd.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           		include		CWdefs.inc                                                            H:\PIC\CWreadr\CWshospd.asm
                                           ;	Constants used by multiple routines                                            H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ;       program constants definitions                                            H:\PIC\CWreadr\CWdefs.inc
                                           swon	equ	 0x00                                                                   H:\PIC\CWreadr\CWdefs.inc
                                           swoff	equ	 0x01	                                                                 H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ; 	program settable parameters                                                   H:\PIC\CWreadr\CWdefs.inc
                                           chrparm equ	 0x08		; chars number for speed calculation                          H:\PIC\CWreadr\CWdefs.inc
                                           rowparm equ	 0x28		; chars number on the LCD raw                                 H:\PIC\CWreadr\CWdefs.inc
                                           sgparm  equ	 0x0f		; dit/dashes number for param. refresh	                       H:\PIC\CWreadr\CWdefs.inc
                                            	                                                                               H:\PIC\CWreadr\CWdefs.inc
                                           ; port_a bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_P0	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_P1	equ	2                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_CW	equ	4                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           ; port_b bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_EN	equ	3                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_RS	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWshospd.asm
                                           		global		displ                                                                  H:\PIC\CWreadr\CWshospd.asm
                                           		extern		wrtlcd,sendlcd,convert                                                 H:\PIC\CWreadr\CWshospd.asm
                                           		extern		bytelcd                                                                H:\PIC\CWreadr\CWshospd.asm
                                           		extern		w_num1,w_num2,w_num3,w_num4,w_count                                    H:\PIC\CWreadr\CWshospd.asm
                                           		extern		speed                                                                  H:\PIC\CWreadr\CWshospd.asm
                                                                                                                            H:\PIC\CWreadr\CWshospd.asm
                                           		code                                                                           H:\PIC\CWreadr\CWshospd.asm
                                           ;	Speed rate display routine                                                     H:\PIC\CWreadr\CWshospd.asm
                                           ;                                                                                H:\PIC\CWreadr\CWshospd.asm
                                           ;	input : 	- speed in chars / minute                                             H:\PIC\CWreadr\CWshospd.asm
                                           ;                                                                                H:\PIC\CWreadr\CWshospd.asm
                                           ;	output :	- display on LCD module                                               H:\PIC\CWreadr\CWshospd.asm
                                           ;	                                                                               H:\PIC\CWreadr\CWshospd.asm
                                           displ                                                                            H:\PIC\CWreadr\CWshospd.asm
000286   3020     MOVLW     0x20           	movlw	 " "		                                                                    H:\PIC\CWreadr\CWshospd.asm
000287   00a9     MOVWF     0x29           	movwf	 bytelcd                                                                  H:\PIC\CWreadr\CWshospd.asm
000288   300e     MOVLW     0xe            	movlw	 0x0e		; string length for display                                        H:\PIC\CWreadr\CWshospd.asm
000289   3c28     SUBLW     0x28           	sublw	 rowparm	; NN - string length                                             H:\PIC\CWreadr\CWshospd.asm
00028a   00aa     MOVWF     0x2a           	movwf	 w_count	; set heading filler to spaces                                   H:\PIC\CWreadr\CWshospd.asm
                                           displ0                                                                           H:\PIC\CWreadr\CWshospd.asm
00028b   214e     CALL      0x14e          	call	 wrtlcd                                                                    H:\PIC\CWreadr\CWshospd.asm
00028c   0baa     DECFSZ    0x2a,0x1       	decfsz	 w_count,F                                                               H:\PIC\CWreadr\CWshospd.asm
00028d   2a8b     GOTO      0x28b          	goto	 displ0                                                                    H:\PIC\CWreadr\CWshospd.asm
00028e   0839     MOVF      0x39,0x0       	movf	 speed,W	; display "nnn"                                                   H:\PIC\CWreadr\CWshospd.asm
00028f   00ae     MOVWF     0x2e           	movwf	 w_num4                                                                   H:\PIC\CWreadr\CWshospd.asm
000290   2179     CALL      0x179          	call	 convert                                                                   H:\PIC\CWreadr\CWshospd.asm
000291   082b     MOVF      0x2b,0x0       	movf	 w_num1,W                                                                  H:\PIC\CWreadr\CWshospd.asm
000292   390f     ANDLW     0xf            	andlw	 h'0f'                                                                    H:\PIC\CWreadr\CWshospd.asm
000293   1d03     BTFSS     0x3,0x2        	btfss	 STATUS,Z	; if first digit zero set " "                                   H:\PIC\CWreadr\CWshospd.asm
000294   2a97     GOTO      0x297          	goto	 displ1	                                                                   H:\PIC\CWreadr\CWshospd.asm
000295   3020     MOVLW     0x20           	movlw	 " "                                                                      H:\PIC\CWreadr\CWshospd.asm
000296   00ab     MOVWF     0x2b           	movwf	 w_num1                                                                   H:\PIC\CWreadr\CWshospd.asm
                                           displ1                                                                           H:\PIC\CWreadr\CWshospd.asm
000297   3003     MOVLW     0x3            	movlw	 d'3'                                                                     H:\PIC\CWreadr\CWshospd.asm
000298   00aa     MOVWF     0x2a           	movwf	 w_count                                                                  H:\PIC\CWreadr\CWshospd.asm
000299   2138     CALL      0x138          	call	 sendlcd                                                                   H:\PIC\CWreadr\CWshospd.asm
                                                                                                                            H:\PIC\CWreadr\CWshospd.asm
00029a   3020     MOVLW     0x20           	movlw	 " "		; display " cha"                                                    H:\PIC\CWreadr\CWshospd.asm
00029b   00ab     MOVWF     0x2b           	movwf	 w_num1                                                                   H:\PIC\CWreadr\CWshospd.asm
00029c   3063     MOVLW     0x63           	movlw	 "c"                                                                      H:\PIC\CWreadr\CWshospd.asm
00029d   00ac     MOVWF     0x2c           	movwf	 w_num2                                                                   H:\PIC\CWreadr\CWshospd.asm
00029e   3068     MOVLW     0x68           	movlw	 "h"                                                                      H:\PIC\CWreadr\CWshospd.asm
00029f   00ad     MOVWF     0x2d           	movwf	 w_num3                                                                   H:\PIC\CWreadr\CWshospd.asm
0002a0   3061     MOVLW     0x61           	movlw	 "a"                                                                      H:\PIC\CWreadr\CWshospd.asm
0002a1   00ae     MOVWF     0x2e           	movwf	 w_num4                                                                   H:\PIC\CWreadr\CWshospd.asm
0002a2   3004     MOVLW     0x4            	movlw	 d'4'                                                                     H:\PIC\CWreadr\CWshospd.asm
0002a3   00aa     MOVWF     0x2a           	movwf	 w_count                                                                  H:\PIC\CWreadr\CWshospd.asm
0002a4   2138     CALL      0x138          	call	 sendlcd                                                                   H:\PIC\CWreadr\CWshospd.asm
                                           	                                                                                H:\PIC\CWreadr\CWshospd.asm
0002a5   3072     MOVLW     0x72           	movlw	 "r"		; display "r/mi"                                                    H:\PIC\CWreadr\CWshospd.asm
0002a6   00ab     MOVWF     0x2b           	movwf	 w_num1                                                                   H:\PIC\CWreadr\CWshospd.asm
0002a7   302f     MOVLW     0x2f           	movlw	 "/"                                                                      H:\PIC\CWreadr\CWshospd.asm
0002a8   00ac     MOVWF     0x2c           	movwf	 w_num2                                                                   H:\PIC\CWreadr\CWshospd.asm
0002a9   306d     MOVLW     0x6d           	movlw	 "m"                                                                      H:\PIC\CWreadr\CWshospd.asm
0002aa   00ad     MOVWF     0x2d           	movwf	 w_num3                                                                   H:\PIC\CWreadr\CWshospd.asm
0002ab   3069     MOVLW     0x69           	movlw	 "i"                                                                      H:\PIC\CWreadr\CWshospd.asm
0002ac   00ae     MOVWF     0x2e           	movwf	 w_num4                                                                   H:\PIC\CWreadr\CWshospd.asm
0002ad   3004     MOVLW     0x4            	movlw	 d'4'                                                                     H:\PIC\CWreadr\CWshospd.asm
0002ae   00aa     MOVWF     0x2a           	movwf	 w_count                                                                  H:\PIC\CWreadr\CWshospd.asm
0002af   2138     CALL      0x138          	call	 sendlcd                                                                   H:\PIC\CWreadr\CWshospd.asm
                                                                                                                            H:\PIC\CWreadr\CWshospd.asm
0002b0   306e     MOVLW     0x6e           	movlw	 "n"		; display "n  "                                                     H:\PIC\CWreadr\CWshospd.asm
0002b1   00ab     MOVWF     0x2b           	movwf	 w_num1                                                                   H:\PIC\CWreadr\CWshospd.asm
0002b2   3020     MOVLW     0x20           	movlw	 " "                                                                      H:\PIC\CWreadr\CWshospd.asm
0002b3   00ac     MOVWF     0x2c           	movwf	 w_num2                                                                   H:\PIC\CWreadr\CWshospd.asm
0002b4   3020     MOVLW     0x20           	movlw	 " "                                                                      H:\PIC\CWreadr\CWshospd.asm
0002b5   00ad     MOVWF     0x2d           	movwf	 w_num3                                                                   H:\PIC\CWreadr\CWshospd.asm
0002b6   3003     MOVLW     0x3            	movlw	 d'3'                                                                     H:\PIC\CWreadr\CWshospd.asm
0002b7   00aa     MOVWF     0x2a           	movwf	 w_count                                                                  H:\PIC\CWreadr\CWshospd.asm
0002b8   2138     CALL      0x138          	call	 sendlcd                                                                   H:\PIC\CWreadr\CWshospd.asm
0002b9   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWshospd.asm
                                                                                                                            H:\PIC\CWreadr\CWshospd.asm
                                           		end                                                                            H:\PIC\CWreadr\CWshospd.asm
                                           ;	CW rate calculation                                                            H:\PIC\CWreadr\CWrate.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWrate.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           		include		CWdefs.inc                                                            H:\PIC\CWreadr\CWrate.asm
                                           ;	Constants used by multiple routines                                            H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ;       program constants definitions                                            H:\PIC\CWreadr\CWdefs.inc
                                           swon	equ	 0x00                                                                   H:\PIC\CWreadr\CWdefs.inc
                                           swoff	equ	 0x01	                                                                 H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ; 	program settable parameters                                                   H:\PIC\CWreadr\CWdefs.inc
                                           chrparm equ	 0x08		; chars number for speed calculation                          H:\PIC\CWreadr\CWdefs.inc
                                           rowparm equ	 0x28		; chars number on the LCD raw                                 H:\PIC\CWreadr\CWdefs.inc
                                           sgparm  equ	 0x0f		; dit/dashes number for param. refresh	                       H:\PIC\CWreadr\CWdefs.inc
                                            	                                                                               H:\PIC\CWreadr\CWdefs.inc
                                           ; port_a bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_P0	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_P1	equ	2                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_CW	equ	4                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           ; port_b bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_EN	equ	3                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_RS	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWrate.asm
                                           		global		cw_rate,agspeed                                                        H:\PIC\CWreadr\CWrate.asm
                                           		global		cntchar                                                                H:\PIC\CWreadr\CWrate.asm
                                           		extern		moltip,dividi                                                          H:\PIC\CWreadr\CWrate.asm
                                           		extern		w_num1,w_num2,w_num3,timchr1,timchr2,speed                             H:\PIC\CWreadr\CWrate.asm
                                           		extern		plval                                                                  H:\PIC\CWreadr\CWrate.asm
                                                                                                                            H:\PIC\CWreadr\CWrate.asm
                                           		udata                                                                          H:\PIC\CWreadr\CWrate.asm
                                           cntchar res 		1 				; received characters counter                                H:\PIC\CWreadr\CWrate.asm
                                           		code                                                                           H:\PIC\CWreadr\CWrate.asm
                                                                                                                            H:\PIC\CWreadr\CWrate.asm
                                           ;	Speed rate calculation routine                                                 H:\PIC\CWreadr\CWrate.asm
                                           ;	                                                                               H:\PIC\CWreadr\CWrate.asm
                                           ;	is applied the formula V = (600 x chrparm)/ timchr1                            H:\PIC\CWreadr\CWrate.asm
                                           ;	where chrparm is the provided number of characters                             H:\PIC\CWreadr\CWrate.asm
                                           ;	timchr1 is the chars packet duration in sec/10	                                H:\PIC\CWreadr\CWrate.asm
                                           ;                                                                                H:\PIC\CWreadr\CWrate.asm
                                           cw_rate                                                                          H:\PIC\CWreadr\CWrate.asm
0002ba   300a     MOVLW     0xa            	movlw	 d'10'                                                                    H:\PIC\CWreadr\CWrate.asm
0002bb   00ac     MOVWF     0x2c           	movwf	 w_num2                                                                   H:\PIC\CWreadr\CWrate.asm
0002bc   3008     MOVLW     0x8            	movlw	 chrparm                                                                  H:\PIC\CWreadr\CWrate.asm
0002bd   00ad     MOVWF     0x2d           	movwf	 w_num3		; compute chrparm x 10                                           H:\PIC\CWreadr\CWrate.asm
0002be   215b     CALL      0x15b          	call	 moltip                                                                    H:\PIC\CWreadr\CWrate.asm
0002bf   303c     MOVLW     0x3c           	movlw	 d'60'                                                                    H:\PIC\CWreadr\CWrate.asm
0002c0   00ad     MOVWF     0x2d           	movwf	 w_num3		; compute chrparm x 10 x 60                                      H:\PIC\CWreadr\CWrate.asm
0002c1   215b     CALL      0x15b          	call	 moltip                                                                    H:\PIC\CWreadr\CWrate.asm
0002c2   0825     MOVF      0x25,0x0       	movf	 timchr1,W	                                                                H:\PIC\CWreadr\CWrate.asm
0002c3   00ad     MOVWF     0x2d           	movwf	 w_num3		; set the divisor to timchr1                                     H:\PIC\CWreadr\CWrate.asm
0002c4   2168     CALL      0x168          	call	 dividi                                                                    H:\PIC\CWreadr\CWrate.asm
0002c5   082c     MOVF      0x2c,0x0       	movf	 w_num2,W                                                                  H:\PIC\CWreadr\CWrate.asm
0002c6   072c     ADDWF     0x2c,0x0       	addwf	 w_num2,W	; multiply remainder x 2                                        H:\PIC\CWreadr\CWrate.asm
0002c7   0225     SUBWF     0x25,0x0       	subwf	 timchr1,W	; compare timchr1 to (remainder x 2)                           H:\PIC\CWreadr\CWrate.asm
0002c8   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWrate.asm
0002c9   2acb     GOTO      0x2cb          	goto	 cw_rate1	; if result > 0 there is no rounding                             H:\PIC\CWreadr\CWrate.asm
0002ca   0aab     INCF      0x2b,0x1       	incf	 w_num1,F	; otherwise rounding to the upper digit	                         H:\PIC\CWreadr\CWrate.asm
                                           cw_rate1                                                                         H:\PIC\CWreadr\CWrate.asm
0002cb   082b     MOVF      0x2b,0x0       	movf	 w_num1,W                                                                  H:\PIC\CWreadr\CWrate.asm
0002cc   00b9     MOVWF     0x39           	movwf	 speed                                                                    H:\PIC\CWreadr\CWrate.asm
0002cd   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWrate.asm
                                                                                                                            H:\PIC\CWreadr\CWrate.asm
                                           ;	Speed rate update routine                                                      H:\PIC\CWreadr\CWrate.asm
                                           ;                                                                                H:\PIC\CWreadr\CWrate.asm
                                           agspeed                                                                          H:\PIC\CWreadr\CWrate.asm
0002ce   3008     MOVLW     0x8            	movlw	 chrparm                                                                  H:\PIC\CWreadr\CWrate.asm
0002cf   0236     SUBWF     0x36,0x0       	subwf	 cntchar,W	; compare counter to the stated limit                          H:\PIC\CWreadr\CWrate.asm
0002d0   1c03     BTFSS     0x3,0x0        	btfss	 STATUS,C	; if counter >= limit : skip                                    H:\PIC\CWreadr\CWrate.asm
0002d1   2ad9     GOTO      0x2d9          	goto	 agsped2	; if counter < limite go to end	                                  H:\PIC\CWreadr\CWrate.asm
0002d2   01b6     CLRF      0x36           	clrf	 cntchar	; clear counter                                                   H:\PIC\CWreadr\CWrate.asm
0002d3   08b8     MOVF      0x38,0x1       	movf     plval,F      	; verify PLVAL content                                   H:\PIC\CWreadr\CWrate.asm
0002d4   1903     BTFSC     0x3,0x2        	btfsc	 STATUS,Z	; skip if <> zero                                               H:\PIC\CWreadr\CWrate.asm
0002d5   2ad7     GOTO      0x2d7          	goto	 agsped1	; otherwise bypass speed calculation                              H:\PIC\CWreadr\CWrate.asm
0002d6   22ba     CALL      0x2ba          	call	 cw_rate                                                                   H:\PIC\CWreadr\CWrate.asm
                                           agsped1                                                                          H:\PIC\CWreadr\CWrate.asm
0002d7   01a5     CLRF      0x25           	clrf	 timchr1                                                                   H:\PIC\CWreadr\CWrate.asm
0002d8   01a6     CLRF      0x26           	clrf	 timchr2                                                                   H:\PIC\CWreadr\CWrate.asm
                                           agsped2                                                                          H:\PIC\CWreadr\CWrate.asm
0002d9   0ab6     INCF      0x36,0x1       	incf	 cntchar,F                                                                 H:\PIC\CWreadr\CWrate.asm
0002da   0008     RETURN                   	return	                                                                         H:\PIC\CWreadr\CWrate.asm
                                                                                                                            H:\PIC\CWreadr\CWrate.asm
                                                                                                                            H:\PIC\CWreadr\CWrate.asm
                                           		end                                                                            H:\PIC\CWreadr\CWrate.asm
                                           ;	CW decode routines                                                             H:\PIC\CWreadr\CWdecode.asm
                                           		include		p16f628.inc                                                           H:\PIC\CWreadr\CWdecode.asm
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           ; P16F628.INC  Standard Header File, Version 1.01    Microchip Technology, Inc.  C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                                   LIST                                                                     C:\Program Files\MPLAB IDE\MCHIP_Tools\p16f628.inc
                                           		include		CWdefs.inc                                                            H:\PIC\CWreadr\CWdecode.asm
                                           ;	Constants used by multiple routines                                            H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ;       program constants definitions                                            H:\PIC\CWreadr\CWdefs.inc
                                           swon	equ	 0x00                                                                   H:\PIC\CWreadr\CWdefs.inc
                                           swoff	equ	 0x01	                                                                 H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           ; 	program settable parameters                                                   H:\PIC\CWreadr\CWdefs.inc
                                           chrparm equ	 0x08		; chars number for speed calculation                          H:\PIC\CWreadr\CWdefs.inc
                                           rowparm equ	 0x28		; chars number on the LCD raw                                 H:\PIC\CWreadr\CWdefs.inc
                                           sgparm  equ	 0x0f		; dit/dashes number for param. refresh	                       H:\PIC\CWreadr\CWdefs.inc
                                            	                                                                               H:\PIC\CWreadr\CWdefs.inc
                                           ; port_a bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_P0	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_P1	equ	2                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_CW	equ	4                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           ; port_b bits                                                                    H:\PIC\CWreadr\CWdefs.inc
                                           bit_EN	equ	3                                                                     H:\PIC\CWreadr\CWdefs.inc
                                           bit_RS	equ	1                                                                     H:\PIC\CWreadr\CWdefs.inc
                                                                                                                            H:\PIC\CWreadr\CWdefs.inc
                                           		list		b=4,n=70                                                                 H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           ;	Functions provided                                                             H:\PIC\CWreadr\CWdecode.asm
                                           		global		c_minof,c_minon,decod,ag_parm,dec_sg                                   H:\PIC\CWreadr\CWdecode.asm
                                           ;	Storage provided                                                               H:\PIC\CWreadr\CWdecode.asm
                                           		global  	ctrsegn,tmed_on,tmed_of,tmax_of                                       H:\PIC\CWreadr\CWdecode.asm
                                           		global		plval,pldata,speed                                                     H:\PIC\CWreadr\CWdecode.asm
                                           ;	used by decod                                                                  H:\PIC\CWreadr\CWdecode.asm
                                           		; LCD routines                                                                 H:\PIC\CWreadr\CWdecode.asm
                                           		extern		wrtlcd,bytelcd                                                         H:\PIC\CWreadr\CWdecode.asm
                                           		; Table Lookups                                                                H:\PIC\CWreadr\CWdecode.asm
                                           		extern		ric_a,ric_b,ric_c,ric_d,ric_e,ric_f                                    H:\PIC\CWreadr\CWdecode.asm
                                           		; Storage                                                                      H:\PIC\CWreadr\CWdecode.asm
                                           		extern		w_conv	; Binary-ASCII work area                                        H:\PIC\CWreadr\CWdecode.asm
                                           ;	used by ag_parm                                                                H:\PIC\CWreadr\CWdecode.asm
                                           		extern		moltip			; Multiply                                                    H:\PIC\CWreadr\CWdecode.asm
                                           		extern		w_num2,w_num3	; Multiply work area                                     H:\PIC\CWreadr\CWdecode.asm
                                           		extern		tmin1_on		; ON lowest duration                                         H:\PIC\CWreadr\CWdecode.asm
                                           		extern		tmin1_of		; OFF lowest duration                                        H:\PIC\CWreadr\CWdecode.asm
                                           		extern		tmin2_on		; ON second shortest                                         H:\PIC\CWreadr\CWdecode.asm
                                           		extern		tmin2_of		; OFF second shortest                                        H:\PIC\CWreadr\CWdecode.asm
                                           ;	used by c_minof                                                                H:\PIC\CWreadr\CWdecode.asm
                                           		extern		ord_of			; Sort routine for off's                                      H:\PIC\CWreadr\CWdecode.asm
                                           		extern		timeoff			; OFF signal duration                                        H:\PIC\CWreadr\CWdecode.asm
                                           ;	used by c_minon                                                                H:\PIC\CWreadr\CWdecode.asm
                                           		extern		ord_on			; Sort routine for on's                                       H:\PIC\CWreadr\CWdecode.asm
                                           ;	used by ag_parm and c_minof                                                    H:\PIC\CWreadr\CWdecode.asm
                                           		extern		tmin3_of		; OFF greatest duration                                      H:\PIC\CWreadr\CWdecode.asm
                                           ;	used by ag_parm and c_minon                                                    H:\PIC\CWreadr\CWdecode.asm
                                           		extern		tmin3_on		; ON greatest duration                                       H:\PIC\CWreadr\CWdecode.asm
                                           ;	used by c_minon and dec_sg                                                     H:\PIC\CWreadr\CWdecode.asm
                                           		extern		timeon			; ON signal duration                                          H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           ;       program variables definitions                                            H:\PIC\CWreadr\CWdecode.asm
                                           		udata                                                                          H:\PIC\CWreadr\CWdecode.asm
                                           pldata  res 		1 				; received dit/dash map (max 8)                              H:\PIC\CWreadr\CWdecode.asm
                                           plval   res 		1 				; significant dit/dash map (max 8)                           H:\PIC\CWreadr\CWdecode.asm
                                           speed	res 		1 				;	                                                             H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           tmed_on res 		1 				; ON signal mean duration                                    H:\PIC\CWreadr\CWdecode.asm
                                           tmed_of res 		1 				; OFF signal mean duration                                   H:\PIC\CWreadr\CWdecode.asm
                                           tmax_of res 		1 				; interwords pause mean duration                             H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           ctrsegn res		 	1 				; received signs counter                                    H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           		code                                                                           H:\PIC\CWreadr\CWdecode.asm
                                           ;	Received character decoding routine                                            H:\PIC\CWreadr\CWdecode.asm
                                           ;                                                                                H:\PIC\CWreadr\CWdecode.asm
                                           ;	input : 	                                                                      H:\PIC\CWreadr\CWdecode.asm
                                           ;	- PLVAL area containing significant bits map                                   H:\PIC\CWreadr\CWdecode.asm
                                           ;	- PLDATA area containing received values (0=dit,1=dash)                        H:\PIC\CWreadr\CWdecode.asm
                                           ;                                                                                H:\PIC\CWreadr\CWdecode.asm
                                           ;	output :                                                                       H:\PIC\CWreadr\CWdecode.asm
                                           ;	- decoded character in w_conv                                                  H:\PIC\CWreadr\CWdecode.asm
                                           ;	- decoded character on LCD display                                             H:\PIC\CWreadr\CWdecode.asm
                                           ;	                                                                               H:\PIC\CWreadr\CWdecode.asm
                                           decod                                                                            H:\PIC\CWreadr\CWdecode.asm
0002db   3020     MOVLW     0x20           		movlw		" "				; space default character                                        H:\PIC\CWreadr\CWdecode.asm
0002dc   00af     MOVWF     0x2f           		movwf		w_conv			;                                                              H:\PIC\CWreadr\CWdecode.asm
0002dd   08b8     MOVF      0x38,0x1       		movf    	plval,F      	; verify PLVAL content                                  H:\PIC\CWreadr\CWdecode.asm
0002de   1903     BTFSC     0x3,0x2        		btfsc		STATUS,Z		; if zero                                                     H:\PIC\CWreadr\CWdecode.asm
0002df   0008     RETURN                   		return						; go to end routine	                                               H:\PIC\CWreadr\CWdecode.asm
                                           decod1	                                                                          H:\PIC\CWreadr\CWdecode.asm
0002e0   3001     MOVLW     0x1            		movlw		d'1'			; verify if plval = 1                                            H:\PIC\CWreadr\CWdecode.asm
0002e1   02b8     SUBWF     0x38,0x1       		subwf		plval,F			;                                                             H:\PIC\CWreadr\CWdecode.asm
0002e2   1d03     BTFSS     0x3,0x2        		btfss		STATUS,Z		;                                                             H:\PIC\CWreadr\CWdecode.asm
0002e3   2ae6     GOTO      0x2e6          		goto		decod3			;                                                               H:\PIC\CWreadr\CWdecode.asm
0002e4   2197     CALL      0x197          		call		ric_a			; and tab A search                                               H:\PIC\CWreadr\CWdecode.asm
0002e5   2b05     GOTO      0x305          		goto		endecod                                                                  H:\PIC\CWreadr\CWdecode.asm
                                           decod3	                                                                          H:\PIC\CWreadr\CWdecode.asm
0002e6   3002     MOVLW     0x2            		movlw		d'2'			; verify if plval = 3                                            H:\PIC\CWreadr\CWdecode.asm
0002e7   02b8     SUBWF     0x38,0x1       		subwf		plval,F			;                                                             H:\PIC\CWreadr\CWdecode.asm
0002e8   1d03     BTFSS     0x3,0x2        		btfss		STATUS,Z		;                                                             H:\PIC\CWreadr\CWdecode.asm
0002e9   2aec     GOTO      0x2ec          		goto		decod7			;                                                               H:\PIC\CWreadr\CWdecode.asm
0002ea   21ad     CALL      0x1ad          		call		ric_b			; and tab B search                                               H:\PIC\CWreadr\CWdecode.asm
0002eb   2b05     GOTO      0x305          		goto		endecod                                                                  H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           decod7	                                                                          H:\PIC\CWreadr\CWdecode.asm
0002ec   3004     MOVLW     0x4            	movlw	 d'4'		; verify if plval = 7                                              H:\PIC\CWreadr\CWdecode.asm
0002ed   02b8     SUBWF     0x38,0x1       	subwf	 plval,F	;                                                                H:\PIC\CWreadr\CWdecode.asm
0002ee   1d03     BTFSS     0x3,0x2        	btfss	 STATUS,Z	;                                                               H:\PIC\CWreadr\CWdecode.asm
0002ef   2af2     GOTO      0x2f2          	goto	 decod15	;                                                                 H:\PIC\CWreadr\CWdecode.asm
0002f0   21c3     CALL      0x1c3          	call	 ric_c		; and tab C search                                                 H:\PIC\CWreadr\CWdecode.asm
0002f1   2b05     GOTO      0x305          	goto	 endecod                                                                   H:\PIC\CWreadr\CWdecode.asm
                                           	                                                                                H:\PIC\CWreadr\CWdecode.asm
                                           decod15	                                                                         H:\PIC\CWreadr\CWdecode.asm
0002f2   3008     MOVLW     0x8            	movlw	 d'8'		; verify if plval = 15                                             H:\PIC\CWreadr\CWdecode.asm
0002f3   02b8     SUBWF     0x38,0x1       	subwf	 plval,F	;                                                                H:\PIC\CWreadr\CWdecode.asm
0002f4   1d03     BTFSS     0x3,0x2        	btfss	 STATUS,Z	;                                                               H:\PIC\CWreadr\CWdecode.asm
0002f5   2af8     GOTO      0x2f8          	goto	 decod31	;                                                                 H:\PIC\CWreadr\CWdecode.asm
0002f6   21d9     CALL      0x1d9          	call	 ric_d		; and tab D search                                                 H:\PIC\CWreadr\CWdecode.asm
0002f7   2b05     GOTO      0x305          	goto	 endecod                                                                   H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           decod31	                                                                         H:\PIC\CWreadr\CWdecode.asm
0002f8   3010     MOVLW     0x10           	movlw	 d'16'		; verify if plval = 31                                            H:\PIC\CWreadr\CWdecode.asm
0002f9   02b8     SUBWF     0x38,0x1       	subwf	 plval,F	;                                                                H:\PIC\CWreadr\CWdecode.asm
0002fa   1d03     BTFSS     0x3,0x2        	btfss	 STATUS,Z	;                                                               H:\PIC\CWreadr\CWdecode.asm
0002fb   2afe     GOTO      0x2fe          	goto	 decod63	;                                                                 H:\PIC\CWreadr\CWdecode.asm
0002fc   21ef     CALL      0x1ef          	call	 ric_e		; and tab E search                                                 H:\PIC\CWreadr\CWdecode.asm
0002fd   2b05     GOTO      0x305          	goto	 endecod                                                                   H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           decod63	                                                                         H:\PIC\CWreadr\CWdecode.asm
0002fe   3020     MOVLW     0x20           	movlw	 d'32'		; verify if plval = 63                                            H:\PIC\CWreadr\CWdecode.asm
0002ff   02b8     SUBWF     0x38,0x1       	subwf	 plval,F	;                                                                H:\PIC\CWreadr\CWdecode.asm
000300   1d03     BTFSS     0x3,0x2        	btfss	 STATUS,Z	;                                                               H:\PIC\CWreadr\CWdecode.asm
000301   2b04     GOTO      0x304          	goto	 nodecod	;                                                                 H:\PIC\CWreadr\CWdecode.asm
000302   2205     CALL      0x205          	call	 ric_f		; and tab F search                                                 H:\PIC\CWreadr\CWdecode.asm
000303   2b05     GOTO      0x305          	goto	 endecod                                                                   H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           nodecod                                                                          H:\PIC\CWreadr\CWdecode.asm
000304   302a     MOVLW     0x2a           	movlw	 "*"                                                                      H:\PIC\CWreadr\CWdecode.asm
                                           endecod                                                                          H:\PIC\CWreadr\CWdecode.asm
000305   00af     MOVWF     0x2f           	movwf	 w_conv		; at end save in w_conv decoded character                        H:\PIC\CWreadr\CWdecode.asm
000306   00a9     MOVWF     0x29           	movwf	 bytelcd                                                                  H:\PIC\CWreadr\CWdecode.asm
000307   01b8     CLRF      0x38           	clrf	 plval		; clear PLVAL e PLDATA                                             H:\PIC\CWreadr\CWdecode.asm
000308   01b7     CLRF      0x37           	clrf	 pldata                                                                    H:\PIC\CWreadr\CWdecode.asm
000309   214e     CALL      0x14e          	call	 wrtlcd		; display decoded character                                       H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
00030a   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           ;	Received sign decoding routine                                                 H:\PIC\CWreadr\CWdecode.asm
                                           ;                                                                                H:\PIC\CWreadr\CWdecode.asm
                                           ;	input :                                                                        H:\PIC\CWreadr\CWdecode.asm
                                           ;	- received signal duration  	                                                  H:\PIC\CWreadr\CWdecode.asm
                                           ;	- PLVAL area containing map of received signs                                  H:\PIC\CWreadr\CWdecode.asm
                                           ;	- PLDATA area containing received values (0=punto, 1=linea)                    H:\PIC\CWreadr\CWdecode.asm
                                           ;                                                                                H:\PIC\CWreadr\CWdecode.asm
                                           ;	output :                                                                       H:\PIC\CWreadr\CWdecode.asm
                                           ;	- updated PLVAL area                                                           H:\PIC\CWreadr\CWdecode.asm
                                           ;	- updated PLDATA area                                                          H:\PIC\CWreadr\CWdecode.asm
                                           ;	                                                                               H:\PIC\CWreadr\CWdecode.asm
                                           dec_sg                                                                           H:\PIC\CWreadr\CWdecode.asm
00030b   1838     BTFSC     0x38,0x0       	btfsc	 plval, 0	; verify if plval = 00000000                                    H:\PIC\CWreadr\CWdecode.asm
00030c   2b13     GOTO      0x313          	goto	 dec_sg1	;                                                                 H:\PIC\CWreadr\CWdecode.asm
00030d   1438     BSF       0x38,0x0       	bsf	 plval, 0	; first sign of the received character                            H:\PIC\CWreadr\CWdecode.asm
00030e   083a     MOVF      0x3a,0x0       	movf	 tmed_on,W	;                                                               H:\PIC\CWreadr\CWdecode.asm
00030f   0223     SUBWF     0x23,0x0       	subwf	 timeon,W	; verify if duration > mean ON time (dit)                       H:\PIC\CWreadr\CWdecode.asm
000310   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWdecode.asm
000311   1437     BSF       0x37,0x0       	bsf	 pldata, 0	; greater duration (dash)                                        H:\PIC\CWreadr\CWdecode.asm
000312   2b3c     GOTO      0x33c          	goto	 end_sg                                                                    H:\PIC\CWreadr\CWdecode.asm
                                           dec_sg1                                                                          H:\PIC\CWreadr\CWdecode.asm
000313   18b8     BTFSC     0x38,0x1       	btfsc	 plval, 1	; verify if plval = 00000001                                    H:\PIC\CWreadr\CWdecode.asm
000314   2b1b     GOTO      0x31b          	goto	 dec_sg2	;                                                                 H:\PIC\CWreadr\CWdecode.asm
000315   14b8     BSF       0x38,0x1       	bsf	 plval, 1	; second sign of the received character                           H:\PIC\CWreadr\CWdecode.asm
000316   083a     MOVF      0x3a,0x0       	movf	 tmed_on,W	;                                                               H:\PIC\CWreadr\CWdecode.asm
000317   0223     SUBWF     0x23,0x0       	subwf	 timeon,W	; verify if duration > mean ON time (dit)                       H:\PIC\CWreadr\CWdecode.asm
000318   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWdecode.asm
000319   14b7     BSF       0x37,0x1       	bsf	 pldata, 1	; greater duration (dash)                                        H:\PIC\CWreadr\CWdecode.asm
00031a   2b3c     GOTO      0x33c          	goto	 end_sg	                                                                   H:\PIC\CWreadr\CWdecode.asm
                                           dec_sg2                                                                          H:\PIC\CWreadr\CWdecode.asm
00031b   1938     BTFSC     0x38,0x2       	btfsc	 plval, 2	; verify if plval = 00000011                                    H:\PIC\CWreadr\CWdecode.asm
00031c   2b23     GOTO      0x323          	goto	 dec_sg3	;                                                                 H:\PIC\CWreadr\CWdecode.asm
00031d   1538     BSF       0x38,0x2       	bsf	 plval, 2	; third sign of the received character                            H:\PIC\CWreadr\CWdecode.asm
00031e   083a     MOVF      0x3a,0x0       	movf	 tmed_on,W	;                                                               H:\PIC\CWreadr\CWdecode.asm
00031f   0223     SUBWF     0x23,0x0       	subwf	 timeon,W	; verify if duration > mean ON time (dit)                       H:\PIC\CWreadr\CWdecode.asm
000320   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWdecode.asm
000321   1537     BSF       0x37,0x2       	bsf	 pldata, 2	; greater duration (dash)                                        H:\PIC\CWreadr\CWdecode.asm
000322   2b3c     GOTO      0x33c          	goto	 end_sg                                                                    H:\PIC\CWreadr\CWdecode.asm
                                           dec_sg3                                                                          H:\PIC\CWreadr\CWdecode.asm
000323   19b8     BTFSC     0x38,0x3       	btfsc	 plval, 3	; verify if plval = 00000111                                    H:\PIC\CWreadr\CWdecode.asm
000324   2b2b     GOTO      0x32b          	goto	 dec_sg4	;                                                                 H:\PIC\CWreadr\CWdecode.asm
000325   15b8     BSF       0x38,0x3       	bsf	 plval, 3	; fourth sign of the received character                           H:\PIC\CWreadr\CWdecode.asm
000326   083a     MOVF      0x3a,0x0       	movf	 tmed_on,W	;                                                               H:\PIC\CWreadr\CWdecode.asm
000327   0223     SUBWF     0x23,0x0       	subwf	 timeon,W	; verify if duration > mean ON time (dit)                       H:\PIC\CWreadr\CWdecode.asm
000328   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWdecode.asm
000329   15b7     BSF       0x37,0x3       	bsf	 pldata, 3	; greater duration (dash)                                        H:\PIC\CWreadr\CWdecode.asm
00032a   2b3c     GOTO      0x33c          	goto	 end_sg		                                                                  H:\PIC\CWreadr\CWdecode.asm
                                           dec_sg4                                                                          H:\PIC\CWreadr\CWdecode.asm
00032b   1a38     BTFSC     0x38,0x4       	btfsc	 plval, 4	; verify if plval = 00001111                                    H:\PIC\CWreadr\CWdecode.asm
00032c   2b33     GOTO      0x333          	goto	 dec_sg5	;                                                                 H:\PIC\CWreadr\CWdecode.asm
00032d   1638     BSF       0x38,0x4       	bsf	 plval, 4	; fifth sign of the received character                            H:\PIC\CWreadr\CWdecode.asm
00032e   083a     MOVF      0x3a,0x0       	movf	 tmed_on,W	;                                                               H:\PIC\CWreadr\CWdecode.asm
00032f   0223     SUBWF     0x23,0x0       	subwf	 timeon,W	; verify if duration > mean ON time (dit)                       H:\PIC\CWreadr\CWdecode.asm
000330   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWdecode.asm
000331   1637     BSF       0x37,0x4       	bsf	 pldata, 4	; greater duration (dash)                                        H:\PIC\CWreadr\CWdecode.asm
000332   2b3c     GOTO      0x33c          	goto	 end_sg                                                                    H:\PIC\CWreadr\CWdecode.asm
                                           dec_sg5                                                                          H:\PIC\CWreadr\CWdecode.asm
000333   1ab8     BTFSC     0x38,0x5       	btfsc	 plval, 5	; verify if plval = 00011111                                    H:\PIC\CWreadr\CWdecode.asm
000334   2b3b     GOTO      0x33b          	goto	 dec_sg6	;                                                                 H:\PIC\CWreadr\CWdecode.asm
000335   16b8     BSF       0x38,0x5       	bsf	 plval, 5	; sixth sign of the received character                            H:\PIC\CWreadr\CWdecode.asm
000336   083a     MOVF      0x3a,0x0       	movf	 tmed_on,W	;                                                               H:\PIC\CWreadr\CWdecode.asm
000337   0223     SUBWF     0x23,0x0       	subwf	 timeon,W	; verify if duration > mean ON time (dit)                       H:\PIC\CWreadr\CWdecode.asm
000338   1803     BTFSC     0x3,0x0        	btfsc	 STATUS,C	;                                                               H:\PIC\CWreadr\CWdecode.asm
000339   16b7     BSF       0x37,0x5       	bsf	 pldata, 5	; greater duration (dash)                                        H:\PIC\CWreadr\CWdecode.asm
00033a   2b3c     GOTO      0x33c          	goto	 end_sg	                                                                   H:\PIC\CWreadr\CWdecode.asm
                                           dec_sg6                                                                          H:\PIC\CWreadr\CWdecode.asm
00033b   1738     BSF       0x38,0x6       	bsf	 plval, 6	; if more than six signs set a default 		                         H:\PIC\CWreadr\CWdecode.asm
                                           end_sg	                                                                          H:\PIC\CWreadr\CWdecode.asm
00033c   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           ;	Working parameters calculation routine                                         H:\PIC\CWreadr\CWdecode.asm
                                           ;	                                                                               H:\PIC\CWreadr\CWdecode.asm
                                           ;	tmed_on                                                                        H:\PIC\CWreadr\CWdecode.asm
                                           ;	tmed_of                                                                        H:\PIC\CWreadr\CWdecode.asm
                                           ;	tmax_of                                                                        H:\PIC\CWreadr\CWdecode.asm
                                           ;                                                                                H:\PIC\CWreadr\CWdecode.asm
                                           ag_parm                                                                          H:\PIC\CWreadr\CWdecode.asm
                                           ;	tmed_on computing                                                              H:\PIC\CWreadr\CWdecode.asm
00033d   0832     MOVF      0x32,0x0       	movf	 tmin3_on,W                                                                H:\PIC\CWreadr\CWdecode.asm
00033e   00ac     MOVWF     0x2c           	movwf	 w_num2		; multiplicand in w_num2                                         H:\PIC\CWreadr\CWdecode.asm
00033f   3002     MOVLW     0x2            	movlw	 d'2'                                                                     H:\PIC\CWreadr\CWdecode.asm
000340   00ad     MOVWF     0x2d           	movwf	 w_num3		; 2 in w_num3                                                    H:\PIC\CWreadr\CWdecode.asm
000341   215b     CALL      0x15b          	call	 moltip                                                                    H:\PIC\CWreadr\CWdecode.asm
000342   082c     MOVF      0x2c,0x0       	movf	 w_num2,W                                                                  H:\PIC\CWreadr\CWdecode.asm
000343   00ba     MOVWF     0x3a           	movwf	 tmed_on                                                                  H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           ;	tmed_of computing                                                              H:\PIC\CWreadr\CWdecode.asm
000344   0835     MOVF      0x35,0x0       	movf	 tmin3_of,W                                                                H:\PIC\CWreadr\CWdecode.asm
000345   00ac     MOVWF     0x2c           	movwf	 w_num2		; multiplicand in w_num2                                         H:\PIC\CWreadr\CWdecode.asm
000346   3002     MOVLW     0x2            	movlw	 d'2'                                                                     H:\PIC\CWreadr\CWdecode.asm
000347   00ad     MOVWF     0x2d           	movwf	 w_num3		; 2 in w_num3                                                    H:\PIC\CWreadr\CWdecode.asm
000348   215b     CALL      0x15b          	call	 moltip                                                                    H:\PIC\CWreadr\CWdecode.asm
000349   082c     MOVF      0x2c,0x0       	movf	 w_num2,W                                                                  H:\PIC\CWreadr\CWdecode.asm
00034a   00bb     MOVWF     0x3b           	movwf	 tmed_of                                                                  H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           ;	tmax_of computing                                                              H:\PIC\CWreadr\CWdecode.asm
00034b   0835     MOVF      0x35,0x0       	movf	 tmin3_of,W                                                                H:\PIC\CWreadr\CWdecode.asm
00034c   00ac     MOVWF     0x2c           	movwf	 w_num2		; multiplicand in w_num2                                         H:\PIC\CWreadr\CWdecode.asm
00034d   3005     MOVLW     0x5            	movlw	 d'5'                                                                     H:\PIC\CWreadr\CWdecode.asm
00034e   00ad     MOVWF     0x2d           	movwf	 w_num3		; 5 in w_num3                                                    H:\PIC\CWreadr\CWdecode.asm
00034f   215b     CALL      0x15b          	call	 moltip                                                                    H:\PIC\CWreadr\CWdecode.asm
000350   082c     MOVF      0x2c,0x0       	movf	 w_num2,W	; compute tmax_of = tmin_of * 5                                  H:\PIC\CWreadr\CWdecode.asm
000351   00bc     MOVWF     0x3c           	movwf	 tmax_of                                                                  H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
000352   01bd     CLRF      0x3d           	clrf	 ctrsegn                                                                   H:\PIC\CWreadr\CWdecode.asm
000353   30ff     MOVLW     0xff           	movlw	 0xff                                                                     H:\PIC\CWreadr\CWdecode.asm
000354   00b0     MOVWF     0x30           	movwf	 tmin1_on                                                                 H:\PIC\CWreadr\CWdecode.asm
000355   00b1     MOVWF     0x31           	movwf	 tmin2_on                                                                 H:\PIC\CWreadr\CWdecode.asm
000356   00b2     MOVWF     0x32           	movwf	 tmin3_on                                                                 H:\PIC\CWreadr\CWdecode.asm
000357   00b3     MOVWF     0x33           	movwf	 tmin1_of                                                                 H:\PIC\CWreadr\CWdecode.asm
000358   00b4     MOVWF     0x34           	movwf	 tmin2_of                                                                 H:\PIC\CWreadr\CWdecode.asm
000359   00b5     MOVWF     0x35           	movwf	 tmin3_of                                                                 H:\PIC\CWreadr\CWdecode.asm
00035a   0008     RETURN                   	return                                                                          H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           ;	Minimum ON time calculation routine.                                           H:\PIC\CWreadr\CWdecode.asm
                                           ;	stores the three lowest measured values                                        H:\PIC\CWreadr\CWdecode.asm
                                           ;	in the observation interval (sgparm = received signs)                          H:\PIC\CWreadr\CWdecode.asm
                                           c_minon                                                                          H:\PIC\CWreadr\CWdecode.asm
00035b   3003     MOVLW     0x3            	movlw	 d'3'		; verify if timeon < 30 ms                                         H:\PIC\CWreadr\CWdecode.asm
00035c   0223     SUBWF     0x23,0x0       	subwf	 timeon,W	; if so no computing is done                                    H:\PIC\CWreadr\CWdecode.asm
00035d   1c03     BTFSS     0x3,0x0        	btfss	 STATUS,C	;                                                               H:\PIC\CWreadr\CWdecode.asm
00035e   2b66     GOTO      0x366          	goto	 end_mon	                                                                  H:\PIC\CWreadr\CWdecode.asm
00035f   0823     MOVF      0x23,0x0       	movf	 timeon,W	;                                                                H:\PIC\CWreadr\CWdecode.asm
000360   0232     SUBWF     0x32,0x0       	subwf	 tmin3_on,W	; calculate tmin3_on - timeon                                 H:\PIC\CWreadr\CWdecode.asm
000361   1c03     BTFSS     0x3,0x0        	btfss	 STATUS,C	;                                                               H:\PIC\CWreadr\CWdecode.asm
000362   2b66     GOTO      0x366          	goto	 end_mon	; if result < 0 exit                                              H:\PIC\CWreadr\CWdecode.asm
000363   0823     MOVF      0x23,0x0       	movf	 timeon,W	; otherwise substitute for tmin3_on                              H:\PIC\CWreadr\CWdecode.asm
000364   00b2     MOVWF     0x32           	movwf	 tmin3_on	;                                                               H:\PIC\CWreadr\CWdecode.asm
000365   221b     CALL      0x21b          	call	 ord_on		; and tabel reorg                                                 H:\PIC\CWreadr\CWdecode.asm
                                           end_mon                                                                          H:\PIC\CWreadr\CWdecode.asm
000366   0008     RETURN                   	return	                                                                         H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           ;	Minimum OFF time calculation routine.                                          H:\PIC\CWreadr\CWdecode.asm
                                           ;	stores the three lowest measured values                                        H:\PIC\CWreadr\CWdecode.asm
                                           ;	in the observation interval (sgparm = received signs)                          H:\PIC\CWreadr\CWdecode.asm
                                           c_minof                                                                          H:\PIC\CWreadr\CWdecode.asm
000367   3003     MOVLW     0x3            	movlw	 d'3'		; verify if timeoff < 30 ms                                        H:\PIC\CWreadr\CWdecode.asm
000368   0224     SUBWF     0x24,0x0       	subwf	 timeoff,W	; if so no computing is done                                   H:\PIC\CWreadr\CWdecode.asm
000369   1c03     BTFSS     0x3,0x0        	btfss	 STATUS,C	;                                                               H:\PIC\CWreadr\CWdecode.asm
00036a   2b72     GOTO      0x372          	goto	 end_mof	;                                                                 H:\PIC\CWreadr\CWdecode.asm
00036b   0824     MOVF      0x24,0x0       	movf	 timeoff,W	;                                                               H:\PIC\CWreadr\CWdecode.asm
00036c   0235     SUBWF     0x35,0x0       	subwf	 tmin3_of,W	; calculate tmin3_of - timeoff                                H:\PIC\CWreadr\CWdecode.asm
00036d   1c03     BTFSS     0x3,0x0        	btfss	 STATUS,C	;                                                               H:\PIC\CWreadr\CWdecode.asm
00036e   2b72     GOTO      0x372          	goto	 end_mof	; if result < 0 exit                                              H:\PIC\CWreadr\CWdecode.asm
00036f   0824     MOVF      0x24,0x0       	movf	 timeoff,W	; otherwise substitute for tmin3_of                             H:\PIC\CWreadr\CWdecode.asm
000370   00b5     MOVWF     0x35           	movwf	 tmin3_of	;                                                               H:\PIC\CWreadr\CWdecode.asm
000371   223a     CALL      0x23a          	call	 ord_of		; and tabel reorg                                                 H:\PIC\CWreadr\CWdecode.asm
                                           end_mof                                                                          H:\PIC\CWreadr\CWdecode.asm
000372   0008     RETURN                   	return	                                                                         H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                                                                                                            H:\PIC\CWreadr\CWdecode.asm
                                           		end                                                                            H:\PIC\CWreadr\CWdecode.asm
