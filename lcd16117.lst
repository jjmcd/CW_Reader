MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00001 ;**************************************************************
                    00002 ;                    CW decoding program                      *
                    00003 ;                for PIC16F84 microprocessor                  *
                    00004 ;            dual mode version - 2x8 chars display            *
                    00005 ;               DMC-16117A LCD modules family                 *
                    00006 ;**************************************************************
                    00007 ;       displays on LCD the last N characters received        *
                    00008 ;       with automatic left shift of the text                 *
                    00009 ;       A "service" push button (P1) displays                 *    
                    00010 ;       the CW rate in characters / minute                    *
                    00011 ;                                                             *
                    00012 ;       I/O pins configuration :                              *
                    00013 ;                                                             *
                    00014 ;       RB0 : Enable                                          *                           
                    00015 ;       RB1 : RS                                              *
                    00016 ;       RB2 : n/c                                             *
                    00017 ;       RB3 : n/c                                             *  
                    00018 ;       RB4 : LCD (B4) LSB                                    *
                    00019 ;       RB5 : LCD (B5)                                        *
                    00020 ;       RB6 : LCD (B6)                                        *
                    00021 ;       RB7 : LCD (B7) MSB                                    *  
                    00022 ;                                                             *
                    00023 ;       RA0 : input CW                                        *
                    00024 ;       RA1 : P0                                              *  
                    00025 ;       RA2 : n/c                                             *  
                    00026 ;       RA3 : n/c                                             *  
                    00027 ;       RA4 : n/c                                             *  
                    00028 ;                                                             * 
                    00029 ;**************************************************************
                    00030 ;       processor pic16f84                                    *
                    00031 ;       no code protection                                    * 
                    00032 ;       power up timer disabled                               *
                    00033 ;       WDT enabled                                           *
                    00034 ;       XT oscillator                                         *                 
                    00035 ;**************************************************************
                    00036         list     p=16f84
2007 3FF9           00037         __config h'3ff9'
                    00038 
                    00039 ;       memory fixed locations
                    00040 
                    00041 ; port_a bits
  00000001          00042 bit_P0  equ     1
  00000002          00043 bit_P1  equ     2
  00000004          00044 bit_CW  equ     4
                    00045 ; port_b bits
  00000003          00046 bit_EN  equ     3
  00000001          00047 bit_RS  equ     1
  00000000          00048 indf    equ      0x00
  00000001          00049 tmr0    equ      0x01
  00000002          00050 pcl     equ      0x02
  00000003          00051 status  equ      0x03
  00000004          00052 fsr     equ      0x04
  00000005          00053 port_a  equ      0x05
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000006          00054 port_b  equ      0x06
  00000008          00055 eedata  equ      0x08
  00000009          00056 eeadr   equ      0x09
  0000000A          00057 pclath  equ      0x0A
  0000000B          00058 intcon  equ      0x0B
                    00059         
  00000081          00060 op_reg  equ      0x81
  00000085          00061 tris_a  equ      0x85
  00000086          00062 tris_b  equ      0x86
  00000088          00063 eecon1  equ      0x88
  00000089          00064 eecon2  equ      0x89
                    00065 
                    00066 ;       program variables definitions 
  0000000C          00067 rit1    equ      0x0c   
  0000000D          00068 rit2    equ      0x0d
  0000000E          00069 cntchar equ      0x0e           ;received characters counter  
  0000000F          00070 bytelcd equ      0x0f
  00000010          00071 pldata  equ      0x10           ;received dit/dash map (max 8)
  00000011          00072 plval   equ      0x11           ;significant dit/dash map (max 8)
  00000012          00073 timeon  equ      0x12           ;ON signal duration 
  00000013          00074 timeoff equ      0x13           ;OFF signal duration
  00000014          00075 timchr1 equ      0x14           ;received characters timer1 (sec/10)    
  00000015          00076 timchr2 equ      0x15           ;received characters timer2 (sec/100)   
                    00077 
  00000016          00078 tmin1_on equ     0x16           ;ON signal lowest duration
  00000017          00079 tmin2_on equ     0x17
  00000018          00080 tmin3_on equ     0x18 
  00000019          00081 tmin1_of equ     0x19           ;OFF signal lowest duration
  0000001A          00082 tmin2_of equ     0x1a
  0000001B          00083 tmin3_of equ     0x1b
                    00084 
  0000001C          00085 tmed_on  equ     0x1c           ;ON signal mean duration
  0000001D          00086 tmed_of  equ     0x1d           ;OFF signal mean duration
  0000001E          00087 tmax_of  equ     0x1e           ;interwords pause mean duration
  0000001F          00088 speed    equ     0x1f
                    00089 
  00000020          00090 swinput  equ     0x20           ;input ON/OFF state indicator
  00000021          00091 ctrsegn  equ     0x21           ;received signs counter 
                    00092 
  00000022          00093 save_w   equ     0x22           ;W register save area 
  00000023          00094 save_s   equ     0x23           ;STATUS register save area 
                    00095 
  00000024          00096 w_conv   equ     0x24           ;subroutines work areas  
  00000025          00097 w_count  equ     0x25           ; - hex to ascii conversion
  00000026          00098 w_num1   equ     0x26           ; - multiply
  00000027          00099 w_num2   equ     0x27           ; - divide
  00000028          00100 w_num3   equ     0x28           ;
  00000029          00101 w_num4   equ     0x29           ;
                    00102 
  0000002A          00103 lcd_01   equ     0x2a           ; leftmost LCD display character
  0000002B          00104 lcd_02   equ     0x2b           ; 
  0000002C          00105 lcd_03   equ     0x2c           ; 
  0000002D          00106 lcd_04   equ     0x2d           ; 
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000002E          00107 lcd_05   equ     0x2e           ; 
  0000002F          00108 lcd_06   equ     0x2f           ; 
  00000030          00109 lcd_07   equ     0x30           ; 
  00000031          00110 lcd_08   equ     0x31           ; 
  00000032          00111 lcd_09   equ     0x32           ; 
  00000033          00112 lcd_10   equ     0x33           ; 
  00000034          00113 lcd_11   equ     0x34           ; 
  00000035          00114 lcd_12   equ     0x35           ; 
  00000036          00115 lcd_13   equ     0x36           ; 
  00000037          00116 lcd_14   equ     0x37           ; 
  00000038          00117 lcd_15   equ     0x38           ; 
  00000039          00118 lcd_16   equ     0x39           ; rightmost LCD display character
                    00119 
                    00120 ;       program constants definitions  
  00000002          00121 z        equ     0x02
  00000001          00122 dc       equ     0x01
  00000000          00123 c        equ     0x00
  00000007          00124 irp      equ     0x07
  00000006          00125 rp1      equ     0x06
  00000005          00126 rp0      equ     0x05
  00000000          00127 w        equ     0x00
  00000001          00128 f        equ     0x01
  00000000          00129 ps0      equ     0x00
  00000001          00130 ps1      equ     0x01
  00000002          00131 ps2      equ     0x02
  00000003          00132 psa      equ     0x03
  00000005          00133 t0cs     equ     0x05
  00000002          00134 t0if     equ     0x02
  00000005          00135 t0ie     equ     0x05
  00000007          00136 gie      equ     0x07
  00000000          00137 swon     equ     0x00
  00000001          00138 swoff    equ     0x01   
                    00139 
                    00140 ;       program settable parameters 
  00000008          00141 chrparm  equ     0x08           ; chars number for speed calculation
  0000000F          00142 sgparm   equ     0x0f           ; dit/dashes number for param. refresh  
                    00143          
                    00144 ;       Reset address
0000 287F           00145         goto     main00
                    00146 
                    00147 ;       Interrupt address
0004                00148         org      h'0004'
0004 286B           00149         goto     tmrint 
                    00150 
                    00151 ;     subroutine searching the character with W offset in the 1 sign tab_char
0005                00152 tab_a
                    00153         
0005 0782           00154         addwf    pcl,1          ; increments jump address
0006 3400           00155         dt       b'00000000'    ; only a dit
0007 3445           00156         dt       "E"
0008 3401           00157         dt       b'00000001'    ; only a dash 
0009 3454           00158         dt       "T"
000A 34FF           00159         dt       b'11111111'    ; filler
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000B 3420           00160         dt       " "
000C                00161 endtb_a
                    00162 
                    00163 ;     subroutine searching the character with W offset in the 2 signs tab_char
000C                00164 tab_b
                    00165         
000C 0782           00166         addwf    pcl,1          ; increments jump address
000D 3400           00167         dt       b'00000000'    ; ..
000E 3449           00168         dt       "I"
000F 3402           00169         dt       b'00000010'    ; .-
0010 3441           00170         dt       "A"
0011 3401           00171         dt       b'00000001'    ; -.
0012 344E           00172         dt       "N"
0013 3403           00173         dt       b'00000011'    ; --
0014 344D           00174         dt       "M"
0015 34FF           00175         dt       b'11111111'    ; filler
0016 3420           00176         dt       " "
0017                00177 endtb_b
                    00178 
                    00179 ;     subroutine searching the character with W offset in the 3 signs tab_char
0017                00180 tab_c
                    00181         
0017 0782           00182         addwf    pcl,1          ; increments jump address
0018 3400           00183         dt       b'00000000'    ; ...
0019 3453           00184         dt       "S"
001A 3404           00185         dt       b'00000100'    ; ..-
001B 3455           00186         dt       "U"
001C 3402           00187         dt       b'00000010'    ; .-.
001D 3452           00188         dt       "R"
001E 3406           00189         dt       b'00000110'    ; .--
001F 3457           00190         dt       "W"
0020 3401           00191         dt       b'00000001'    ; -..
0021 3444           00192         dt       "D"
0022 3405           00193         dt       b'00000101'    ; -.-
0023 344B           00194         dt       "K"
0024 3403           00195         dt       b'00000011'    ; --.
0025 3447           00196         dt       "G"
0026 3407           00197         dt       b'00000111'    ; ---
0027 344F           00198         dt       "O"
0028 34FF           00199         dt       b'11111111'    ; filler
0029 3420           00200         dt       " "
002A                00201 endtb_c
                    00202 
                    00203 ;     subroutine searching the character with W offset in the 4 signs tab_char
002A                00204 tab_d
                    00205         
002A 0782           00206         addwf    pcl,1          ; increments jump address
002B 3400           00207         dt       b'00000000'    ; ....
002C 3448           00208         dt       "H"
002D 3408           00209         dt       b'00001000'    ; ...-
002E 3456           00210         dt       "V"
002F 3404           00211         dt       b'00000100'    ; ..-.
0030 3446           00212         dt       "F"
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0031 3402           00213         dt       b'00000010'    ; .-..
0032 344C           00214         dt       "L"
0033 3406           00215         dt       b'00000110'    ; .--.
0034 3450           00216         dt       "P"
0035 340E           00217         dt       b'00001110'    ; .---
0036 344A           00218         dt       "J"
0037 3401           00219         dt       b'00000001'    ; -...
0038 3442           00220         dt       "B"
0039 3409           00221         dt       b'00001001'    ; -..-
003A 3458           00222         dt       "X"
003B 3405           00223         dt       b'00000101'    ; -.-.
003C 3443           00224         dt       "C"
003D 340D           00225         dt       b'00001101'    ; -.--
003E 3459           00226         dt       "Y"
003F 3403           00227         dt       b'00000011'    ; --..
0040 345A           00228         dt       "Z"
0041 340B           00229         dt       b'00001011'    ; --.-
0042 3451           00230         dt       "Q"
0043 34FF           00231         dt       b'11111111'    ; filler
0044 3420           00232         dt       " "
0045                00233 endtb_d
                    00234 
                    00235 ;     subroutine searching the character with W offset in the 5 signs tab_char
0045                00236 tab_e
                    00237         
0045 0782           00238         addwf    pcl,1          ; increments jump address
0046 3400           00239         dt       b'00000000'    ; .....
0047 3435           00240         dt       "5"
0048 3410           00241         dt       b'00010000'    ; ....-
0049 3434           00242         dt       "4"
004A 3418           00243         dt       b'00011000'    ; ...--
004B 3433           00244         dt       "3"
004C 341C           00245         dt       b'00011100'    ; ..---
004D 3432           00246         dt       "2"
004E 341E           00247         dt       b'00011110'    ; .----
004F 3431           00248         dt       "1"
0050 341F           00249         dt       b'00011111'    ; -----
0051 3430           00250         dt       "0"
0052 3401           00251         dt       b'00000001'    ; -....
0053 3436           00252         dt       "6"
0054 3403           00253         dt       b'00000011'    ; --...
0055 3437           00254         dt       "7"
0056 3407           00255         dt       b'00000111'    ; ---..
0057 3438           00256         dt       "8"
0058 340F           00257         dt       b'00001111'    ; ----.
0059 3439           00258         dt       "9"
005A 3411           00259         dt       b'00010001'    ; -...-
005B 343D           00260         dt       "="
005C 34FF           00261         dt       b'11111111'    ; filler
005D 3420           00262         dt       " "
005E                00263 endtb_e
                    00264 
                    00265 ;     subroutine searching the character with W offset in the 6 signs tab_char
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005E                00266 tab_f
                    00267         
005E 0782           00268         addwf    pcl,1          ; increments jump address
005F 3428           00269         dt       b'00101000'    ; ...-.-
0060 3423           00270         dt       "#"
0061 340C           00271         dt       b'00001100'    ; ..--..
0062 343F           00272         dt       "?"
0063 3421           00273         dt       b'00100001'    ; -....-
0064 342D           00274         dt       "-"
0065 342A           00275         dt       b'00101010'    ; .-.-.-
0066 342E           00276         dt       "."
0067 3433           00277         dt       b'00110011'    ; --..--
0068 342C           00278         dt       ","
0069 34FF           00279         dt       b'11111111'    ; filler
006A 3420           00280         dt       " "
006B                00281 endtb_f
                    00282 
                    00283 ;       interrupt subroutine (only TIMER INTERRUPT)
006B                00284 tmrint
006B 00A2           00285         movwf   save_w          ; store W in save_w
006C 0E03           00286         swapf   status,w        ; store STATUS in W
006D 00A3           00287         movwf   save_s          ; store W in save_s
                    00288 
006E 0A92           00289         incf    timeon, f       ; ON timer increment
006F 0A93           00290         incf    timeoff, f      ; OFF timer increment
0070 0A95           00291         incf    timchr2, f      ; sec/100 timer increment 
0071 300A           00292         movlw   d'10'
0072 0215           00293         subwf   timchr2, w      ; verify if sec/100 timer > 9
0073 1C03           00294         btfss   status, c
0074 2877           00295         goto    tmrint1
0075 0195           00296         clrf    timchr2         ; if an overflow occurred clear sec/100
Message[305]: Using default destination of 1 (file).
0076 0A94           00297         incf    timchr1         ; and sec/10 timer increment 
0077                00298 tmrint1
0077 3064           00299         movlw   d'100'          ; set initial TMR0 value to 100
0078 0081           00300         movwf   tmr0            ; 155 x 64 = 9.9 mS interrupt cycle
0079 110B           00301         bcf     intcon, t0if    ; reset interrupt bit
                    00302 
007A 0E23           00303         swapf   save_s, w       ;
007B 0083           00304         movwf   status          ; restore STATUS register
007C 0EA2           00305         swapf   save_w, f       ; 
007D 0E22           00306         swapf   save_w, w       ; restore W register
007E 0009           00307         retfie
                    00308 
                    00309 ;       main program
007F                00310 main00
                    00311 ;       set initial value to I/O pins, timer and control registers
007F 0185           00312         clrf     port_a         ; clear data registers
0080 0186           00313         clrf     port_b
0081 1683           00314         bsf      status, rp0    ; memory bank1 set to address special registers
                    00315 
0082 30FF           00316         movlw    0xff           ; all port_a pins as input
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0083 0085           00317         movwf    tris_a
0084 3000           00318         movlw    0x00           ; all port_b pins as output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0085 0086           00319         movwf    tris_b
                    00320 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0086 1401           00321         bsf      op_reg, ps0
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0087 1081           00322         bcf      op_reg, ps1    ; set prescaler ratio to 64
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0088 1501           00323         bsf      op_reg, ps2    
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0089 1181           00324         bcf      op_reg, psa    ; assign prescaler to timer
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
008A 1281           00325         bcf      op_reg, t0cs   ; assign counter to internal clock
                    00326 
008B 1283           00327         bcf      status, rp0    ; memory bank0 reset to address data RAM
008C 3064           00328         movlw    d'100'
008D 0081           00329         movwf    tmr0           ; set TMR0 initial value to 100
008E 168B           00330         bsf      intcon, t0ie   ; timer interrupt enable
008F 178B           00331         bsf      intcon, gie    ; global interrupt enable
                    00332  
0090 01A1           00333         clrf     ctrsegn        ; clear received signs counter
0091 01A0           00334         clrf     swinput        ; clear input state indicators
0092 14A0           00335         bsf      swinput, swoff ; set default OFF state
0093 300F           00336         movlw    h'0f'          ; set HIGH and LOW mean time to 150 mS 
0094 009C           00337         movwf    tmed_on        ;  
0095 009D           00338         movwf    tmed_of
0096 3026           00339         movlw    h'26'          ; set max LOW time to 380 ms 
0097 009E           00340         movwf    tmax_of        ;
0098 30FF           00341         movlw    h'ff'          ; set min ON and OFF times to high-value
0099 0096           00342         movwf    tmin1_on       ; 
009A 0097           00343         movwf    tmin2_on       ;
009B 0098           00344         movwf    tmin3_on
009C 0099           00345         movwf    tmin1_of
009D 009A           00346         movwf    tmin2_of
009E 009B           00347         movwf    tmin3_of
009F 0192           00348         clrf     timeon         ; clear ON and OFF timers 
00A0 0193           00349         clrf     timeoff
00A1 0191           00350         clrf     plval          ; clear PLVAL and PLDATA
00A2 0190           00351         clrf     pldata
00A3 0194           00352         clrf     timchr1        ; clear received characters timers 
00A4 0195           00353         clrf     timchr2
00A5 019F           00354         clrf     speed
00A6 3008           00355         movlw    chrparm        ; set to CHRPARM the characters counter  
00A7 008E           00356         movwf    cntchar        ; to force count start
                    00357 
                    00358 ;       initialize LCD display
00A8 21A5           00359         call     inilcd
00A9 21C6           00360         call     panel
                    00361 
                    00362 ;       main loop
00AA                00363 main10
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00AA 2355           00364         call     del05          ; delay 5 mS
00AB                00365 main15
00AB 2355           00366         call     del05          ; delay 5 mS
00AC                00367 main20
00AC 1885           00368         btfsc    port_a, bit_P0 ; verify if P1 pressed
00AD 28AF           00369         goto     disparm        ; if so call parameters display routine  
00AE 28B3           00370         goto     main30
00AF                00371 disparm
00AF 2206           00372         call     displ
00B0                00373 dispar1
00B0 0064           00374         clrwdt                  ; watchdog clear
00B1 1885           00375         btfsc    port_a, bit_P0 ; display remains active as long as 
00B2 28B0           00376         goto     dispar1        ; P1 is pressed
                    00377 
                    00378 ;       ramo di decodifica CW
00B3                00379 main30
00B3 1E05           00380         btfss    port_a, bit_CW ; verify if signal HIGH on P0 
00B4 28C9           00381         goto     st_off         ; 
                    00382 
                    00383 ;       decoding branch for an HIGH input level 
00B5                00384 st_on
00B5 1820           00385         btfsc    swinput, swon  ; verify if input state changed 
00B6 28AB           00386         goto     main15         ; otherwise wait (goto loop)
00B7                00387 set_on
00B7 1420           00388         bsf      swinput, swon  ; if changed set SWON
00B8 10A0           00389         bcf      swinput, swoff ; reset SWOFF
00B9 0192           00390         clrf     timeon         ; and clear TIMEON  
00BA 22A0           00391         call     c_minof        ; refresh min OFF-state time
00BB 081D           00392         movf     tmed_of, w
00BC 0213           00393         subwf    timeoff, w     ; verify if OFF-state time greater
00BD 1C03           00394         btfss    status, c      ; inter-character time (tmed_of)
00BE 28AA           00395         goto     main10         ; if less re-cycle otherwise
00BF 20DF           00396         call     agspeed        ; update CW speed value 
00C0 20EC           00397         call     decod          ; decode and display received char
00C1 1D05           00398         btfss    port_a, bit_P1 ; verify if 'space' mode active
00C2 28AC           00399         goto     main20         ; otherwise re-cycle
00C3 081E           00400         movf     tmax_of, w
00C4 0213           00401         subwf    timeoff, w     ; verify if OFF-state greater  
00C5 1C03           00402         btfss    status, c      ; inter-word time (tmax_of)
00C6 28AC           00403         goto     main20         ; if less re-cycle
00C7 2323           00404         call     shift          ; otherwise insert a space
00C8 28AC           00405         goto     main20         ; and re-cycle  
                    00406 
                    00407 ;       decoding branch for a LOW input level
00C9                00408 st_off 
00C9 1CA0           00409         btfss    swinput, swoff ; verify if input state changed
00CA 28D4           00410         goto     set_off        ; if so set SWON
00CB 30C8           00411         movlw    d'200'         ; otherwise verify if OFF state
00CC 0213           00412         subwf    timeoff, w     ; duration greater 2 seconds
00CD 1C03           00413         btfss    status, c      ; if less (ris < 0) 
00CE 28AB           00414         goto     main15         ; re-cycle (wait)
00CF 0193           00415         clrf     timeoff        ; if greater 2 seconds (ris > 0) clear timeof 
00D0 20EC           00416         call     decod          ; decode last received character
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D1 3008           00417         movlw    chrparm        ; set characters counter  
00D2 008E           00418         movwf    cntchar        ; to force count start
00D3 28AC           00419         goto     main20         ; and re-cycle (wait)
00D4                00420 set_off
00D4 14A0           00421         bsf      swinput, swoff ; if input state changed set SWOFF
00D5 1020           00422         bcf      swinput, swon  ; reset SWON
00D6 0193           00423         clrf     timeoff        ; and clear TIMEOFF
00D7 2294           00424         call     c_minon        ; update min ON-state time
00D8 0AA1           00425         incf     ctrsegn, f     ; increment received signs counter
00D9 300F           00426         movlw    sgparm         ;
00DA 0221           00427         subwf    ctrsegn, w     ; verify if more than N signs received 
00DB 1803           00428         btfsc    status, c      ;  
00DC 2262           00429         call     ag_parm        ; if ctrsegn > N refresh calculation parameters
00DD 2230           00430         call     dec_sg         ; and received sign decoding
00DE 28AA           00431         goto     main10         ; at end re-cycle (wait)        
                    00432         
                    00433 ;       end main program
                    00434 
                    00435 ;       Speed rate update routine 
                    00436 ;
00DF                00437 agspeed
00DF 3008           00438         movlw    chrparm
00E0 020E           00439         subwf    cntchar, w     ; compare counter to the stated limit
00E1 1C03           00440         btfss    status, c      ; if counter >= limit : skip
00E2 28EA           00441         goto     agsped2        ; if counter < limite go to end    
00E3 018E           00442         clrf     cntchar        ; clear counter
00E4 0891           00443         movf     plval, f       ; verify PLVAL content
00E5 1903           00444         btfsc    status, z      ; skip if <> zero
00E6 28E8           00445         goto     agsped1        ; otherwise bypass speed calculation
00E7 2280           00446         call     cw_rate
00E8                00447 agsped1
00E8 0194           00448         clrf     timchr1
00E9 0195           00449         clrf     timchr2
00EA                00450 agsped2
Message[305]: Using default destination of 1 (file).
00EA 0A8E           00451         incf     cntchar
00EB 0008           00452         return  
                    00453 
                    00454 ;       Received character decoding routine
                    00455 ;
                    00456 ;       input :         
                    00457 ;       - PLVAL area containing significant bits map
                    00458 ;       - PLDATA area containing received values (0=dit,1=dash) 
                    00459 ;
                    00460 ;       output :
                    00461 ;       - decoded character in w_conv  
                    00462 ;       - decoded character on LCD display
                    00463 ;       
00EC                00464 decod
00EC 3020           00465         movlw    " "            ; space default character
00ED 00A4           00466         movwf    w_conv         ;
00EE 0891           00467         movf     plval, f       ; verify PLVAL content
00EF 1D03           00468         btfss    status, z      ; if not zero
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F0 28F4           00469         goto     decod1         ; go to decoding
00F1 2355           00470         call     del05          ; otherwise delay and return
00F2 2355           00471         call     del05          ;
00F3 0008           00472         return                  ; go to end routine     
00F4                00473 decod1  
00F4 3001           00474         movlw    d'1'           ; verify if plval = 1
00F5 0291           00475         subwf    plval, f       ;
00F6 1D03           00476         btfss    status, z      ;
00F7 28FA           00477         goto     decod3         ;
00F8 2121           00478         call     ric_a          ; and tab A search
00F9 291A           00479         goto     endecod
                    00480 
00FA                00481 decod3  
00FA 3002           00482         movlw    d'2'           ; verify if plval = 3
00FB 0291           00483         subwf    plval, f       ;
00FC 1D03           00484         btfss    status, z      ;
00FD 2900           00485         goto     decod7         ;
00FE 2137           00486         call     ric_b          ; and tab B search
00FF 291A           00487         goto     endecod
                    00488 
0100                00489 decod7  
0100 3004           00490         movlw    d'4'           ; verify if plval = 7
0101 0291           00491         subwf    plval, f       ;
0102 1D03           00492         btfss    status, z      ;
0103 2906           00493         goto     decod15        ;
0104 214D           00494         call     ric_c          ; and tab C search
0105 291A           00495         goto     endecod
                    00496         
0106                00497 decod15 
0106 3008           00498         movlw    d'8'           ; verify if plval = 15
0107 0291           00499         subwf    plval, f       ;
0108 1D03           00500         btfss    status, z      ;
0109 290C           00501         goto     decod31        ;
010A 2163           00502         call     ric_d          ; and tab D search
010B 291A           00503         goto     endecod
                    00504 
010C                00505 decod31 
010C 3010           00506         movlw    d'16'          ; verify if plval = 31
010D 0291           00507         subwf    plval, f       ;
010E 1D03           00508         btfss    status, z      ;
010F 2912           00509         goto     decod63        ;
0110 2179           00510         call     ric_e          ; and tab E search
0111 291A           00511         goto     endecod
                    00512 
0112                00513 decod63 
0112 3020           00514         movlw    d'32'          ; verify if plval = 63
0113 0291           00515         subwf    plval, f       ;
0114 1D03           00516         btfss    status, z      ;
0115 2918           00517         goto     nodecod        ;
0116 218F           00518         call     ric_f          ; and tab F search
0117 291A           00519         goto     endecod
                    00520 
0118                00521 nodecod
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0118 302A           00522         movlw    "*"
0119 00A4           00523         movwf    w_conv         ; 
                    00524 
011A                00525 endecod
011A 0191           00526         clrf     plval          ; clear PLVAL e PLDATA
011B 0190           00527         clrf     pldata
011C 2323           00528         call     shift          ; shift display area
011D 0824           00529         movf     w_conv, w      ; move decoded char to lcd_16
011E 00B9           00530         movwf    lcd_16         ;
011F 2308           00531         call     sendlcd        ; send area to display
                    00532 
0120 0008           00533         return
                    00534 
                    00535 ;       Tab search subroutines 
                    00536 ;
                    00537 ;       input :         
                    00538 ;       - PLDATA area containing received values (0=dit,1=dash) 
                    00539 ;
                    00540 ;       output :
                    00541 ;       - decoded character in w_conv  
                    00542 ;       
0121                00543 ric_a
0121 0103           00544         clrw                    ; initial offset = 0
0122                00545 ric_a1
0122 00A5           00546         movwf    w_count        ; save current offset
0123 2005           00547         call     tab_a          ; search entry at offset W
0124 00A6           00548         movwf    w_num1         ; save found map 
0125 30FF           00549         movlw    b'11111111'    ; verify if tab bottom reached
0126 0226           00550         subwf    w_num1, w      ;
0127 1D03           00551         btfss    status, z      ; if so enforce "*" in w_conv
0128 292B           00552         goto     ric_a2         ; otherwise verify the map 
0129 302A           00553         movlw    "*"            ;
012A 2935           00554         goto     ric_a4         ;
012B                00555 ric_a2
012B 0826           00556         movf     w_num1, w      ; restore in W the map
012C 0210           00557         subwf    pldata, w      ; and verify if matches to PLDATA
012D 1903           00558         btfsc    status, z      ; if not re-cycle
012E 2932           00559         goto     ric_a3
012F 0825           00560         movf     w_count, w     ; restore current offset to W
0130 3E02           00561         addlw    d'2'           ; 2 locations increment
0131 2922           00562         goto     ric_a1         ; and re-cycle
0132                00563 ric_a3
0132 0825           00564         movf     w_count, w     ; if map matches
0133 3E01           00565         addlw    d'1'           ; 1 location increment
0134 2005           00566         call     tab_a          ; and get corresponding character
0135                00567 ric_a4
0135 00A4           00568         movwf    w_conv
0136 0008           00569         return
                    00570 
0137                00571 ric_b
0137 0103           00572         clrw                    ; initial offset = 0
0138                00573 ric_b1
0138 00A5           00574         movwf    w_count        ; save current offset
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0139 200C           00575         call     tab_b          ; search entry at offset W
013A 00A6           00576         movwf    w_num1         ; save found map 
013B 30FF           00577         movlw    b'11111111'    ; verify if tab bottom reached
013C 0226           00578         subwf    w_num1, w      ;
013D 1D03           00579         btfss    status, z      ; if so enforce "*" in w_conv
013E 2941           00580         goto     ric_b2         ; otherwise verify the map
013F 302A           00581         movlw    "*"            ;
0140 294B           00582         goto     ric_b4         ;
0141                00583 ric_b2
0141 0826           00584         movf     w_num1, w      ; restore in W the map
0142 0210           00585         subwf    pldata, w      ; and verify if matches to PLDATA
0143 1903           00586         btfsc    status, z      ; if not re-cycle
0144 2948           00587         goto     ric_b3
0145 0825           00588         movf     w_count, w     ; restore current offset to W
0146 3E02           00589         addlw    d'2'           ; 2 locations increment
0147 2938           00590         goto     ric_b1         ; and re-cycle
0148                00591 ric_b3
0148 0825           00592         movf     w_count, w     ; if map matches
0149 3E01           00593         addlw    d'1'           ; 1 location increment
014A 200C           00594         call     tab_b          ; and get corresponding character
014B                00595 ric_b4
014B 00A4           00596         movwf    w_conv
014C 0008           00597         return
                    00598 
014D                00599 ric_c
014D 0103           00600         clrw                    ; initial offset = 0
014E                00601 ric_c1
014E 00A5           00602         movwf    w_count        ; save current offset
014F 2017           00603         call     tab_c          ; search entry at offset W
0150 00A6           00604         movwf    w_num1         ; save found map 
0151 30FF           00605         movlw    b'11111111'    ; verify if tab bottom reached
0152 0226           00606         subwf    w_num1, w      ;
0153 1D03           00607         btfss    status, z      ; if so enforce "*" in w_conv
0154 2957           00608         goto     ric_c2         ; otherwise verify the map
0155 302A           00609         movlw    "*"            ;
0156 2961           00610         goto     ric_c4         ;
0157                00611 ric_c2
0157 0826           00612         movf     w_num1, w      ; restore in W the map
0158 0210           00613         subwf    pldata, w      ; and verify if matches to PLDATA
0159 1903           00614         btfsc    status, z      ; if not re-cycle
015A 295E           00615         goto     ric_c3
015B 0825           00616         movf     w_count, w     ; restore current offset to W
015C 3E02           00617         addlw    d'2'           ; 2 locations increment
015D 294E           00618         goto     ric_c1         ; and re-cycle
015E                00619 ric_c3
015E 0825           00620         movf     w_count, w     ; if map matches
015F 3E01           00621         addlw    d'1'           ; 1 location increment
0160 2017           00622         call     tab_c          ; and get corresponding character
0161                00623 ric_c4
0161 00A4           00624         movwf    w_conv
0162 0008           00625         return
                    00626 
0163                00627 ric_d
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0163 0103           00628         clrw                    ; initial offset = 0
0164                00629 ric_d1
0164 00A5           00630         movwf    w_count        ; save current offset
0165 202A           00631         call     tab_d          ; search entry at offset W
0166 00A6           00632         movwf    w_num1         ; save found map 
0167 30FF           00633         movlw    b'11111111'    ; verify if tab bottom reached
0168 0226           00634         subwf    w_num1, w      ;
0169 1D03           00635         btfss    status, z      ; if so enforce "*" in w_conv
016A 296D           00636         goto     ric_d2         ; otherwise verify the map
016B 302A           00637         movlw    "*"            ;
016C 2977           00638         goto     ric_d4         ;
016D                00639 ric_d2
016D 0826           00640         movf     w_num1, w      ; restore in W the map
016E 0210           00641         subwf    pldata, w      ; and verify if matches to PLDATA
016F 1903           00642         btfsc    status, z      ; if not re-cycle
0170 2974           00643         goto     ric_d3
0171 0825           00644         movf     w_count, w     ; restore current offset to W
0172 3E02           00645         addlw    d'2'           ; 2 locations increment
0173 2964           00646         goto     ric_d1         ; and re-cycle
0174                00647 ric_d3
0174 0825           00648         movf     w_count, w     ; if map matches
0175 3E01           00649         addlw    d'1'           ; 1 location increment
0176 202A           00650         call     tab_d          ; and get corresponding character
0177                00651 ric_d4
0177 00A4           00652         movwf    w_conv
0178 0008           00653         return
                    00654 
0179                00655 ric_e
0179 0103           00656         clrw                    ; initial offset = 0
017A                00657 ric_e1
017A 00A5           00658         movwf    w_count        ; save current offset
017B 2045           00659         call     tab_e          ; search entry at offset W
017C 00A6           00660         movwf    w_num1         ; save found map 
017D 30FF           00661         movlw    b'11111111'    ; verify if tab bottom reached
017E 0226           00662         subwf    w_num1, w      ;
017F 1D03           00663         btfss    status, z      ; if so enforce "*" in w_conv
0180 2983           00664         goto     ric_e2         ; otherwise verify the map
0181 302A           00665         movlw    "*"            ;
0182 298D           00666         goto     ric_e4         ;
0183                00667 ric_e2
0183 0826           00668         movf     w_num1, w      ; restore in W the map
0184 0210           00669         subwf    pldata, w      ; and verify if matches to PLDATA
0185 1903           00670         btfsc    status, z      ; if not re-cycle
0186 298A           00671         goto     ric_e3
0187 0825           00672         movf     w_count, w     ; restore current offset to W
0188 3E02           00673         addlw    d'2'           ; 2 locations increment
0189 297A           00674         goto     ric_e1         ; and re-cycle
018A                00675 ric_e3
018A 0825           00676         movf     w_count, w     ; if map matches
018B 3E01           00677         addlw    d'1'           ; 1 location increment
018C 2045           00678         call     tab_e          ; and get corresponding character
018D                00679 ric_e4
018D 00A4           00680         movwf    w_conv
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

018E 0008           00681         return
                    00682 
018F                00683 ric_f
018F 0103           00684         clrw                    ; initial offset = 0
0190                00685 ric_f1
0190 00A5           00686         movwf    w_count        ; save current offset
0191 205E           00687         call     tab_f          ; search entry at offset W
0192 00A6           00688         movwf    w_num1         ; save found map 
0193 30FF           00689         movlw    b'11111111'    ; verify if tab bottom reached
0194 0226           00690         subwf    w_num1, w      ;
0195 1D03           00691         btfss    status, z      ; if so enforce "*" in w_conv
0196 2999           00692         goto     ric_f2         ; otherwise verify the map
0197 302A           00693         movlw    "*"            ;
0198 29A3           00694         goto     ric_f4         ;
0199                00695 ric_f2
0199 0826           00696         movf     w_num1, w      ; restore in W the map
019A 0210           00697         subwf    pldata, w      ; and verify if matches to PLDATA
019B 1903           00698         btfsc    status, z      ; if not re-cycle
019C 29A0           00699         goto     ric_f3
019D 0825           00700         movf     w_count, w     ; restore current offset to W
019E 3E02           00701         addlw    d'2'           ; 2 locations increment
019F 2990           00702         goto     ric_f1         ; and re-cycle
01A0                00703 ric_f3
01A0 0825           00704         movf     w_count, w     ; if map matches
01A1 3E01           00705         addlw    d'1'           ; 1 location increment
01A2 205E           00706         call     tab_f          ; and get corresponding character
01A3                00707 ric_f4
01A3 00A4           00708         movwf    w_conv
01A4 0008           00709         return
                    00710                  
                    00711 ;     LCD display initialization routine
                    00712 ;         - 2 raw 5x7
                    00713 ;         - 4 bit operation
                    00714 ;         - no cursor           
01A5                00715 inilcd
                    00716 ;       movlw    b'00110001'    ; 8 bits initialization
01A5 3038           00717         movlw    b'00111000'    ; 8 bits initialization
01A6 0086           00718         movwf    port_b         
01A7 1186           00719         bcf      port_b,bit_EN       ; reset enable
01A8 234B           00720         call     del50
                    00721 ;       movlw    b'00110001'    ; repeat 8 bits initialization
01A9 3038           00722         movlw    b'00111000'    ; repeat 8 bits initialization
01AA 0086           00723         movwf    port_b         
01AB 1186           00724         bcf      port_b,bit_EN       ; reset enable
01AC 234B           00725         call     del50
                    00726 ;       movlw    b'00110001'    ; repeat 8 bits initialization
01AD 3038           00727         movlw    b'00111000'    ; repeat 8 bits initialization
01AE 0086           00728         movwf    port_b         
01AF 1186           00729         bcf      port_b,bit_EN       ; reset enable
01B0 234B           00730         call     del50
                    00731 ;       movlw    b'00100001'    ; 4 bits initialization
01B1 3028           00732         movlw    b'00101000'    ; 4 bits initialization
01B2 0086           00733         movwf    port_b         
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01B3 1186           00734         bcf      port_b,bit_EN       ; reset enable
01B4 234B           00735         call     del50
                    00736 
01B5 3028           00737         movlw    b'00101000'    ; set two 5x7 line
01B6 008F           00738         movwf    bytelcd         
01B7 2331           00739         call     cmdlcd         ; send command
01B8 234B           00740         call     del50
                    00741 
01B9 3006           00742         movlw    b'00000110'    ; set LCD mode 
01BA 008F           00743         movwf    bytelcd        ; cursor increment/no shift
01BB 2331           00744         call     cmdlcd         ; send command
01BC 234B           00745         call     del50
                    00746 
01BD 300C           00747         movlw    b'00001100'    ; display on / cursor off
01BE 008F           00748         movwf    bytelcd         
01BF 2331           00749         call     cmdlcd         ; send command
01C0 234B           00750         call     del50
                    00751 
01C1 3001           00752         movlw    b'00000001'    ; clear LCD / home cursor
01C2 008F           00753         movwf    bytelcd         
01C3 2331           00754         call     cmdlcd         ; send command
01C4 234B           00755         call     del50
01C5                00756 endlcd
01C5 0008           00757         return
                    00758 
                    00759 ;       Initial text display routine 
                    00760 ;
01C6                00761 panel
01C6 3020           00762         movlw    " "            ; display " CW "
01C7 00AA           00763         movwf    lcd_01
01C8 3043           00764         movlw    "C"
01C9 00AB           00765         movwf    lcd_02
01CA 3057           00766         movlw    "W"
01CB 00AC           00767         movwf    lcd_03
01CC 3020           00768         movlw    " "
01CD 00AD           00769         movwf    lcd_04
01CE 3044           00770         movlw    "D"            ; display "Deco"
01CF 00AE           00771         movwf    lcd_05
01D0 3065           00772         movlw    "e"
01D1 00AF           00773         movwf    lcd_06
01D2 3063           00774         movlw    "c"
01D3 00B0           00775         movwf    lcd_07
01D4 306F           00776         movlw    "o"
01D5 00B1           00777         movwf    lcd_08
01D6 3064           00778         movlw    "d"            ; display "der "
01D7 00B2           00779         movwf    lcd_09
01D8 3065           00780         movlw    "e"
01D9 00B3           00781         movwf    lcd_10
01DA 3072           00782         movlw    "r"
01DB 00B4           00783         movwf    lcd_11
01DC 3020           00784         movlw    " "
01DD 00B5           00785         movwf    lcd_12
01DE 3020           00786         movlw    " "            ; display "  -> "
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01DF 00B6           00787         movwf    lcd_13
01E0 3020           00788         movlw    " "
01E1 00B7           00789         movwf    lcd_14
01E2 307E           00790         movlw    0x7e
01E3 00B8           00791         movwf    lcd_15
01E4 3020           00792         movlw    " "
01E5 00B9           00793         movwf    lcd_16
01E6 2308           00794         call     sendlcd
01E7                00795 endpanl
01E7 0008           00796         return
                    00797 
                    00798 ;       Conversion routine from hex (1 byte) to ascii (3 bytes)
                    00799 ;
                    00800 ;       input :         - hex value in w_num4
                    00801 ;
                    00802 ;       output :        - ascii value on 3 bytes starting from w_num1  
                    00803 ;       
01E8                00804 convert
01E8 0829           00805         movf     w_num4, w 
01E9 00A4           00806         movwf    w_conv         ; move hex byte to working area
01EA 01A5           00807         clrf     w_count        ; clear digit counter   
01EB 3064           00808         movlw    d'100'         ; set hundred in W
01EC                00809 conve01
01EC 02A4           00810         subwf    w_conv, f      ; subtract 100 from w_conv
01ED 1803           00811         btfsc    status, c      ; if negative
01EE 29F1           00812         goto     conve02        ; restore last total
01EF 07A4           00813         addwf    w_conv, f      ; and exit
01F0 29F3           00814         goto     conve10        ; otherwise ( >=0 )     
01F1                00815 conve02                         ; increment hundred counter
01F1 0AA5           00816         incf     w_count, f     ; and loop
01F2 29EC           00817         goto     conve01        
                    00818 
01F3                00819 conve10
01F3 0825           00820         movf     w_count, w     ; 
01F4 3830           00821         iorlw    h'30'          ; set numeric half digit 
01F5 00A6           00822         movwf    w_num1         ; move ascii character to first output byte 
01F6 300A           00823         movlw    d'10'          ; set ten in W
01F7 01A5           00824         clrf     w_count        ; clear digit counter   
01F8                00825 conve11
01F8 02A4           00826         subwf    w_conv, f      ; subtract 10 from w_conv
01F9 1803           00827         btfsc    status, c      ; if negative
01FA 29FD           00828         goto     conve12        ; restore last total
01FB 07A4           00829         addwf    w_conv, f      ; and exit
01FC 29FF           00830         goto     conve20        ; otherwise     
01FD                00831 conve12                         ; increment ten counter
01FD 0AA5           00832         incf     w_count, f     ; and loop
01FE 29F8           00833         goto     conve11        
                    00834 
01FF                00835 conve20 
01FF 0825           00836         movf     w_count, w     ; 
0200 3830           00837         iorlw    h'30'          ; set numeric half digit
0201 00A7           00838         movwf    w_num2         ; move ascii character to second output byte
0202 0824           00839         movf     w_conv, w      ; 
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0203 3830           00840         iorlw    h'30'          ; set unit numeric half digit
0204 00A8           00841         movwf    w_num3         ; move ascii character to third output byte
0205                00842 endconv
0205 0008           00843         return
                    00844 
                    00845 ;       Speed rate display routine  
                    00846 ;
                    00847 ;       input :         - speed in chars / minute 
                    00848 ;
                    00849 ;       output :        - display on LCD module  
                    00850 ;       
0206                00851 displ
0206 3020           00852         movlw    " "            
0207 00AA           00853         movwf    lcd_01
0208 00AB           00854         movwf    lcd_02
0209 081F           00855         movf     speed, w       ; display "nnn"
020A 00A9           00856         movwf    w_num4
020B 21E8           00857         call     convert
020C 0826           00858         movf     w_num1, w
020D 390F           00859         andlw    h'0f'
020E 1D03           00860         btfss    status, z      ; if first digit zero set " "
020F 2A12           00861         goto     displ1  
0210 3020           00862         movlw    " "
0211 00A6           00863         movwf    w_num1
0212                00864 displ1
0212 0826           00865         movf     w_num1, w
0213 00AC           00866         movwf    lcd_03
0214 0827           00867         movf     w_num2, w
0215 00AD           00868         movwf    lcd_04
0216 0828           00869         movf     w_num3, w
0217 00AE           00870         movwf    lcd_05
0218 3020           00871         movlw    " "            ; display " cha"
0219 00AF           00872         movwf    lcd_06
021A 3063           00873         movlw    "c"
021B 00B0           00874         movwf    lcd_07
021C 3068           00875         movlw    "h"
021D 00B1           00876         movwf    lcd_08
021E 3061           00877         movlw    "a"
021F 00B2           00878         movwf    lcd_09
0220 3072           00879         movlw    "r"            ; display "r/mi"
0221 00B3           00880         movwf    lcd_10
0222 302F           00881         movlw    "/"
0223 00B4           00882         movwf    lcd_11
0224 306D           00883         movlw    "m"
0225 00B5           00884         movwf    lcd_12
0226 3069           00885         movlw    "i"
0227 00B6           00886         movwf    lcd_13
0228 306E           00887         movlw    "n"            ; display "n  "
0229 00B7           00888         movwf    lcd_14
022A 3020           00889         movlw    " "
022B 00B8           00890         movwf    lcd_15
022C 3020           00891         movlw    " "
022D 00B9           00892         movwf    lcd_16
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

022E 2308           00893         call     sendlcd
022F 0008           00894         return
                    00895 
                    00896 ;       Received sign decoding routine 
                    00897 ;
                    00898 ;       input : 
                    00899 ;       - received signal duration      
                    00900 ;       - PLVAL area containing map of received signs
                    00901 ;       - PLDATA area containing received values (0=punto, 1=linea) 
                    00902 ;
                    00903 ;       output :
                    00904 ;       - updated PLVAL area  
                    00905 ;       - updated PLDATA area
                    00906 ;       
0230                00907 dec_sg
0230 1811           00908         btfsc    plval, 0       ; verify if plval = 00000000
0231 2A38           00909         goto     dec_sg1        ;
0232 1411           00910         bsf      plval, 0       ; first sign of the received character
0233 081C           00911         movf     tmed_on, w     ;
0234 0212           00912         subwf    timeon, w      ; verify if duration > mean ON time (dit)
0235 1803           00913         btfsc    status, c      ;
0236 1410           00914         bsf      pldata, 0      ; greater duration (dash)
0237 2A61           00915         goto     end_sg
0238                00916 dec_sg1
0238 1891           00917         btfsc    plval, 1       ; verify if plval = 00000001
0239 2A40           00918         goto     dec_sg2        ;
023A 1491           00919         bsf      plval, 1       ; second sign of the received character
023B 081C           00920         movf     tmed_on, w     ;
023C 0212           00921         subwf    timeon, w      ; verify if duration > mean ON time (dit)
023D 1803           00922         btfsc    status, c      ;
023E 1490           00923         bsf      pldata, 1      ; greater duration (dash)
023F 2A61           00924         goto     end_sg 
0240                00925 dec_sg2
0240 1911           00926         btfsc    plval, 2       ; verify if plval = 00000011
0241 2A48           00927         goto     dec_sg3        ;
0242 1511           00928         bsf      plval, 2       ; third sign of the received character
0243 081C           00929         movf     tmed_on, w     ;
0244 0212           00930         subwf    timeon, w      ; verify if duration > mean ON time (dit)
0245 1803           00931         btfsc    status, c      ;
0246 1510           00932         bsf      pldata, 2      ; greater duration (dash)
0247 2A61           00933         goto     end_sg
0248                00934 dec_sg3
0248 1991           00935         btfsc    plval, 3       ; verify if plval = 00000111
0249 2A50           00936         goto     dec_sg4        ;
024A 1591           00937         bsf      plval, 3       ; fourth sign of the received character
024B 081C           00938         movf     tmed_on, w     ;
024C 0212           00939         subwf    timeon, w      ; verify if duration > mean ON time (dit)
024D 1803           00940         btfsc    status, c      ;
024E 1590           00941         bsf      pldata, 3      ; greater duration (dash)
024F 2A61           00942         goto     end_sg         
0250                00943 dec_sg4
0250 1A11           00944         btfsc    plval, 4       ; verify if plval = 00001111
0251 2A58           00945         goto     dec_sg5        ;
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0252 1611           00946         bsf      plval, 4       ; fifth sign of the received character
0253 081C           00947         movf     tmed_on, w     ;
0254 0212           00948         subwf    timeon, w      ; verify if duration > mean ON time (dit)
0255 1803           00949         btfsc    status, c      ;
0256 1610           00950         bsf      pldata, 4      ; greater duration (dash)
0257 2A61           00951         goto     end_sg
0258                00952 dec_sg5
0258 1A91           00953         btfsc    plval, 5       ; verify if plval = 00011111
0259 2A60           00954         goto     dec_sg6        ;
025A 1691           00955         bsf      plval, 5       ; sixth sign of the received character
025B 081C           00956         movf     tmed_on, w     ;
025C 0212           00957         subwf    timeon, w      ; verify if duration > mean ON time (dit)
025D 1803           00958         btfsc    status, c      ;
025E 1690           00959         bsf      pldata, 5      ; greater duration (dash)
025F 2A61           00960         goto     end_sg 
0260                00961 dec_sg6
0260 1711           00962         bsf      plval, 6       ; if more than six signs set a default          
0261                00963 end_sg  
0261 0008           00964         return
                    00965 
                    00966 ;       Working parameters calculation routine
                    00967 ;       
                    00968 ;       tmed_on 
                    00969 ;       tmed_of    
                    00970 ;       tmax_of      
                    00971 ;
0262                00972 ag_parm
                    00973 ;       tmed_on computing
0262 0818           00974         movf     tmin3_on, w
0263 00A7           00975         movwf    w_num2         ; multiplicand in w_num2
0264 3002           00976         movlw    d'2'
0265 00A8           00977         movwf    w_num3         ; 2 in w_num3
0266 22EA           00978         call     moltip
0267 0827           00979         movf     w_num2, w
0268 009C           00980         movwf    tmed_on
                    00981 
                    00982 ;       tmed_of computing
0269 081B           00983         movf     tmin3_of, w
026A 00A7           00984         movwf    w_num2         ; multiplicand in w_num2
026B 3002           00985         movlw    d'2'
026C 00A8           00986         movwf    w_num3         ; 2 in w_num3
026D 22EA           00987         call     moltip
026E 0827           00988         movf     w_num2, w
026F 009D           00989         movwf    tmed_of
                    00990 
                    00991 ;       tmax_of computing
0270 081B           00992         movf     tmin3_of, w
0271 00A7           00993         movwf    w_num2         ; multiplicand in w_num2
0272 3005           00994         movlw    d'5'
0273 00A8           00995         movwf    w_num3         ; 5 in w_num3
0274 22EA           00996         call     moltip
0275 0827           00997         movf     w_num2, w      ; compute tmax_of = tmin_of * 5
0276 009E           00998         movwf    tmax_of
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00999 
0277 01A1           01000         clrf     ctrsegn
0278 30FF           01001         movlw    0xff
0279 0096           01002         movwf    tmin1_on
027A 0097           01003         movwf    tmin2_on
027B 0098           01004         movwf    tmin3_on
027C 0099           01005         movwf    tmin1_of
027D 009A           01006         movwf    tmin2_of
027E 009B           01007         movwf    tmin3_of
027F 0008           01008         return
                    01009 
                    01010 ;       Speed rate calculation routine
                    01011 ;       
                    01012 ;       is applied the formula V = (600 x chrparm)/ timchr1  
                    01013 ;       where chrparm is the provided number of characters
                    01014 ;       timchr1 is the chars packet duration in sec/10         
                    01015 ;
0280                01016 cw_rate
0280 300A           01017         movlw    d'10'
0281 00A7           01018         movwf    w_num2
0282 3008           01019         movlw    chrparm
0283 00A8           01020         movwf    w_num3         ; compute chrparm x 10
0284 22EA           01021         call     moltip
0285 303C           01022         movlw    d'60'
0286 00A8           01023         movwf    w_num3         ; compute chrparm x 10 x 60
0287 22EA           01024         call     moltip
0288 0814           01025         movf     timchr1, w     
0289 00A8           01026         movwf    w_num3         ; set the divisor to timchr1
028A 22F7           01027         call     dividi
028B 0827           01028         movf     w_num2, w
028C 0727           01029         addwf    w_num2, w      ; multiply remainder x 2
028D 0214           01030         subwf    timchr1, w     ; compare timchr1 to (remainder x 2)
028E 1803           01031         btfsc    status, c      ;
028F 2A91           01032         goto     cw_rate1       ; if result > 0 there is no rounding
0290 0AA6           01033         incf     w_num1, f      ; otherwise rounding to the upper digit  
0291                01034 cw_rate1
0291 0826           01035         movf     w_num1, w
0292 009F           01036         movwf    speed
0293 0008           01037         return
                    01038 
                    01039 ;       Minimum ON time calculation routine.
                    01040 ;       stores the three lowest measured values 
                    01041 ;       in the observation interval (sgparm = received signs)    
0294                01042 c_minon
0294 3003           01043         movlw    d'3'           ; verify if timeon < 30 ms
0295 0212           01044         subwf    timeon, w      ; if so no computing is done
0296 1C03           01045         btfss    status, c      ; 
0297 2A9F           01046         goto     end_mon        
0298 0812           01047         movf     timeon, w      ; 
0299 0218           01048         subwf    tmin3_on, w    ; calculate tmin3_on - timeon
029A 1C03           01049         btfss    status, c      ;
029B 2A9F           01050         goto     end_mon        ; if result < 0 exit
029C 0812           01051         movf     timeon, w      ; otherwise substitute for tmin3_on
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

029D 0098           01052         movwf    tmin3_on       ;
029E 22AC           01053         call     ord_on         ; and tabel reorg 
029F                01054 end_mon
029F 0008           01055         return  
                    01056 
                    01057 ;       Minimum OFF time calculation routine.
                    01058 ;       stores the three lowest measured values 
                    01059 ;       in the observation interval (sgparm = received signs) 
02A0                01060 c_minof
02A0 3003           01061         movlw    d'3'           ; verify if timeoff < 30 ms
02A1 0213           01062         subwf    timeoff, w     ; if so no computing is done
02A2 1C03           01063         btfss    status, c      ; 
02A3 2AAB           01064         goto     end_mof        ;
02A4 0813           01065         movf     timeoff, w     ; 
02A5 021B           01066         subwf    tmin3_of, w    ; calculate tmin3_of - timeoff
02A6 1C03           01067         btfss    status, c      ;
02A7 2AAB           01068         goto     end_mof        ; if result < 0 exit
02A8 0813           01069         movf     timeoff, w     ; otherwise substitute for tmin3_of
02A9 009B           01070         movwf    tmin3_of       ;
02AA 22CB           01071         call     ord_of         ; and tabel reorg
02AB                01072 end_mof
02AB 0008           01073         return  
                    01074 
                    01075 ;       Ascending sort routine for
                    01076 ;       tmin1_on, tmin2_on, tmin3_on
02AC                01077 ord_on
02AC 0817           01078         movf     tmin2_on, w    ; 
02AD 0218           01079         subwf    tmin3_on, w    ; calculate tmin3_on - tmin2_on
02AE 1803           01080         btfsc    status, c      ;
02AF 2AB6           01081         goto     ord_on1        ; if result > 0 go on
02B0 0817           01082         movf     tmin2_on, w    ; otherwise swaps tmin2_on and tmin3_on 
02B1 00A6           01083         movwf    w_num1         ;
02B2 0818           01084         movf     tmin3_on, w    ;  
02B3 0097           01085         movwf    tmin2_on       ;
02B4 0826           01086         movf     w_num1, w      ; 
02B5 0098           01087         movwf    tmin3_on       ;
02B6                01088 ord_on1
02B6 0816           01089         movf     tmin1_on, w    ; 
02B7 0217           01090         subwf    tmin2_on, w    ; calculat tmin2_on - tmin1_on
02B8 1803           01091         btfsc    status, c      ;
02B9 2ACA           01092         goto     en_ordn        ; if result > 0 go to end sort
02BA 0816           01093         movf     tmin1_on, w    ; otherwise swaps tmin1_on and tmin2_on 
02BB 00A6           01094         movwf    w_num1         ;
02BC 0817           01095         movf     tmin2_on, w    ;  
02BD 0096           01096         movwf    tmin1_on       ;
02BE 0826           01097         movf     w_num1, w      ; 
02BF 0097           01098         movwf    tmin2_on       ;
02C0                01099 ord_on2
02C0 0817           01100         movf     tmin2_on, w    ; 
02C1 0218           01101         subwf    tmin3_on, w    ; calculate tmin3_on - tmin2_on
02C2 1803           01102         btfsc    status, c      ;
02C3 2ACA           01103         goto     en_ordn        ; if result > 0 go to end sort
02C4 0817           01104         movf     tmin2_on, w    ; otherwise swaps tmin2_on and tmin3_on 
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02C5 00A6           01105         movwf    w_num1         ;
02C6 0818           01106         movf     tmin3_on, w    ;  
02C7 0097           01107         movwf    tmin2_on       ;
02C8 0826           01108         movf     w_num1, w      ; 
02C9 0098           01109         movwf    tmin3_on       ;
02CA                01110 en_ordn
02CA 0008           01111         return
                    01112 
                    01113 ;       Ascending sort routine for
                    01114 ;       tmin1_of, tmin2_of, tmin3_of
02CB                01115 ord_of
02CB 081A           01116         movf     tmin2_of, w    ; 
02CC 021B           01117         subwf    tmin3_of, w    ; calculate tmin3_of - tmin2_of
02CD 1803           01118         btfsc    status, c      ;
02CE 2AD5           01119         goto     ord_of1        ; if result > 0 go on
02CF 081A           01120         movf     tmin2_of, w    ; otherwise swaps tmin2_of and tmin3_of 
02D0 00A6           01121         movwf    w_num1         ;
02D1 081B           01122         movf     tmin3_of, w    ;  
02D2 009A           01123         movwf    tmin2_of       ;
02D3 0826           01124         movf     w_num1, w      ; 
02D4 009B           01125         movwf    tmin3_of       ;
02D5                01126 ord_of1
02D5 0819           01127         movf     tmin1_of, w    ; 
02D6 021A           01128         subwf    tmin2_of, w    ; calculate tmin2_of - tmin1_of
02D7 1803           01129         btfsc    status, c      ;
02D8 2AE9           01130         goto     en_ordf        ; if result > 0 go to end sort
02D9 0819           01131         movf     tmin1_of, w    ; otherwise swaps tmin1_of and tmin2_of 
02DA 00A6           01132         movwf    w_num1         ;
02DB 081A           01133         movf     tmin2_of, w    ;  
02DC 0099           01134         movwf    tmin1_of       ;
02DD 0826           01135         movf     w_num1, w      ; 
02DE 009A           01136         movwf    tmin2_of       ;
02DF                01137 ord_of2
02DF 081A           01138         movf     tmin2_of, w    ; 
02E0 021B           01139         subwf    tmin3_of, w    ; calculate tmin3_of - tmin2_of
02E1 1803           01140         btfsc    status, c      ;
02E2 2AE9           01141         goto     en_ordf        ; if result > 0 go to end sort
02E3 081A           01142         movf     tmin2_of, w    ; otherwise swaps tmin2_on and tmin3_on 
02E4 00A6           01143         movwf    w_num1         ;
02E5 081B           01144         movf     tmin3_of, w    ;  
02E6 009A           01145         movwf    tmin2_of       ;
02E7 0826           01146         movf     w_num1, w      ; 
02E8 009B           01147         movwf    tmin3_of       ;
02E9                01148 en_ordf
02E9 0008           01149         return  
                    01150 
                    01151 ;       Multiply routine between two 1 byte numbers
                    01152 ;
                    01153 ;       input :
                    01154 ;               multiplicand in w_num2
                    01155 ;               multiplyer in w_num3
                    01156 ;
                    01157 ;       output :
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01158 ;               product in w_num1 + w_num2      
02EA                01159 moltip
                    01160 
02EA 01A6           01161         clrf     w_num1         ; clear first product digit
02EB 0827           01162         movf     w_num2, w      ;
02EC 00A5           01163         movwf    w_count        ; save multiplicand in w_count
02ED 03A8           01164         decf     w_num3, f      ; 
02EE                01165 moltip1         
02EE 0064           01166         clrwdt                  ; watchdog clear
02EF 0825           01167         movf     w_count, w     ; sum multiplicand to the result
02F0 07A7           01168         addwf    w_num2, f      ; of the previous sum 
02F1 1C03           01169         btfss    status, c      ;
02F2 2AF4           01170         goto     moltip2        ; if there is a carry increment the
02F3 0AA6           01171         incf     w_num1, f      ; first product digit
02F4                01172 moltip2
02F4 0BA8           01173         decfsz   w_num3, f      ; otherwise decrement multiplyer
02F5 2AEE           01174         goto     moltip1        ; and re-cycle until zero       
02F6                01175 endmolt 
02F6 0008           01176         return
                    01177 
                    01178 ;       Divide routine between a two bytes dividend 
                    01179 ;       and a 1 byte divisor 
                    01180 ;       Quotient must have only a digit
                    01181 ;
                    01182 ;       input :
                    01183 ;               dividend in w_num1 + w_num2
                    01184 ;               divisor in w_num3
                    01185 ;
                    01186 ;       output :
                    01187 ;               quotient in w_num1
                    01188 ;               remainder in w_num2     
02F7                01189 dividi
02F7 01A5           01190         clrf     w_count        ; initial quotient clear
02F8                01191 dividi1                         ; 
02F8 0064           01192         clrwdt                  ; watchdog clear                
02F9 0AA5           01193         incf     w_count, f     ; increment quotient at every re-cycle  
02FA 0828           01194         movf     w_num3, w      ; subtract divisor from result obtained
02FB 02A7           01195         subwf    w_num2, f      ; by the previous subtraction
02FC 1803           01196         btfsc    status, c      ; if negative carry
02FD 2AF8           01197         goto     dividi1        ; decrement fist dividend digit
02FE 3001           01198         movlw    d'1'           ; 
02FF 02A6           01199         subwf    w_num1, f
0300 1803           01200         btfsc    status,c       ; re-cycle until first digit 
0301 2AF8           01201         goto     dividi1        ; becomes negative and
0302 0828           01202         movf     w_num3, w      ; at end restore last 
0303 07A7           01203         addwf    w_num2, f      ; subtraction, putting the remainder
0304 03A5           01204         decf     w_count, f     ; in w_num2
0305 0825           01205         movf     w_count, w     ; then decrements quotient
0306 00A6           01206         movwf    w_num1         ; and store it in w_num1
0307                01207 enddiv
0307 0008           01208         return
                    01209 
                    01210         
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01211 ;       LCD display routine 
                    01212 ;
                    01213 ;       input :         - string to display, starting at w_num1
                    01214 ;                       - characters number to display in w_count
                    01215 ;
                    01216 ;       output :        - send to LCD display  
                    01217 ;       
0308                01218 sendlcd
                    01219 
0308 3080           01220         movlw    0x80           ; set cursor at first line start                
0309 008F           01221         movwf    bytelcd         
030A 2331           01222         call     cmdlcd         ; send command
                    01223 
030B 3008           01224         movlw    0x08           ; set character counter to 8
030C 00A5           01225         movwf    w_count        
030D 302A           01226         movlw    lcd_01
030E 0084           01227         movwf    fsr            ; load pointer to lcd_01
030F                01228 sendlc1
030F 0800           01229         movf     indf, w        ;
0310 008F           01230         movwf    bytelcd        ; move to bytelcd the character to send 
0311 233E           01231         call     wrtlcd
0312 0A84           01232         incf     fsr, f         ; position indf at next character       
0313 0BA5           01233         decfsz   w_count, f     ; re-cycle until counter is zero
0314 2B0F           01234         goto     sendlc1
                    01235 
0315 30C0           01236         movlw    0xc0           ; set cursor at second line start               
0316 008F           01237         movwf    bytelcd         
0317 2331           01238         call     cmdlcd         ; send command
                    01239 
0318 3008           01240         movlw    0x08           ; set character counter to 8
0319 00A5           01241         movwf    w_count        
031A 3032           01242         movlw    lcd_09
031B 0084           01243         movwf    fsr            ; load pointer to lcd_09
031C                01244 sendlc2
031C 0800           01245         movf     indf, w        ;
031D 008F           01246         movwf    bytelcd        ; move to bytelcd the character to send 
031E 233E           01247         call     wrtlcd
031F 0A84           01248         incf     fsr, f         ; position indf at next character       
0320 0BA5           01249         decfsz   w_count, f     ; re-cycle until counter is zero
0321 2B1C           01250         goto     sendlc2
                    01251 
0322                01252 endsend
0322 0008           01253         return
                    01254 
                    01255 ;       LCD display shift routine 
                    01256 ;       execute a one byte left shift of the LCD_01 to LCD_16 area 
                    01257 ;       and inserts a "space" into the LCD_16 byte
                    01258 ;       
0323                01259 shift
0323 300F           01260         movlw    d'15'
0324 00A5           01261         movwf    w_count        
0325 302A           01262         movlw    lcd_01
0326 0084           01263         movwf    fsr            ; load pointer to lcd_01
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0327                01264 shift10
0327 0A84           01265         incf     fsr, f         ; position indf at next character
0328 0800           01266         movf     indf, w        ; and save character to W reg
0329 0384           01267         decf     fsr, f         ; then position indf at previous character
032A 0080           01268         movwf    indf           ; and move saved char
032B 0A84           01269         incf     fsr, f         ; position indf at next character
032C 0BA5           01270         decfsz   w_count, f     ; re-cycle until counter is zero
032D 2B27           01271         goto     shift10
032E                01272 endshift
032E 3020           01273         movlw    " "
032F 0080           01274         movwf    indf           ; at end set LCD_16 at space
0330 0008           01275         return
                    01276 
                    01277 ;     This routine sends a command to LCD display (4 bits at a time)
0331                01278 cmdlcd
0331 080F           01279         movf     bytelcd,w
0332 39F0           01280         andlw    b'11110000'    ; clear right nibble
                    01281 ;       iorlw    b'00000001'    ; set RS = 0, ENA = 1
0333 3808           01282         iorlw    b'00001000'    ; set RS = 0, ENA = 1
0334 0086           01283         movwf    port_b         ; move nibble to port_b
0335 1186           01284         bcf      port_b,bit_EN       ; enable goes down
0336 235F           01285         call     delcd          ; one delay
                    01286         
0337 0E0F           01287         swapf    bytelcd,0      ; exchange nibbles in bytelcd
0338 39F0           01288         andlw    b'11110000'
                    01289 ;       iorlw    b'00000001'  
0339 3808           01290         iorlw    b'00001000'  
033A 0086           01291         movwf    port_b
033B 1186           01292         bcf      port_b,bit_EN
033C 235F           01293         call     delcd
033D                01294 endcmlc
033D 0008           01295         return                
                    01296 
                    01297 ;       This routine sends a character to LCD display (4 bits at a time)
033E                01298 wrtlcd
033E 080F           01299         movf     bytelcd,w
033F 39F0           01300         andlw    b'11110000'    ; clear right nibble
                    01301 ;       iorlw    b'00000011'    ; set RS = 1, ENA = 1
0340 380A           01302         iorlw    b'00001010'    ; set RS = 1, ENA = 1
0341 0086           01303         movwf    port_b         ; move nibble to port_b
0342 1186           01304         bcf      port_b,bit_EN       ; enable goes down
0343 235F           01305         call     delcd          ; one delay
                    01306         
0344 0E0F           01307         swapf    bytelcd,w      ; exchange nibbles in bytelcd
0345 39F0           01308         andlw    b'11110000'
                    01309 ;       iorlw    b'00000011'  
0346 380A           01310         iorlw    b'00001010'  
0347 0086           01311         movwf    port_b
0348 1186           01312         bcf      port_b,bit_EN
0349 235F           01313         call     delcd
034A                01314 endwrlc
034A 0008           01315         return  
                    01316 
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01317 ;       50 mS delay routine 
034B                01318 del50
034B 307D           01319         movlw    d'125'         ; 125 primary cycles
034C 008C           01320         movwf    rit1           ; 
034D                01321 del51
034D 3064           01322         movlw    d'100'         ; 100 secondary cycles
034E 008D           01323         movwf    rit2
034F                01324 del52
034F 0064           01325         clrwdt                  ; watchdog clear
0350 0B8D           01326         decfsz   rit2,1         ; decrement counter2
0351 2B4F           01327         goto     del52          ; if counter2 > 0 re-cycle                              ; re-cycle
0352 0B8C           01328         decfsz   rit1,1         ; if counter2 = 0 decrement counter1        
0353 2B4D           01329         goto     del51          ; if counter1 > 0 re-cycle
0354                01330 endl50
0354 0008           01331         return                  ; end routine
                    01332 
                    01333 ;       5 mS delay routine 
0355                01334 del05
0355 3030           01335         movlw    d'48'          ; 48 primary cycles
0356 008C           01336         movwf    rit1           ; 
0357                01337 del051
0357 3019           01338         movlw    d'25'          ; 25 secondary cycles
0358 008D           01339         movwf    rit2
0359                01340 del052
0359 0064           01341         clrwdt                  ; watchdog clear
035A 0B8D           01342         decfsz   rit2,1         ; decrement counter2
035B 2B59           01343         goto     del052         ; if counter2 > 0 re-cycle
035C 0B8C           01344         decfsz   rit1,1         ; if counter2 = 0 decrement counter1        
035D 2B57           01345         goto     del051         ; if counter1 > 0 re-cycle
035E                01346 endl05
035E 0008           01347         return                  ; end routine
                    01348 
                    01349 ;       0.25 mS delay routine 
035F                01350 delcd
035F 3032           01351         movlw    d'50'          ; 50 delay cycles
0360 008C           01352         movwf    rit1
0361                01353 delcd1  
0361 0064           01354         clrwdt                  ; watchdog clear
0362 0000           01355         nop                     ; 1 microsec delay
0363 0B8C           01356         decfsz   rit1,1         ; if counter > 0 re-cycle
0364 2B61           01357         goto     delcd1         
0365                01358 endcd
0365 0008           01359         return                  ; end routine
                    01360 
                    01361         end
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 27


SYMBOL TABLE
  LABEL                             VALUE 

__16F84                           00000001
ag_parm                           00000262
agsped1                           000000E8
agsped2                           000000EA
agspeed                           000000DF
bit_CW                            00000004
bit_EN                            00000003
bit_P0                            00000001
bit_P1                            00000002
bit_RS                            00000001
bytelcd                           0000000F
c                                 00000000
c_minof                           000002A0
c_minon                           00000294
chrparm                           00000008
cmdlcd                            00000331
cntchar                           0000000E
conve01                           000001EC
conve02                           000001F1
conve10                           000001F3
conve11                           000001F8
conve12                           000001FD
conve20                           000001FF
convert                           000001E8
ctrsegn                           00000021
cw_rate                           00000280
cw_rate1                          00000291
dc                                00000001
dec_sg                            00000230
dec_sg1                           00000238
dec_sg2                           00000240
dec_sg3                           00000248
dec_sg4                           00000250
dec_sg5                           00000258
dec_sg6                           00000260
decod                             000000EC
decod1                            000000F4
decod15                           00000106
decod3                            000000FA
decod31                           0000010C
decod63                           00000112
decod7                            00000100
del05                             00000355
del051                            00000357
del052                            00000359
del50                             0000034B
del51                             0000034D
del52                             0000034F
delcd                             0000035F
delcd1                            00000361
dispar1                           000000B0
disparm                           000000AF
displ                             00000206
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 28


SYMBOL TABLE
  LABEL                             VALUE 

displ1                            00000212
dividi                            000002F7
dividi1                           000002F8
eeadr                             00000009
eecon1                            00000088
eecon2                            00000089
eedata                            00000008
en_ordf                           000002E9
en_ordn                           000002CA
end_mof                           000002AB
end_mon                           0000029F
end_sg                            00000261
endcd                             00000365
endcmlc                           0000033D
endconv                           00000205
enddiv                            00000307
endecod                           0000011A
endl05                            0000035E
endl50                            00000354
endlcd                            000001C5
endmolt                           000002F6
endpanl                           000001E7
endsend                           00000322
endshift                          0000032E
endtb_a                           0000000C
endtb_b                           00000017
endtb_c                           0000002A
endtb_d                           00000045
endtb_e                           0000005E
endtb_f                           0000006B
endwrlc                           0000034A
f                                 00000001
fsr                               00000004
gie                               00000007
indf                              00000000
inilcd                            000001A5
intcon                            0000000B
irp                               00000007
lcd_01                            0000002A
lcd_02                            0000002B
lcd_03                            0000002C
lcd_04                            0000002D
lcd_05                            0000002E
lcd_06                            0000002F
lcd_07                            00000030
lcd_08                            00000031
lcd_09                            00000032
lcd_10                            00000033
lcd_11                            00000034
lcd_12                            00000035
lcd_13                            00000036
lcd_14                            00000037
lcd_15                            00000038
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 29


SYMBOL TABLE
  LABEL                             VALUE 

lcd_16                            00000039
main00                            0000007F
main10                            000000AA
main15                            000000AB
main20                            000000AC
main30                            000000B3
moltip                            000002EA
moltip1                           000002EE
moltip2                           000002F4
nodecod                           00000118
op_reg                            00000081
ord_of                            000002CB
ord_of1                           000002D5
ord_of2                           000002DF
ord_on                            000002AC
ord_on1                           000002B6
ord_on2                           000002C0
panel                             000001C6
pcl                               00000002
pclath                            0000000A
pldata                            00000010
plval                             00000011
port_a                            00000005
port_b                            00000006
ps0                               00000000
ps1                               00000001
ps2                               00000002
psa                               00000003
ric_a                             00000121
ric_a1                            00000122
ric_a2                            0000012B
ric_a3                            00000132
ric_a4                            00000135
ric_b                             00000137
ric_b1                            00000138
ric_b2                            00000141
ric_b3                            00000148
ric_b4                            0000014B
ric_c                             0000014D
ric_c1                            0000014E
ric_c2                            00000157
ric_c3                            0000015E
ric_c4                            00000161
ric_d                             00000163
ric_d1                            00000164
ric_d2                            0000016D
ric_d3                            00000174
ric_d4                            00000177
ric_e                             00000179
ric_e1                            0000017A
ric_e2                            00000183
ric_e3                            0000018A
ric_e4                            0000018D
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 30


SYMBOL TABLE
  LABEL                             VALUE 

ric_f                             0000018F
ric_f1                            00000190
ric_f2                            00000199
ric_f3                            000001A0
ric_f4                            000001A3
rit1                              0000000C
rit2                              0000000D
rp0                               00000005
rp1                               00000006
save_s                            00000023
save_w                            00000022
sendlc1                           0000030F
sendlc2                           0000031C
sendlcd                           00000308
set_off                           000000D4
set_on                            000000B7
sgparm                            0000000F
shift                             00000323
shift10                           00000327
speed                             0000001F
st_off                            000000C9
st_on                             000000B5
status                            00000003
swinput                           00000020
swoff                             00000001
swon                              00000000
t0cs                              00000005
t0ie                              00000005
t0if                              00000002
tab_a                             00000005
tab_b                             0000000C
tab_c                             00000017
tab_d                             0000002A
tab_e                             00000045
tab_f                             0000005E
timchr1                           00000014
timchr2                           00000015
timeoff                           00000013
timeon                            00000012
tmax_of                           0000001E
tmed_of                           0000001D
tmed_on                           0000001C
tmin1_of                          00000019
tmin1_on                          00000016
tmin2_of                          0000001A
tmin2_on                          00000017
tmin3_of                          0000001B
tmin3_on                          00000018
tmr0                              00000001
tmrint                            0000006B
tmrint1                           00000077
tris_a                            00000085
tris_b                            00000086
MPASM 02.30 Released         LCD16117.ASM   10-12-2000  9:26:00         PAGE 31


SYMBOL TABLE
  LABEL                             VALUE 

w                                 00000000
w_conv                            00000024
w_count                           00000025
w_num1                            00000026
w_num2                            00000027
w_num3                            00000028
w_num4                            00000029
wrtlcd                            0000033E
z                                 00000002


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX---------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   867
Program Memory Words Free:   157


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     9 reported,     0 suppressed

