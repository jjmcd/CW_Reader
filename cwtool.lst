MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00001 ;**************************************************************
                    00002 ;                    CW decoding program                      *
                    00003 ;                for PIC16F84 microprocessor                  *
                    00004 ;            dual mode version - 16 chars display             *
                    00005 ;**************************************************************
                    00006 ;       displays on LCD the last N characters received        *
                    00007 ;       with automatic left shift of the text                 *
                    00008 ;       A "service" push button (P1) displays                 *    
                    00009 ;       the CW rate in characters / minute                    *
                    00010 ;                                                             *
                    00011 ;       I/O pins configuration :                              *
                    00012 ;                                                             *
                    00013 ;       RB0 : Enable  (RB3)                                   *                           
                    00014 ;       RB1 : RS                                              *
                    00015 ;       RB2 : n/c                                             *
                    00016 ;       RB3 : n/c                                             *  
                    00017 ;       RB4 : LCD (B4) LSB                                    *
                    00018 ;       RB5 : LCD (B5)                                        *
                    00019 ;       RB6 : LCD (B6)                                        *
                    00020 ;       RB7 : LCD (B7) MSB                                    *  
                    00021 ;                                                             *
                    00022 ;       RA0 : input CW      (RA4)                             *
                    00023 ;       RA1 : P0                                              *  
                    00024 ;       RA2 : n/c                                             *  
                    00025 ;       RA3 : n/c                                             *  
                    00026 ;       RA4 : n/c                                             *  
                    00027 ;                                                             * 
                    00028 ;**************************************************************
                    00029 ;       processor pic16f84                                    *
                    00030 ;       no code protection                                    * 
                    00031 ;       power up timer disabled                               *
                    00032 ;       WDT enabled                                           *
                    00033 ;       XT oscillator                                         *                 
                    00034 ;**************************************************************
                    00035         list     p=16f84
2007 3FF9           00036         __config h'3ff9'
                    00037 
                    00038 ;       memory fixed locations
                    00039 
                    00040 ; port_a bits
  00000001          00041 bit_P0  equ     1
  00000002          00042 bit_P1  equ     2
  00000004          00043 bit_CW  equ     4
                    00044 ; port_b bits
  00000003          00045 bit_EN  equ     3
  00000001          00046 bit_RS  equ     1
                    00047 
  00000000          00048 indf    equ      0x00
  00000001          00049 tmr0    equ      0x01
  00000002          00050 pcl     equ      0x02
  00000003          00051 status  equ      0x03
  00000004          00052 fsr     equ      0x04
  00000005          00053 port_a  equ      0x05
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000006          00054 port_b  equ      0x06
  00000008          00055 eedata  equ      0x08
  00000009          00056 eeadr   equ      0x09
  0000000A          00057 pclath  equ      0x0A
  0000000B          00058 intcon  equ      0x0B
                    00059         
  00000081          00060 op_reg  equ      0x81
  00000085          00061 tris_a  equ      0x85
  00000086          00062 tris_b  equ      0x86
  00000088          00063 eecon1  equ      0x88
  00000089          00064 eecon2  equ      0x89
                    00065 
                    00066 ;       program variables definitions 
  0000000C          00067 rit1    equ      0x0c   
  0000000D          00068 rit2    equ      0x0d
  0000000E          00069 cntchar equ      0x0e           ;received characters counter  
  0000000F          00070 bytelcd equ      0x0f
  00000010          00071 pldata  equ      0x10           ;received dit/dash map (max 8)
  00000011          00072 plval   equ      0x11           ;significant dit/dash map (max 8)
  00000012          00073 timeon  equ      0x12           ;ON signal duration 
  00000013          00074 timeoff equ      0x13           ;OFF signal duration
  00000014          00075 timchr1 equ      0x14           ;received characters timer1 (sec/10)    
  00000015          00076 timchr2 equ      0x15           ;received characters timer2 (sec/100)   
                    00077 
  00000016          00078 tmin1_on equ     0x16           ;ON signal lowest duration
  00000017          00079 tmin2_on equ     0x17
  00000018          00080 tmin3_on equ     0x18 
  00000019          00081 tmin1_of equ     0x19           ;OFF signal lowest duration
  0000001A          00082 tmin2_of equ     0x1a
  0000001B          00083 tmin3_of equ     0x1b
                    00084 
  0000001C          00085 tmed_on equ      0x1c           ;ON signal mean duration
  0000001D          00086 tmed_of equ      0x1d           ;OFF signal mean duration
  0000001E          00087 tmax_of equ      0x1e           ;interwords pause mean duration
  0000001F          00088 speed   equ      0x1f
                    00089 
  00000020          00090 swinput equ      0x20           ;input ON/OFF state indicator
  00000021          00091 ctrsegn equ      0x21           ;received signs counter 
                    00092 
  00000022          00093 save_w  equ      0x22           ;W register save area 
  00000023          00094 save_s  equ      0x23           ;STATUS register save area 
                    00095 
  00000024          00096 w_conv  equ      0x24           ;subroutines work areas  
  00000025          00097 w_count equ      0x25           ; - hex to ascii conversion
  00000026          00098 w_num1  equ      0x26           ; - multiply
  00000027          00099 w_num2  equ      0x27           ; - divide
  00000028          00100 w_num3  equ      0x28           ;
  00000029          00101 w_num4  equ      0x29           ;
                    00102 
                    00103 ;       program constants definitions  
  00000002          00104 z       equ      0x02
  00000001          00105 dc      equ      0x01
  00000000          00106 c       equ      0x00
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000007          00107 irp     equ      0x07
  00000006          00108 rp1     equ      0x06
  00000005          00109 rp0     equ      0x05
  00000000          00110 w       equ      0x00
  00000001          00111 f       equ      0x01
  00000000          00112 ps0     equ      0x00
  00000001          00113 ps1     equ      0x01
  00000002          00114 ps2     equ      0x02
  00000003          00115 psa     equ      0x03
  00000005          00116 t0cs    equ      0x05
  00000002          00117 t0if    equ      0x02
  00000005          00118 t0ie    equ      0x05
  00000007          00119 gie     equ      0x07
  00000000          00120 swon    equ      0x00
  00000001          00121 swoff   equ      0x01   
                    00122 
                    00123 ;       program settable parameters 
  00000008          00124 chrparm equ      0x08           ; chars number for speed calculation
  00000028          00125 rowparm equ      0x28           ; chars number on the LCD raw
  0000000F          00126 sgparm  equ      0x0f           ; dit/dashes number for param. refresh  
                    00127          
                    00128 
                    00129 ;       Reset address
0000 288F           00130         goto     main00
                    00131 
                    00132 ;       Interrupt address
0004                00133         org      h'0004'
0004 287B           00134         goto     tmrint 
                    00135 
                    00136 ;     subroutine searching the character with W offset in the 1 sign tab_char
0005                00137 tab_a
                    00138         
0005 0782           00139         addwf    pcl,1          ; increments jump address
0006 3400           00140         dt       b'00000000'    ; only a dit
0007 3445           00141         dt       "E"
0008 3401           00142         dt       b'00000001'    ; only a dash 
0009 3454           00143         dt       "T"
000A 34FF           00144         dt       b'11111111'    ; filler
000B 3420           00145         dt       " "
000C                00146 endtb_a
                    00147 
                    00148 ;     subroutine searching the character with W offset in the 2 signs tab_char
000C                00149 tab_b
                    00150         
000C 0782           00151         addwf    pcl,1          ; increments jump address
000D 3400           00152         dt       b'00000000'    ; ..
000E 3449           00153         dt       "I"
000F 3402           00154         dt       b'00000010'    ; .-
0010 3441           00155         dt       "A"
0011 3401           00156         dt       b'00000001'    ; -.
0012 344E           00157         dt       "N"
0013 3403           00158         dt       b'00000011'    ; --
0014 344D           00159         dt       "M"
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0015 34FF           00160         dt       b'11111111'    ; filler
0016 3420           00161         dt       " "
0017                00162 endtb_b
                    00163 
                    00164 ;     subroutine searching the character with W offset in the 3 signs tab_char
0017                00165 tab_c
                    00166         
0017 0782           00167         addwf    pcl,1          ; increments jump address
0018 3400           00168         dt       b'00000000'    ; ...
0019 3453           00169         dt       "S"
001A 3404           00170         dt       b'00000100'    ; ..-
001B 3455           00171         dt       "U"
001C 3402           00172         dt       b'00000010'    ; .-.
001D 3452           00173         dt       "R"
001E 3406           00174         dt       b'00000110'    ; .--
001F 3457           00175         dt       "W"
0020 3401           00176         dt       b'00000001'    ; -..
0021 3444           00177         dt       "D"
0022 3405           00178         dt       b'00000101'    ; -.-
0023 344B           00179         dt       "K"
0024 3403           00180         dt       b'00000011'    ; --.
0025 3447           00181         dt       "G"
0026 3407           00182         dt       b'00000111'    ; ---
0027 344F           00183         dt       "O"
0028 34FF           00184         dt       b'11111111'    ; filler
0029 3420           00185         dt       " "
002A                00186 endtb_c
                    00187 
                    00188 ;     subroutine searching the character with W offset in the 4 signs tab_char
002A                00189 tab_d
                    00190         
002A 0782           00191         addwf    pcl,1          ; increments jump address
002B 3400           00192         dt       b'00000000'    ; ....
002C 3448           00193         dt       "H"
002D 3408           00194         dt       b'00001000'    ; ...-
002E 3456           00195         dt       "V"
002F 3404           00196         dt       b'00000100'    ; ..-.
0030 3446           00197         dt       "F"
0031 3402           00198         dt       b'00000010'    ; .-..
0032 344C           00199         dt       "L"
0033 3406           00200         dt       b'00000110'    ; .--.
0034 3450           00201         dt       "P"
0035 340E           00202         dt       b'00001110'    ; .---
0036 344A           00203         dt       "J"
0037 3401           00204         dt       b'00000001'    ; -...
0038 3442           00205         dt       "B"
0039 3409           00206         dt       b'00001001'    ; -..-
003A 3458           00207         dt       "X"
003B 3405           00208         dt       b'00000101'    ; -.-.
003C 3443           00209         dt       "C"
003D 340D           00210         dt       b'00001101'    ; -.--
003E 3459           00211         dt       "Y"
003F 3403           00212         dt       b'00000011'    ; --..
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0040 345A           00213         dt       "Z"
0041 340B           00214         dt       b'00001011'    ; --.-
0042 3451           00215         dt       "Q"
0043 34FF           00216         dt       b'11111111'    ; filler
0044 3420           00217         dt       " "
0045                00218 endtb_d
                    00219 
                    00220 ;     subroutine searching the character with W offset in the 5 signs tab_char
0045                00221 tab_e
                    00222         
0045 0782           00223         addwf    pcl,1          ; increments jump address
0046 3400           00224         dt       b'00000000'    ; .....
0047 3435           00225         dt       "5"
0048 3410           00226         dt       b'00010000'    ; ....-
0049 3434           00227         dt       "4"
004A 3418           00228         dt       b'00011000'    ; ...--
004B 3433           00229         dt       "3"
004C 341C           00230         dt       b'00011100'    ; ..---
004D 3432           00231         dt       "2"
004E 341E           00232         dt       b'00011110'    ; .----
004F 3431           00233         dt       "1"
0050 341F           00234         dt       b'00011111'    ; -----
0051 3430           00235         dt       "0"
0052 3401           00236         dt       b'00000001'    ; -....
0053 3436           00237         dt       "6"
0054 3403           00238         dt       b'00000011'    ; --...
0055 3437           00239         dt       "7"
0056 3407           00240         dt       b'00000111'    ; ---..
0057 3438           00241         dt       "8"
0058 340F           00242         dt       b'00001111'    ; ----.
0059 3439           00243         dt       "9"
005A 3411           00244         dt       b'00010001'    ; -...-
005B 343D           00245         dt       "="
005C 3409           00246         dt       b'00001001'    ; -..-.
005D 342F           00247         dt       "/"
005E 3402           00248         dt       b'00000010'    ; .-...
005F 3477           00249         dt       "w"
0060 3416           00250         dt       b'00010110'    ; -.--.  same as KN :-(
0061 3428           00251         dt       "("
0062 34FF           00252         dt       b'11111111'    ; filler
0063 3420           00253         dt       " "
0064                00254 endtb_e
                    00255 
                    00256 ;     subroutine searching the character with W offset in the 6 signs tab_char
0064                00257 tab_f
                    00258         
0064 0782           00259         addwf    pcl,1          ; increments jump address
0065 3428           00260         dt       b'00101000'    ; ...-.-   SK
0066 3423           00261         dt       "#"
0067 340C           00262         dt       b'00001100'    ; ..--.. 
0068 343F           00263         dt       "?"
0069 3421           00264         dt       b'00100001'    ; -....-
006A 342D           00265         dt       "-"
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

006B 342A           00266         dt       b'00101010'    ; .-.-.-
006C 342E           00267         dt       "."
006D 3433           00268         dt       b'00110011'    ; --..--
006E 342C           00269         dt       ","
006F 342D           00270         dt       b'00101101'    ; -.--.-
0070 3429           00271         dt       ")"
0071 342A           00272         dt       b'00101010'    ; -.-.-.
0072 343B           00273         dt       ";"
0073 3412           00274         dt       b'00010010'    ; .-..-.
0074 3422           00275         dt       022h
0075 341E           00276         dt       b'00011110'    ; .----.
0076 3427           00277         dt       "'"
0077 340D           00278         dt       b'00001101'    ; ..--.-
0078 345F           00279         dt       "_"
0079 34FF           00280         dt       b'11111111'    ; filler
007A 3420           00281         dt       " "
007B                00282 endtb_f
                    00283 
                    00284 ;       interrupt subroutine (only TIMER INTERRUPT)
007B                00285 tmrint
007B 00A2           00286         movwf   save_w          ; store W in save_w
007C 0E03           00287         swapf   status,w        ; store STATUS in W
007D 00A3           00288         movwf   save_s          ; store W in save_s
                    00289 
007E 0A92           00290         incf    timeon, f       ; ON timer increment
007F 0A93           00291         incf    timeoff, f      ; OFF timer increment
0080 0A95           00292         incf    timchr2, f      ; sec/100 timer increment 
0081 300A           00293         movlw   d'10'
0082 0215           00294         subwf   timchr2, w      ; verify if sec/100 timer > 9
0083 1C03           00295         btfss   status, c
0084 2887           00296         goto    tmrint1
0085 0195           00297         clrf    timchr2         ; if an overflow occurred clear sec/100
Message[305]: Using default destination of 1 (file).
0086 0A94           00298         incf    timchr1         ; and sec/10 timer increment 
0087                00299 tmrint1
0087 3064           00300         movlw   d'100'          ; set initial TMR0 value to 100
0088 0081           00301         movwf   tmr0            ; 155 x 64 = 9.9 mS interrupt cycle
0089 110B           00302         bcf     intcon, t0if    ; reset interrupt bit
                    00303 
008A 0E23           00304         swapf   save_s, w       ;
008B 0083           00305         movwf   status          ; restore STATUS register
008C 0EA2           00306         swapf   save_w, f       ; 
008D 0E22           00307         swapf   save_w, w       ; restore W register
008E 0009           00308         retfie
                    00309 
                    00310 ;       main program
008F                00311 main00
                    00312 ;       set initial value to I/O pins, timer and control registers
008F 0185           00313         clrf     port_a         ; clear data registers
0090 0186           00314         clrf     port_b
0091 1683           00315         bsf      status, rp0    ; memory bank1 set to address special registers
                    00316 
0092 30FF           00317         movlw    0xff           ; all port_a pins as input
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0093 0085           00318         movwf    tris_a
0094 3000           00319         movlw    0x00           ; all port_b pins as output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0095 0086           00320         movwf    tris_b
                    00321 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0096 1401           00322         bsf      op_reg, ps0
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0097 1081           00323         bcf      op_reg, ps1    ; set prescaler ratio to 64
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0098 1501           00324         bsf      op_reg, ps2    
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0099 1181           00325         bcf      op_reg, psa    ; assign prescaler to timer
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
009A 1281           00326         bcf      op_reg, t0cs   ; assign counter to internal clock
                    00327 
009B 1283           00328         bcf      status, rp0    ; memory bank0 reset to address data RAM
009C 3064           00329         movlw    d'100'
009D 0081           00330         movwf    tmr0           ; set TMR0 initial value to 100
009E 168B           00331         bsf      intcon, t0ie   ; timer interrupt enable
009F 178B           00332         bsf      intcon, gie    ; global interrupt enable
                    00333  
00A0 01A1           00334         clrf     ctrsegn        ; clear received signs counter
00A1 01A0           00335         clrf     swinput        ; clear input state indicators
00A2 14A0           00336         bsf      swinput, swoff ; set default OFF state
00A3 300F           00337         movlw    h'0f'          ; set HIGH and LOW mean time to 150 mS 
00A4 009C           00338         movwf    tmed_on        ;  
00A5 009D           00339         movwf    tmed_of
00A6 3026           00340         movlw    h'26'          ; set max LOW time to 380 ms 
00A7 009E           00341         movwf    tmax_of        ;
00A8 30FF           00342         movlw    h'ff'          ; set min ON and OFF times to high-value
00A9 0096           00343         movwf    tmin1_on       ; 
00AA 0097           00344         movwf    tmin2_on       ;
00AB 0098           00345         movwf    tmin3_on
00AC 0099           00346         movwf    tmin1_of
00AD 009A           00347         movwf    tmin2_of
00AE 009B           00348         movwf    tmin3_of
00AF 0192           00349         clrf     timeon         ; clear ON and OFF timers 
00B0 0193           00350         clrf     timeoff
00B1 0191           00351         clrf     plval          ; clear PLVAL and PLDATA
00B2 0190           00352         clrf     pldata
00B3 0194           00353         clrf     timchr1        ; clear received characters timers 
00B4 0195           00354         clrf     timchr2
00B5 019F           00355         clrf     speed
00B6 3008           00356         movlw    chrparm        ; set to CHRPARM the characters counter  
00B7 008E           00357         movwf    cntchar        ; to force count start
                    00358 
                    00359 ;       initialize LCD display
00B8 21B2           00360         call     inilcd
00B9 21D8           00361         call     panel
                    00362 
                    00363 ;       main loop
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00BA                00364 main10
00BA 235C           00365         call     del05          ; delay 5 mS
00BB                00366 main15
00BB 235C           00367         call     del05          ; delay 5 mS
00BC 1C85           00368         btfss    port_a,bit_P0  ; verify if P1 pressed
00BD 28BF           00369         goto     disparm        ; if so call parameters display routine  
00BE 28C3           00370         goto     main20
00BF                00371 disparm
00BF 2223           00372         call     displ
00C0                00373 dispar1
00C0 0064           00374         clrwdt                  ; watchdog clear
00C1 1C85           00375         btfss    port_a,bit_P0  ; display remains active as long as 
00C2 28C0           00376         goto     dispar1        ; P1 is pressed
                    00377 
                    00378 ;       ramo di decodifica CW
00C3                00379 main20
00C3 1E05           00380         btfss    port_a,bit_CW  ; verify if signal HIGH on P0 
00C4 28DB           00381         goto     st_off         ; 
                    00382 
                    00383 ;       decoding branch for an HIGH input level 
00C5                00384 st_on
00C5 1820           00385         btfsc    swinput, swon  ; verify if input state changed 
00C6 28BB           00386         goto     main15         ; otherwise wait (goto loop)
00C7                00387 set_on
00C7 1420           00388         bsf      swinput, swon  ; if changed set SWON
00C8 10A0           00389         bcf      swinput, swoff ; reset SWOFF
00C9 0192           00390         clrf     timeon         ; and clear TIMEON  
00CA 22C7           00391         call     c_minof        ; refresh min OFF-state time
00CB 081D           00392         movf     tmed_of, w
00CC 0213           00393         subwf    timeoff, w     ; verify if OFF-state time greater
00CD 1C03           00394         btfss    status, c      ; inter-character time (tmed_of)
00CE 28BA           00395         goto     main10         ; if less re-cycle otherwise
00CF 20F1           00396         call     agspeed        ; update CW speed value 
00D0 20FE           00397         call     decod          ; decode and display received char
00D1 1D05           00398         btfss    port_a,bit_P1  ; verify if 'space' mode active
00D2 28BA           00399         goto     main10         ; otherwise re-cycle
00D3 081E           00400         movf     tmax_of, w
00D4 0213           00401         subwf    timeoff, w     ; verify if OFF-state greater  
00D5 1C03           00402         btfss    status, c      ; inter-word time (tmax_of)
00D6 28BA           00403         goto     main10         ; if less re-cycle
00D7 3020           00404         movlw    " "            ; otherwise insert a space
00D8 008F           00405         movwf    bytelcd        ; on LCD display 
00D9 2345           00406         call     wrtlcd         ; at end re-cycle
00DA 28BA           00407         goto     main10         
                    00408 
                    00409 ;       decoding branch for a LOW input level
00DB                00410 st_off 
00DB 1CA0           00411         btfss    swinput, swoff ; verify if input state changed
00DC 28E6           00412         goto     set_off        ; if so set SWON
00DD 30C8           00413         movlw    d'200'         ; otherwise verify if OFF state
00DE 0213           00414         subwf    timeoff, w     ; duration greater 2 seconds
00DF 1C03           00415         btfss    status, c      ; if less (ris < 0) 
00E0 28BB           00416         goto     main15         ; re-cycle (wait)
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E1 0193           00417         clrf     timeoff        ; if greater 2 seconds (ris > 0) clear timeof 
00E2 20FE           00418         call     decod          ; decode last received character
00E3 3008           00419         movlw    chrparm        ; set characters counter  
00E4 008E           00420         movwf    cntchar        ; to force count start
00E5 28BB           00421         goto     main15         ; and re-cycle (wait)
00E6                00422 set_off
00E6 14A0           00423         bsf      swinput, swoff ; if input state changed set SWOFF
00E7 1020           00424         bcf      swinput, swon  ; reset SWON
00E8 0193           00425         clrf     timeoff        ; and clear TIMEOFF
00E9 22BB           00426         call     c_minon        ; update min ON-state time
00EA 0AA1           00427         incf     ctrsegn, f     ; increment received signs counter
00EB 300F           00428         movlw    sgparm         ;
00EC 0221           00429         subwf    ctrsegn, w     ; verify if more than N signs received 
00ED 1803           00430         btfsc    status, c      ;  
00EE 2289           00431         call     ag_parm        ; if ctrsegn > N refresh calculation parameters
00EF 2257           00432         call     dec_sg         ; and received sign decoding
00F0 28BA           00433         goto     main10         ; at end re-cycle (wait)        
                    00434         
                    00435 ;       end main program
                    00436 
                    00437 ;       Speed rate update routine 
                    00438 ;
00F1                00439 agspeed
00F1 3008           00440         movlw    chrparm
00F2 020E           00441         subwf    cntchar, w     ; compare counter to the stated limit
00F3 1C03           00442         btfss    status, c      ; if counter >= limit : skip
00F4 28FC           00443         goto     agsped2        ; if counter < limite go to end    
00F5 018E           00444         clrf     cntchar        ; clear counter
00F6 0891           00445         movf     plval, f       ; verify PLVAL content
00F7 1903           00446         btfsc    status, z      ; skip if <> zero
00F8 28FA           00447         goto     agsped1        ; otherwise bypass speed calculation
00F9 22A7           00448         call     cw_rate
00FA                00449 agsped1
00FA 0194           00450         clrf     timchr1
00FB 0195           00451         clrf     timchr2
00FC                00452 agsped2
Message[305]: Using default destination of 1 (file).
00FC 0A8E           00453         incf     cntchar
00FD 0008           00454         return  
                    00455 
                    00456 ;       Received character decoding routine
                    00457 ;
                    00458 ;       input :         
                    00459 ;       - PLVAL area containing significant bits map
                    00460 ;       - PLDATA area containing received values (0=dit,1=dash) 
                    00461 ;
                    00462 ;       output :
                    00463 ;       - decoded character in w_conv  
                    00464 ;       - decoded character on LCD display
                    00465 ;       
00FE                00466 decod
00FE 3020           00467         movlw    " "            ; space default character
00FF 00A4           00468         movwf    w_conv         ;
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0100 0891           00469         movf     plval, f       ; verify PLVAL content
0101 1903           00470         btfsc    status, z      ; if zero
0102 0008           00471         return                  ; go to end routine     
0103                00472 decod1  
0103 3001           00473         movlw    d'1'           ; verify if plval = 1
0104 0291           00474         subwf    plval, f       ;
0105 1D03           00475         btfss    status, z      ;
0106 2909           00476         goto     decod3         ;
0107 212E           00477         call     ric_a          ; and tab A search
0108 2928           00478         goto     endecod
                    00479 
0109                00480 decod3  
0109 3002           00481         movlw    d'2'           ; verify if plval = 3
010A 0291           00482         subwf    plval, f       ;
010B 1D03           00483         btfss    status, z      ;
010C 290F           00484         goto     decod7         ;
010D 2144           00485         call     ric_b          ; and tab B search
010E 2928           00486         goto     endecod
                    00487 
010F                00488 decod7  
010F 3004           00489         movlw    d'4'           ; verify if plval = 7
0110 0291           00490         subwf    plval, f       ;
0111 1D03           00491         btfss    status, z      ;
0112 2915           00492         goto     decod15        ;
0113 215A           00493         call     ric_c          ; and tab C search
0114 2928           00494         goto     endecod
                    00495         
0115                00496 decod15 
0115 3008           00497         movlw    d'8'           ; verify if plval = 15
0116 0291           00498         subwf    plval, f       ;
0117 1D03           00499         btfss    status, z      ;
0118 291B           00500         goto     decod31        ;
0119 2170           00501         call     ric_d          ; and tab D search
011A 2928           00502         goto     endecod
                    00503 
011B                00504 decod31 
011B 3010           00505         movlw    d'16'          ; verify if plval = 31
011C 0291           00506         subwf    plval, f       ;
011D 1D03           00507         btfss    status, z      ;
011E 2921           00508         goto     decod63        ;
011F 2186           00509         call     ric_e          ; and tab E search
0120 2928           00510         goto     endecod
                    00511 
0121                00512 decod63 
0121 3020           00513         movlw    d'32'          ; verify if plval = 63
0122 0291           00514         subwf    plval, f       ;
0123 1D03           00515         btfss    status, z      ;
0124 2927           00516         goto     nodecod        ;
0125 219C           00517         call     ric_f          ; and tab F search
0126 2928           00518         goto     endecod
                    00519 
0127                00520 nodecod
0127 302A           00521         movlw    "*"
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0128                00522 endecod
0128 00A4           00523         movwf    w_conv         ; at end save in w_conv decoded character
0129 008F           00524         movwf    bytelcd
012A 0191           00525         clrf     plval          ; clear PLVAL e PLDATA
012B 0190           00526         clrf     pldata
012C 2345           00527         call     wrtlcd         ; display decoded character
                    00528 
012D 0008           00529         return
                    00530 
                    00531 ;       Tab search subroutines 
                    00532 ;
                    00533 ;       input :         
                    00534 ;       - PLDATA area containing received values (0=dit,1=dash) 
                    00535 ;
                    00536 ;       output :
                    00537 ;       - decoded character in w_conv  
                    00538 ;       
012E                00539 ric_a
012E 0103           00540         clrw                    ; initial offset = 0
012F                00541 ric_a1
012F 00A5           00542         movwf    w_count        ; save current offset
0130 2005           00543         call     tab_a          ; search entry at offset W
0131 00A6           00544         movwf    w_num1         ; save found map 
0132 30FF           00545         movlw    b'11111111'    ; verify if tab bottom reached
0133 0226           00546         subwf    w_num1, w      ;
0134 1D03           00547         btfss    status, z      ; if so enforce "*" in w_conv
0135 2938           00548         goto     ric_a2         ; otherwise verify the map 
0136 302A           00549         movlw    "*"            ;
0137 2942           00550         goto     ric_a4         ;
0138                00551 ric_a2
0138 0826           00552         movf     w_num1, w      ; restore in W the map
0139 0210           00553         subwf    pldata, w      ; and verify if matches to PLDATA
013A 1903           00554         btfsc    status, z      ; if not re-cycle
013B 293F           00555         goto     ric_a3
013C 0825           00556         movf     w_count, w     ; restore current offset to W
013D 3E02           00557         addlw    d'2'           ; 2 locations increment
013E 292F           00558         goto     ric_a1         ; and re-cycle
013F                00559 ric_a3
013F 0825           00560         movf     w_count, w     ; if map matches
0140 3E01           00561         addlw    d'1'           ; 1 location increment
0141 2005           00562         call     tab_a          ; and get corresponding character
0142                00563 ric_a4
0142 00A4           00564         movwf    w_conv
0143 0008           00565         return
                    00566 
0144                00567 ric_b
0144 0103           00568         clrw                    ; initial offset = 0
0145                00569 ric_b1
0145 00A5           00570         movwf    w_count        ; save current offset
0146 200C           00571         call     tab_b          ; search entry at offset W
0147 00A6           00572         movwf    w_num1         ; save found map 
0148 30FF           00573         movlw    b'11111111'    ; verify if tab bottom reached
0149 0226           00574         subwf    w_num1, w      ;
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

014A 1D03           00575         btfss    status, z      ; if so enforce "*" in w_conv
014B 294E           00576         goto     ric_b2         ; otherwise verify the map
014C 302A           00577         movlw    "*"            ;
014D 2958           00578         goto     ric_b4         ;
014E                00579 ric_b2
014E 0826           00580         movf     w_num1, w      ; restore in W the map
014F 0210           00581         subwf    pldata, w      ; and verify if matches to PLDATA
0150 1903           00582         btfsc    status, z      ; if not re-cycle
0151 2955           00583         goto     ric_b3
0152 0825           00584         movf     w_count, w     ; restore current offset to W
0153 3E02           00585         addlw    d'2'           ; 2 locations increment
0154 2945           00586         goto     ric_b1         ; and re-cycle
0155                00587 ric_b3
0155 0825           00588         movf     w_count, w     ; if map matches
0156 3E01           00589         addlw    d'1'           ; 1 location increment
0157 200C           00590         call     tab_b          ; and get corresponding character
0158                00591 ric_b4
0158 00A4           00592         movwf    w_conv
0159 0008           00593         return
                    00594 
015A                00595 ric_c
015A 0103           00596         clrw                    ; initial offset = 0
015B                00597 ric_c1
015B 00A5           00598         movwf    w_count        ; save current offset
015C 2017           00599         call     tab_c          ; search entry at offset W
015D 00A6           00600         movwf    w_num1         ; save found map 
015E 30FF           00601         movlw    b'11111111'    ; verify if tab bottom reached
015F 0226           00602         subwf    w_num1, w      ;
0160 1D03           00603         btfss    status, z      ; if so enforce "*" in w_conv
0161 2964           00604         goto     ric_c2         ; otherwise verify the map
0162 302A           00605         movlw    "*"            ;
0163 296E           00606         goto     ric_c4         ;
0164                00607 ric_c2
0164 0826           00608         movf     w_num1, w      ; restore in W the map
0165 0210           00609         subwf    pldata, w      ; and verify if matches to PLDATA
0166 1903           00610         btfsc    status, z      ; if not re-cycle
0167 296B           00611         goto     ric_c3
0168 0825           00612         movf     w_count, w     ; restore current offset to W
0169 3E02           00613         addlw    d'2'           ; 2 locations increment
016A 295B           00614         goto     ric_c1         ; and re-cycle
016B                00615 ric_c3
016B 0825           00616         movf     w_count, w     ; if map matches
016C 3E01           00617         addlw    d'1'           ; 1 location increment
016D 2017           00618         call     tab_c          ; and get corresponding character
016E                00619 ric_c4
016E 00A4           00620         movwf    w_conv
016F 0008           00621         return
                    00622 
0170                00623 ric_d
0170 0103           00624         clrw                    ; initial offset = 0
0171                00625 ric_d1
0171 00A5           00626         movwf    w_count        ; save current offset
0172 202A           00627         call     tab_d          ; search entry at offset W
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0173 00A6           00628         movwf    w_num1         ; save found map 
0174 30FF           00629         movlw    b'11111111'    ; verify if tab bottom reached
0175 0226           00630         subwf    w_num1, w      ;
0176 1D03           00631         btfss    status, z      ; if so enforce "*" in w_conv
0177 297A           00632         goto     ric_d2         ; otherwise verify the map
0178 302A           00633         movlw    "*"            ;
0179 2984           00634         goto     ric_d4         ;
017A                00635 ric_d2
017A 0826           00636         movf     w_num1, w      ; restore in W the map
017B 0210           00637         subwf    pldata, w      ; and verify if matches to PLDATA
017C 1903           00638         btfsc    status, z      ; if not re-cycle
017D 2981           00639         goto     ric_d3
017E 0825           00640         movf     w_count, w     ; restore current offset to W
017F 3E02           00641         addlw    d'2'           ; 2 locations increment
0180 2971           00642         goto     ric_d1         ; and re-cycle
0181                00643 ric_d3
0181 0825           00644         movf     w_count, w     ; if map matches
0182 3E01           00645         addlw    d'1'           ; 1 location increment
0183 202A           00646         call     tab_d          ; and get corresponding character
0184                00647 ric_d4
0184 00A4           00648         movwf    w_conv
0185 0008           00649         return
                    00650 
0186                00651 ric_e
0186 0103           00652         clrw                    ; initial offset = 0
0187                00653 ric_e1
0187 00A5           00654         movwf    w_count        ; save current offset
0188 2045           00655         call     tab_e          ; search entry at offset W
0189 00A6           00656         movwf    w_num1         ; save found map 
018A 30FF           00657         movlw    b'11111111'    ; verify if tab bottom reached
018B 0226           00658         subwf    w_num1, w      ;
018C 1D03           00659         btfss    status, z      ; if so enforce "*" in w_conv
018D 2990           00660         goto     ric_e2         ; otherwise verify the map
018E 302A           00661         movlw    "*"            ;
018F 299A           00662         goto     ric_e4         ;
0190                00663 ric_e2
0190 0826           00664         movf     w_num1, w      ; restore in W the map
0191 0210           00665         subwf    pldata, w      ; and verify if matches to PLDATA
0192 1903           00666         btfsc    status, z      ; if not re-cycle
0193 2997           00667         goto     ric_e3
0194 0825           00668         movf     w_count, w     ; restore current offset to W
0195 3E02           00669         addlw    d'2'           ; 2 locations increment
0196 2987           00670         goto     ric_e1         ; and re-cycle
0197                00671 ric_e3
0197 0825           00672         movf     w_count, w     ; if map matches
0198 3E01           00673         addlw    d'1'           ; 1 location increment
0199 2045           00674         call     tab_e          ; and get corresponding character
019A                00675 ric_e4
019A 00A4           00676         movwf    w_conv
019B 0008           00677         return
                    00678 
019C                00679 ric_f
019C 0103           00680         clrw                    ; initial offset = 0
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

019D                00681 ric_f1
019D 00A5           00682         movwf    w_count        ; save current offset
019E 2064           00683         call     tab_f          ; search entry at offset W
019F 00A6           00684         movwf    w_num1         ; save found map 
01A0 30FF           00685         movlw    b'11111111'    ; verify if tab bottom reached
01A1 0226           00686         subwf    w_num1, w      ;
01A2 1D03           00687         btfss    status, z      ; if so enforce "*" in w_conv
01A3 29A6           00688         goto     ric_f2         ; otherwise verify the map
01A4 302A           00689         movlw    "*"            ;
01A5 29B0           00690         goto     ric_f4         ;
01A6                00691 ric_f2
01A6 0826           00692         movf     w_num1, w      ; restore in W the map
01A7 0210           00693         subwf    pldata, w      ; and verify if matches to PLDATA
01A8 1903           00694         btfsc    status, z      ; if not re-cycle
01A9 29AD           00695         goto     ric_f3
01AA 0825           00696         movf     w_count, w     ; restore current offset to W
01AB 3E02           00697         addlw    d'2'           ; 2 locations increment
01AC 299D           00698         goto     ric_f1         ; and re-cycle
01AD                00699 ric_f3
01AD 0825           00700         movf     w_count, w     ; if map matches
01AE 3E01           00701         addlw    d'1'           ; 1 location increment
01AF 2064           00702         call     tab_f          ; and get corresponding character
01B0                00703 ric_f4
01B0 00A4           00704         movwf    w_conv
01B1 0008           00705         return
                    00706                  
                    00707 ;     LCD display initialization routine
                    00708 ;         - 1 raw 5x7
                    00709 ;         - 4 bit operation
                    00710 ;         - no cursor           
01B2                00711 inilcd
01B2 3038           00712         movlw    b'00111000'    ; 8 bits initialization
01B3 0086           00713         movwf    port_b         
01B4 1186           00714         bcf      port_b,bit_EN       ; reset enable
01B5 2352           00715         call     del50
01B6 3038           00716         movlw    b'00111000'    ; repeat 8 bits initialization
01B7 0086           00717         movwf    port_b         
01B8 1186           00718         bcf      port_b,bit_EN       ; reset enable
01B9 2352           00719         call     del50
01BA 3038           00720         movlw    b'00111000'    ; repeat 8 bits initialization
01BB 0086           00721         movwf    port_b         
01BC 1186           00722         bcf      port_b,bit_EN       ; reset enable
01BD 2352           00723         call     del50
01BE 3028           00724         movlw    b'00101000'    ; 4 bits initialization
01BF 0086           00725         movwf    port_b         
01C0 1186           00726         bcf      port_b,bit_EN       ; reset enable
01C1 2352           00727         call     del50
                    00728 
01C2 3020           00729         movlw    b'00100000'    ; set one 5x7 line
01C3 008F           00730         movwf    bytelcd         
01C4 2338           00731         call     cmdlcd         ; send command
01C5 2352           00732         call     del50
                    00733 
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01C6 3007           00734         movlw    b'00000111'    ; set LCD mode 
01C7 008F           00735         movwf    bytelcd        ; cursor increment/display shift        
01C8 2338           00736         call     cmdlcd         ; send command
01C9 2352           00737         call     del50
                    00738 
01CA 300C           00739         movlw    b'00001100'    ; display on / cursor off
01CB 008F           00740         movwf    bytelcd         
01CC 2338           00741         call     cmdlcd         ; send command
01CD 2352           00742         call     del50
                    00743 
01CE 3001           00744         movlw    b'00000001'    ; clear LCD / home cursor
01CF 008F           00745         movwf    bytelcd         
01D0 2338           00746         call     cmdlcd         ; send command
01D1 2352           00747         call     del50
                    00748 
01D2 3028           00749         movlw    rowparm
01D3 3880           00750         iorlw    0x80           ; set cursor at row end         
01D4 008F           00751         movwf    bytelcd         
01D5 2338           00752         call     cmdlcd         ; send command
01D6 2352           00753         call     del50
01D7                00754 endlcd
01D7 0008           00755         return
                    00756 
                    00757 ;       Initial text display routine 
                    00758 ;
01D8                00759 panel
01D8 3020           00760         movlw    " "            ; display " CW "
01D9 00A6           00761         movwf    w_num1
01DA 3043           00762         movlw    "C"
01DB 00A7           00763         movwf    w_num2
01DC 3057           00764         movlw    "W"
01DD 00A8           00765         movwf    w_num3
01DE 3020           00766         movlw    " "
01DF 00A9           00767         movwf    w_num4
01E0 3004           00768         movlw    d'4'
01E1 00A5           00769         movwf    w_count
01E2 232F           00770         call     sendlcd
01E3 3044           00771         movlw    "D"            ; display "Deco"
01E4 00A6           00772         movwf    w_num1
01E5 3065           00773         movlw    "e"
01E6 00A7           00774         movwf    w_num2
01E7 3063           00775         movlw    "c"
01E8 00A8           00776         movwf    w_num3
01E9 306F           00777         movlw    "o"
01EA 00A9           00778         movwf    w_num4
01EB 3004           00779         movlw    d'4'
01EC 00A5           00780         movwf    w_count
01ED 232F           00781         call     sendlcd
01EE 3064           00782         movlw    "d"            ; display "der "
01EF 00A6           00783         movwf    w_num1
01F0 3065           00784         movlw    "e"
01F1 00A7           00785         movwf    w_num2
01F2 3072           00786         movlw    "r"
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01F3 00A8           00787         movwf    w_num3
01F4 3020           00788         movlw    " "
01F5 00A9           00789         movwf    w_num4
01F6 3004           00790         movlw    d'4'
01F7 00A5           00791         movwf    w_count
01F8 232F           00792         call     sendlcd
01F9 3020           00793         movlw    " "            ; display "  -> "
01FA 00A6           00794         movwf    w_num1
01FB 3020           00795         movlw    " "
01FC 00A7           00796         movwf    w_num2
01FD 307E           00797         movlw    0x7e
01FE 00A8           00798         movwf    w_num3
01FF 3020           00799         movlw    " "
0200 00A9           00800         movwf    w_num4
0201 3004           00801         movlw    d'4'
0202 00A5           00802         movwf    w_count
0203 232F           00803         call     sendlcd
0204                00804 endpanl
0204 0008           00805         return
                    00806 
                    00807 ;       Conversion routine from hex (1 byte) to ascii (3 bytes)
                    00808 ;
                    00809 ;       input :         - hex value in w_num4
                    00810 ;
                    00811 ;       output :        - ascii value on 3 bytes starting from w_num1  
                    00812 ;       
0205                00813 convert
0205 0829           00814         movf     w_num4, w 
0206 00A4           00815         movwf    w_conv         ; move hex byte to working area
0207 01A5           00816         clrf     w_count        ; clear digit counter   
0208 3064           00817         movlw    d'100'         ; set hundred in W
0209                00818 conve01
0209 02A4           00819         subwf    w_conv, f      ; subtract 100 from w_conv
020A 1803           00820         btfsc    status, c      ; if negative
020B 2A0E           00821         goto     conve02        ; restore last total
020C 07A4           00822         addwf    w_conv, f      ; and exit
020D 2A10           00823         goto     conve10        ; otherwise ( >=0 )     
020E                00824 conve02                         ; increment hundred counter
020E 0AA5           00825         incf     w_count, f     ; and loop
020F 2A09           00826         goto     conve01        
                    00827 
0210                00828 conve10
0210 0825           00829         movf     w_count, w     ; 
0211 3830           00830         iorlw    h'30'          ; set numeric half digit 
0212 00A6           00831         movwf    w_num1         ; move ascii character to first output byte 
0213 300A           00832         movlw    d'10'          ; set ten in W
0214 01A5           00833         clrf     w_count        ; clear digit counter   
0215                00834 conve11
0215 02A4           00835         subwf    w_conv, f      ; subtract 10 from w_conv
0216 1803           00836         btfsc    status, c      ; if negative
0217 2A1A           00837         goto     conve12        ; restore last total
0218 07A4           00838         addwf    w_conv, f      ; and exit
0219 2A1C           00839         goto     conve20        ; otherwise     
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

021A                00840 conve12                         ; increment ten counter
021A 0AA5           00841         incf     w_count, f     ; and loop
021B 2A15           00842         goto     conve11        
                    00843 
021C                00844 conve20 
021C 0825           00845         movf     w_count, w     ; 
021D 3830           00846         iorlw    h'30'          ; set numeric half digit
021E 00A7           00847         movwf    w_num2         ; move ascii character to second output byte
021F 0824           00848         movf     w_conv, w      ; 
0220 3830           00849         iorlw    h'30'          ; set unit numeric half digit
0221 00A8           00850         movwf    w_num3         ; move ascii character to third output byte
0222                00851 endconv
0222 0008           00852         return
                    00853 
                    00854 ;       Speed rate display routine  
                    00855 ;
                    00856 ;       input :         - speed in chars / minute 
                    00857 ;
                    00858 ;       output :        - display on LCD module  
                    00859 ;       
0223                00860 displ
0223 3020           00861         movlw    " "            
0224 008F           00862         movwf    bytelcd
0225 300E           00863         movlw    0x0e           ; string length for display
0226 3C28           00864         sublw    rowparm        ; NN - string length
0227 00A5           00865         movwf    w_count        ; set heading filler to spaces
0228                00866 displ0
0228 2345           00867         call     wrtlcd
0229 0BA5           00868         decfsz   w_count, f
022A 2A28           00869         goto     displ0
022B 081F           00870         movf     speed, w       ; display "nnn"
022C 00A9           00871         movwf    w_num4
022D 2205           00872         call     convert
022E 0826           00873         movf     w_num1, w
022F 390F           00874         andlw    h'0f'
0230 1D03           00875         btfss    status, z      ; if first digit zero set " "
0231 2A34           00876         goto     displ1  
0232 3020           00877         movlw    " "
0233 00A6           00878         movwf    w_num1
0234                00879 displ1
0234 3003           00880         movlw    d'3'
0235 00A5           00881         movwf    w_count 
0236 232F           00882         call     sendlcd
                    00883 
0237 3020           00884         movlw    " "            ; display " cha"
0238 00A6           00885         movwf    w_num1
0239 3063           00886         movlw    "c"
023A 00A7           00887         movwf    w_num2
023B 3068           00888         movlw    "h"
023C 00A8           00889         movwf    w_num3
023D 3061           00890         movlw    "a"
023E 00A9           00891         movwf    w_num4
023F 3004           00892         movlw    d'4'
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0240 00A5           00893         movwf    w_count 
0241 232F           00894         call     sendlcd
                    00895         
0242 3072           00896         movlw    "r"            ; display "r/mi"
0243 00A6           00897         movwf    w_num1
0244 302F           00898         movlw    "/"
0245 00A7           00899         movwf    w_num2
0246 306D           00900         movlw    "m"
0247 00A8           00901         movwf    w_num3
0248 3069           00902         movlw    "i"
0249 00A9           00903         movwf    w_num4
024A 3004           00904         movlw    d'4'
024B 00A5           00905         movwf    w_count 
024C 232F           00906         call     sendlcd
                    00907 
024D 306E           00908         movlw    "n"            ; display "n  "
024E 00A6           00909         movwf    w_num1
024F 3020           00910         movlw    " "
0250 00A7           00911         movwf    w_num2
0251 3020           00912         movlw    " "
0252 00A8           00913         movwf    w_num3
0253 3003           00914         movlw    d'3'
0254 00A5           00915         movwf    w_count 
0255 232F           00916         call     sendlcd
0256 0008           00917         return
                    00918 
                    00919 ;       Received sign decoding routine 
                    00920 ;
                    00921 ;       input : 
                    00922 ;       - received signal duration      
                    00923 ;       - PLVAL area containing map of received signs
                    00924 ;       - PLDATA area containing received values (0=punto, 1=linea) 
                    00925 ;
                    00926 ;       output :
                    00927 ;       - updated PLVAL area  
                    00928 ;       - updated PLDATA area
                    00929 ;       
0257                00930 dec_sg
0257 1811           00931         btfsc    plval, 0       ; verify if plval = 00000000
0258 2A5F           00932         goto     dec_sg1        ;
0259 1411           00933         bsf      plval, 0       ; first sign of the received character
025A 081C           00934         movf     tmed_on, w     ;
025B 0212           00935         subwf    timeon, w      ; verify if duration > mean ON time (dit)
025C 1803           00936         btfsc    status, c      ;
025D 1410           00937         bsf      pldata, 0      ; greater duration (dash)
025E 2A88           00938         goto     end_sg
025F                00939 dec_sg1
025F 1891           00940         btfsc    plval, 1       ; verify if plval = 00000001
0260 2A67           00941         goto     dec_sg2        ;
0261 1491           00942         bsf      plval, 1       ; second sign of the received character
0262 081C           00943         movf     tmed_on, w     ;
0263 0212           00944         subwf    timeon, w      ; verify if duration > mean ON time (dit)
0264 1803           00945         btfsc    status, c      ;
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0265 1490           00946         bsf      pldata, 1      ; greater duration (dash)
0266 2A88           00947         goto     end_sg 
0267                00948 dec_sg2
0267 1911           00949         btfsc    plval, 2       ; verify if plval = 00000011
0268 2A6F           00950         goto     dec_sg3        ;
0269 1511           00951         bsf      plval, 2       ; third sign of the received character
026A 081C           00952         movf     tmed_on, w     ;
026B 0212           00953         subwf    timeon, w      ; verify if duration > mean ON time (dit)
026C 1803           00954         btfsc    status, c      ;
026D 1510           00955         bsf      pldata, 2      ; greater duration (dash)
026E 2A88           00956         goto     end_sg
026F                00957 dec_sg3
026F 1991           00958         btfsc    plval, 3       ; verify if plval = 00000111
0270 2A77           00959         goto     dec_sg4        ;
0271 1591           00960         bsf      plval, 3       ; fourth sign of the received character
0272 081C           00961         movf     tmed_on, w     ;
0273 0212           00962         subwf    timeon, w      ; verify if duration > mean ON time (dit)
0274 1803           00963         btfsc    status, c      ;
0275 1590           00964         bsf      pldata, 3      ; greater duration (dash)
0276 2A88           00965         goto     end_sg         
0277                00966 dec_sg4
0277 1A11           00967         btfsc    plval, 4       ; verify if plval = 00001111
0278 2A7F           00968         goto     dec_sg5        ;
0279 1611           00969         bsf      plval, 4       ; fifth sign of the received character
027A 081C           00970         movf     tmed_on, w     ;
027B 0212           00971         subwf    timeon, w      ; verify if duration > mean ON time (dit)
027C 1803           00972         btfsc    status, c      ;
027D 1610           00973         bsf      pldata, 4      ; greater duration (dash)
027E 2A88           00974         goto     end_sg
027F                00975 dec_sg5
027F 1A91           00976         btfsc    plval, 5       ; verify if plval = 00011111
0280 2A87           00977         goto     dec_sg6        ;
0281 1691           00978         bsf      plval, 5       ; sixth sign of the received character
0282 081C           00979         movf     tmed_on, w     ;
0283 0212           00980         subwf    timeon, w      ; verify if duration > mean ON time (dit)
0284 1803           00981         btfsc    status, c      ;
0285 1690           00982         bsf      pldata, 5      ; greater duration (dash)
0286 2A88           00983         goto     end_sg 
0287                00984 dec_sg6
0287 1711           00985         bsf      plval, 6       ; if more than six signs set a default          
0288                00986 end_sg  
0288 0008           00987         return
                    00988 
                    00989 ;       Working parameters calculation routine
                    00990 ;       
                    00991 ;       tmed_on 
                    00992 ;       tmed_of    
                    00993 ;       tmax_of      
                    00994 ;
0289                00995 ag_parm
                    00996 ;       tmed_on computing
0289 0818           00997         movf     tmin3_on, w
028A 00A7           00998         movwf    w_num2         ; multiplicand in w_num2
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

028B 3002           00999         movlw    d'2'
028C 00A8           01000         movwf    w_num3         ; 2 in w_num3
028D 2311           01001         call     moltip
028E 0827           01002         movf     w_num2, w
028F 009C           01003         movwf    tmed_on
                    01004 
                    01005 ;       tmed_of computing
0290 081B           01006         movf     tmin3_of, w
0291 00A7           01007         movwf    w_num2         ; multiplicand in w_num2
0292 3002           01008         movlw    d'2'
0293 00A8           01009         movwf    w_num3         ; 2 in w_num3
0294 2311           01010         call     moltip
0295 0827           01011         movf     w_num2, w
0296 009D           01012         movwf    tmed_of
                    01013 
                    01014 ;       tmax_of computing
0297 081B           01015         movf     tmin3_of, w
0298 00A7           01016         movwf    w_num2         ; multiplicand in w_num2
0299 3005           01017         movlw    d'5'
029A 00A8           01018         movwf    w_num3         ; 5 in w_num3
029B 2311           01019         call     moltip
029C 0827           01020         movf     w_num2, w      ; compute tmax_of = tmin_of * 5
029D 009E           01021         movwf    tmax_of
                    01022 
029E 01A1           01023         clrf     ctrsegn
029F 30FF           01024         movlw    0xff
02A0 0096           01025         movwf    tmin1_on
02A1 0097           01026         movwf    tmin2_on
02A2 0098           01027         movwf    tmin3_on
02A3 0099           01028         movwf    tmin1_of
02A4 009A           01029         movwf    tmin2_of
02A5 009B           01030         movwf    tmin3_of
02A6 0008           01031         return
                    01032 
                    01033 ;       Speed rate calculation routine
                    01034 ;       
                    01035 ;       is applied the formula V = (600 x chrparm)/ timchr1  
                    01036 ;       where chrparm is the provided number of characters
                    01037 ;       timchr1 is the chars packet duration in sec/10         
                    01038 ;
02A7                01039 cw_rate
02A7 300A           01040         movlw    d'10'
02A8 00A7           01041         movwf    w_num2
02A9 3008           01042         movlw    chrparm
02AA 00A8           01043         movwf    w_num3         ; compute chrparm x 10
02AB 2311           01044         call     moltip
02AC 303C           01045         movlw    d'60'
02AD 00A8           01046         movwf    w_num3         ; compute chrparm x 10 x 60
02AE 2311           01047         call     moltip
02AF 0814           01048         movf     timchr1, w     
02B0 00A8           01049         movwf    w_num3         ; set the divisor to timchr1
02B1 231E           01050         call     dividi
02B2 0827           01051         movf     w_num2, w
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02B3 0727           01052         addwf    w_num2, w      ; multiply remainder x 2
02B4 0214           01053         subwf    timchr1, w     ; compare timchr1 to (remainder x 2)
02B5 1803           01054         btfsc    status, c      ;
02B6 2AB8           01055         goto     cw_rate1       ; if result > 0 there is no rounding
02B7 0AA6           01056         incf     w_num1, f      ; otherwise rounding to the upper digit  
02B8                01057 cw_rate1
02B8 0826           01058         movf     w_num1, w
02B9 009F           01059         movwf    speed
02BA 0008           01060         return
                    01061 
                    01062 ;       Minimum ON time calculation routine.
                    01063 ;       stores the three lowest measured values 
                    01064 ;       in the observation interval (sgparm = received signs)    
02BB                01065 c_minon
02BB 3003           01066         movlw    d'3'           ; verify if timeon < 30 ms
02BC 0212           01067         subwf    timeon, w      ; if so no computing is done
02BD 1C03           01068         btfss    status, c      ; 
02BE 2AC6           01069         goto     end_mon        
02BF 0812           01070         movf     timeon, w      ; 
02C0 0218           01071         subwf    tmin3_on, w    ; calculate tmin3_on - timeon
02C1 1C03           01072         btfss    status, c      ;
02C2 2AC6           01073         goto     end_mon        ; if result < 0 exit
02C3 0812           01074         movf     timeon, w      ; otherwise substitute for tmin3_on
02C4 0098           01075         movwf    tmin3_on       ;
02C5 22D3           01076         call     ord_on         ; and tabel reorg 
02C6                01077 end_mon
02C6 0008           01078         return  
                    01079 
                    01080 ;       Minimum OFF time calculation routine.
                    01081 ;       stores the three lowest measured values 
                    01082 ;       in the observation interval (sgparm = received signs) 
02C7                01083 c_minof
02C7 3003           01084         movlw    d'3'           ; verify if timeoff < 30 ms
02C8 0213           01085         subwf    timeoff, w     ; if so no computing is done
02C9 1C03           01086         btfss    status, c      ; 
02CA 2AD2           01087         goto     end_mof        ;
02CB 0813           01088         movf     timeoff, w     ; 
02CC 021B           01089         subwf    tmin3_of, w    ; calculate tmin3_of - timeoff
02CD 1C03           01090         btfss    status, c      ;
02CE 2AD2           01091         goto     end_mof        ; if result < 0 exit
02CF 0813           01092         movf     timeoff, w     ; otherwise substitute for tmin3_of
02D0 009B           01093         movwf    tmin3_of       ;
02D1 22F2           01094         call     ord_of         ; and tabel reorg
02D2                01095 end_mof
02D2 0008           01096         return  
                    01097 
                    01098 ;       Ascending sort routine for
                    01099 ;       tmin1_on, tmin2_on, tmin3_on
02D3                01100 ord_on
02D3 0817           01101         movf     tmin2_on, w    ; 
02D4 0218           01102         subwf    tmin3_on, w    ; calculate tmin3_on - tmin2_on
02D5 1803           01103         btfsc    status, c      ;
02D6 2ADD           01104         goto     ord_on1        ; if result > 0 go on
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D7 0817           01105         movf     tmin2_on, w    ; otherwise swaps tmin2_on and tmin3_on 
02D8 00A6           01106         movwf    w_num1         ;
02D9 0818           01107         movf     tmin3_on, w    ;  
02DA 0097           01108         movwf    tmin2_on       ;
02DB 0826           01109         movf     w_num1, w      ; 
02DC 0098           01110         movwf    tmin3_on       ;
02DD                01111 ord_on1
02DD 0816           01112         movf     tmin1_on, w    ; 
02DE 0217           01113         subwf    tmin2_on, w    ; calculat tmin2_on - tmin1_on
02DF 1803           01114         btfsc    status, c      ;
02E0 2AF1           01115         goto     en_ordn        ; if result > 0 go to end sort
02E1 0816           01116         movf     tmin1_on, w    ; otherwise swaps tmin1_on and tmin2_on 
02E2 00A6           01117         movwf    w_num1         ;
02E3 0817           01118         movf     tmin2_on, w    ;  
02E4 0096           01119         movwf    tmin1_on       ;
02E5 0826           01120         movf     w_num1, w      ; 
02E6 0097           01121         movwf    tmin2_on       ;
02E7                01122 ord_on2
02E7 0817           01123         movf     tmin2_on, w    ; 
02E8 0218           01124         subwf    tmin3_on, w    ; calculate tmin3_on - tmin2_on
02E9 1803           01125         btfsc    status, c      ;
02EA 2AF1           01126         goto     en_ordn        ; if result > 0 go to end sort
02EB 0817           01127         movf     tmin2_on, w    ; otherwise swaps tmin2_on and tmin3_on 
02EC 00A6           01128         movwf    w_num1         ;
02ED 0818           01129         movf     tmin3_on, w    ;  
02EE 0097           01130         movwf    tmin2_on       ;
02EF 0826           01131         movf     w_num1, w      ; 
02F0 0098           01132         movwf    tmin3_on       ;
02F1                01133 en_ordn
02F1 0008           01134         return
                    01135 
                    01136 ;       Ascending sort routine for
                    01137 ;       tmin1_of, tmin2_of, tmin3_of
02F2                01138 ord_of
02F2 081A           01139         movf     tmin2_of, w    ; 
02F3 021B           01140         subwf    tmin3_of, w    ; calculate tmin3_of - tmin2_of
02F4 1803           01141         btfsc    status, c      ;
02F5 2AFC           01142         goto     ord_of1        ; if result > 0 go on
02F6 081A           01143         movf     tmin2_of, w    ; otherwise swaps tmin2_of and tmin3_of 
02F7 00A6           01144         movwf    w_num1         ;
02F8 081B           01145         movf     tmin3_of, w    ;  
02F9 009A           01146         movwf    tmin2_of       ;
02FA 0826           01147         movf     w_num1, w      ; 
02FB 009B           01148         movwf    tmin3_of       ;
02FC                01149 ord_of1
02FC 0819           01150         movf     tmin1_of, w    ; 
02FD 021A           01151         subwf    tmin2_of, w    ; calculate tmin2_of - tmin1_of
02FE 1803           01152         btfsc    status, c      ;
02FF 2B10           01153         goto     en_ordf        ; if result > 0 go to end sort
0300 0819           01154         movf     tmin1_of, w    ; otherwise swaps tmin1_of and tmin2_of 
0301 00A6           01155         movwf    w_num1         ;
0302 081A           01156         movf     tmin2_of, w    ;  
0303 0099           01157         movwf    tmin1_of       ;
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0304 0826           01158         movf     w_num1, w      ; 
0305 009A           01159         movwf    tmin2_of       ;
0306                01160 ord_of2
0306 081A           01161         movf     tmin2_of, w    ; 
0307 021B           01162         subwf    tmin3_of, w    ; calculate tmin3_of - tmin2_of
0308 1803           01163         btfsc    status, c      ;
0309 2B10           01164         goto     en_ordf        ; if result > 0 go to end sort
030A 081A           01165         movf     tmin2_of, w    ; otherwise swaps tmin2_on and tmin3_on 
030B 00A6           01166         movwf    w_num1         ;
030C 081B           01167         movf     tmin3_of, w    ;  
030D 009A           01168         movwf    tmin2_of       ;
030E 0826           01169         movf     w_num1, w      ; 
030F 009B           01170         movwf    tmin3_of       ;
0310                01171 en_ordf
0310 0008           01172         return  
                    01173 
                    01174 ;       Multiply routine between two 1 byte numbers
                    01175 ;
                    01176 ;       input :
                    01177 ;               multiplicand in w_num2
                    01178 ;               multiplyer in w_num3
                    01179 ;
                    01180 ;       output :
                    01181 ;               product in w_num1 + w_num2      
0311                01182 moltip
                    01183 
0311 01A6           01184         clrf     w_num1         ; clear first product digit
0312 0827           01185         movf     w_num2, w      ;
0313 00A5           01186         movwf    w_count        ; save multiplicand in w_count
0314 03A8           01187         decf     w_num3, f      ; 
0315                01188 moltip1         
0315 0064           01189         clrwdt                  ; watchdog clear
0316 0825           01190         movf     w_count, w     ; sum multiplicand to the result
0317 07A7           01191         addwf    w_num2, f      ; of the previous sum 
0318 1C03           01192         btfss    status, c      ;
0319 2B1B           01193         goto     moltip2        ; if there is a carry increment the
031A 0AA6           01194         incf     w_num1, f      ; first product digit
031B                01195 moltip2
031B 0BA8           01196         decfsz   w_num3, f      ; otherwise decrement multiplyer
031C 2B15           01197         goto     moltip1        ; and re-cycle until zero       
031D                01198 endmolt 
031D 0008           01199         return
                    01200 
                    01201 ;       Divide routine between a two bytes dividend 
                    01202 ;       and a 1 byte divisor 
                    01203 ;       Quotient must have only a digit
                    01204 ;
                    01205 ;       input :
                    01206 ;               dividend in w_num1 + w_num2
                    01207 ;               divisor in w_num3
                    01208 ;
                    01209 ;       output :
                    01210 ;               quotient in w_num1
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01211 ;               remainder in w_num2     
031E                01212 dividi
031E 01A5           01213         clrf     w_count        ; initial quotient clear
031F                01214 dividi1                         ; 
031F 0064           01215         clrwdt                  ; watchdog clear                
0320 0AA5           01216         incf     w_count, f     ; increment quotient at every re-cycle  
0321 0828           01217         movf     w_num3, w      ; subtract divisor from result obtained
0322 02A7           01218         subwf    w_num2, f      ; by the previous subtraction
0323 1803           01219         btfsc    status, c      ; if negative carry
0324 2B1F           01220         goto     dividi1        ; decrement fist dividend digit
0325 3001           01221         movlw    d'1'           ; 
0326 02A6           01222         subwf    w_num1, f
0327 1803           01223         btfsc    status,c       ; re-cycle until first digit 
0328 2B1F           01224         goto     dividi1        ; becomes negative and
0329 0828           01225         movf     w_num3, w      ; at end restore last 
032A 07A7           01226         addwf    w_num2, f      ; subtraction, putting the remainder
032B 03A5           01227         decf     w_count, f     ; in w_num2
032C 0825           01228         movf     w_count, w     ; then decrements quotient
032D 00A6           01229         movwf    w_num1         ; and store it in w_num1
032E                01230 enddiv
032E 0008           01231         return
                    01232 
                    01233         
                    01234 ;       LCD display routine 
                    01235 ;
                    01236 ;       input :         - string to display, starting at w_num1
                    01237 ;                       - characters number to display in w_count
                    01238 ;
                    01239 ;       output :        - send to LCD display  
                    01240 ;       
032F                01241 sendlcd
032F 3026           01242         movlw    w_num1
0330 0084           01243         movwf    fsr            ; load pointer to w_num1
0331                01244 sendlc1
0331 0800           01245         movf     indf, w        ;
0332 008F           01246         movwf    bytelcd        ; move to bytelcd the character to send 
0333 2345           01247         call     wrtlcd
0334 0A84           01248         incf     fsr, f         ; position indf at next character       
0335 0BA5           01249         decfsz   w_count, f     ; re-cycle until counter is zero
0336 2B31           01250         goto     sendlc1
0337                01251 endsend
0337 0008           01252         return
                    01253 
                    01254 ;     This routine sends a command to LCD display (4 bits at a time)
0338                01255 cmdlcd
0338 080F           01256         movf     bytelcd,w
0339 39F0           01257         andlw    b'11110000'    ; clear right nibble
033A 3808           01258         iorlw    b'00001000'    ; set RS = 0, ENA = 1
033B 0086           01259         movwf    port_b         ; move nibble to port_b
033C 1186           01260         bcf      port_b,bit_EN       ; enable goes down
033D 2366           01261         call     delcd          ; one delay
                    01262         
033E 0E0F           01263         swapf    bytelcd,0      ; exchange nibbles in bytelcd
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

033F 39F0           01264         andlw    b'11110000'
0340 3808           01265         iorlw    b'00001000'  
0341 0086           01266         movwf    port_b
0342 1186           01267         bcf      port_b,bit_EN
0343 2366           01268         call     delcd
0344                01269 endcmlc
0344 0008           01270         return                
                    01271 
                    01272 ;       This routine sends a character to LCD display (4 bits at a time)
0345                01273 wrtlcd
0345 080F           01274         movf     bytelcd,w
0346 39F0           01275         andlw    b'11110000'    ; clear right nibble
0347 380A           01276         iorlw    b'00001010'    ; set RS = 1, ENA = 1
0348 0086           01277         movwf    port_b         ; move nibble to port_b
0349 1186           01278         bcf      port_b,bit_EN       ; enable goes down
034A 2366           01279         call     delcd          ; one delay
                    01280         
034B 0E0F           01281         swapf    bytelcd,w      ; exchange nibbles in bytelcd
034C 39F0           01282         andlw    b'11110000'
034D 380A           01283         iorlw    b'00001010'  
034E 0086           01284         movwf    port_b
034F 1186           01285         bcf      port_b,bit_EN
0350 2366           01286         call     delcd
0351                01287 endwrlc
0351 0008           01288         return  
                    01289 
                    01290 ;       50 mS delay routine 
0352                01291 del50
0352 307D           01292         movlw    d'125'         ; 125 primary cycles
0353 008C           01293         movwf    rit1           ; 
0354                01294 del51
0354 3064           01295         movlw    d'100'         ; 100 secondary cycles
0355 008D           01296         movwf    rit2
0356                01297 del52
0356 0064           01298         clrwdt                  ; watchdog clear
0357 0B8D           01299         decfsz   rit2,1         ; decrement counter2
0358 2B56           01300         goto     del52          ; if counter2 > 0 re-cycle                              ; re-cycle
0359 0B8C           01301         decfsz   rit1,1         ; if counter2 = 0 decrement counter1        
035A 2B54           01302         goto     del51          ; if counter1 > 0 re-cycle
035B                01303 endl50
035B 0008           01304         return                  ; end routine
                    01305 
                    01306 ;       5 mS delay routine 
035C                01307 del05
035C 3030           01308         movlw    d'48'         ; 48 primary cycles
035D 008C           01309         movwf    rit1           ; 
035E                01310 del051
035E 3019           01311         movlw    d'25'         ; 25 secondary cycles
035F 008D           01312         movwf    rit2
0360                01313 del052
0360 0064           01314         clrwdt                  ; watchdog clear
0361 0B8D           01315         decfsz   rit2,1         ; decrement counter2
0362 2B60           01316         goto     del052         ; if counter2 > 0 re-cycle
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0363 0B8C           01317         decfsz   rit1,1         ; if counter2 = 0 decrement counter1        
0364 2B5E           01318         goto     del051         ; if counter1 > 0 re-cycle
0365                01319 endl05
0365 0008           01320         return                  ; end routine
                    01321 
                    01322 ;       0.25 mS delay routine 
0366                01323 delcd
0366 3032           01324         movlw    d'50'          ; 50 delay cycles
0367 008C           01325         movwf    rit1
0368                01326 delcd1  
0368 0064           01327         clrwdt                  ; watchdog clear
0369 0000           01328         nop                     ; 1 microsec delay
036A 0B8C           01329         decfsz   rit1,1         ; if counter > 0 re-cycle
036B 2B68           01330         goto     delcd1         
036C                01331 endcd
036C 0008           01332         return                  ; end routine
                    01333 
                    01334         end
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 27


SYMBOL TABLE
  LABEL                             VALUE 

__16F84                           00000001
ag_parm                           00000289
agsped1                           000000FA
agsped2                           000000FC
agspeed                           000000F1
bit_CW                            00000004
bit_EN                            00000003
bit_P0                            00000001
bit_P1                            00000002
bit_RS                            00000001
bytelcd                           0000000F
c                                 00000000
c_minof                           000002C7
c_minon                           000002BB
chrparm                           00000008
cmdlcd                            00000338
cntchar                           0000000E
conve01                           00000209
conve02                           0000020E
conve10                           00000210
conve11                           00000215
conve12                           0000021A
conve20                           0000021C
convert                           00000205
ctrsegn                           00000021
cw_rate                           000002A7
cw_rate1                          000002B8
dc                                00000001
dec_sg                            00000257
dec_sg1                           0000025F
dec_sg2                           00000267
dec_sg3                           0000026F
dec_sg4                           00000277
dec_sg5                           0000027F
dec_sg6                           00000287
decod                             000000FE
decod1                            00000103
decod15                           00000115
decod3                            00000109
decod31                           0000011B
decod63                           00000121
decod7                            0000010F
del05                             0000035C
del051                            0000035E
del052                            00000360
del50                             00000352
del51                             00000354
del52                             00000356
delcd                             00000366
delcd1                            00000368
dispar1                           000000C0
disparm                           000000BF
displ                             00000223
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 28


SYMBOL TABLE
  LABEL                             VALUE 

displ0                            00000228
displ1                            00000234
dividi                            0000031E
dividi1                           0000031F
eeadr                             00000009
eecon1                            00000088
eecon2                            00000089
eedata                            00000008
en_ordf                           00000310
en_ordn                           000002F1
end_mof                           000002D2
end_mon                           000002C6
end_sg                            00000288
endcd                             0000036C
endcmlc                           00000344
endconv                           00000222
enddiv                            0000032E
endecod                           00000128
endl05                            00000365
endl50                            0000035B
endlcd                            000001D7
endmolt                           0000031D
endpanl                           00000204
endsend                           00000337
endtb_a                           0000000C
endtb_b                           00000017
endtb_c                           0000002A
endtb_d                           00000045
endtb_e                           00000064
endtb_f                           0000007B
endwrlc                           00000351
f                                 00000001
fsr                               00000004
gie                               00000007
indf                              00000000
inilcd                            000001B2
intcon                            0000000B
irp                               00000007
main00                            0000008F
main10                            000000BA
main15                            000000BB
main20                            000000C3
moltip                            00000311
moltip1                           00000315
moltip2                           0000031B
nodecod                           00000127
op_reg                            00000081
ord_of                            000002F2
ord_of1                           000002FC
ord_of2                           00000306
ord_on                            000002D3
ord_on1                           000002DD
ord_on2                           000002E7
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 29


SYMBOL TABLE
  LABEL                             VALUE 

panel                             000001D8
pcl                               00000002
pclath                            0000000A
pldata                            00000010
plval                             00000011
port_a                            00000005
port_b                            00000006
ps0                               00000000
ps1                               00000001
ps2                               00000002
psa                               00000003
ric_a                             0000012E
ric_a1                            0000012F
ric_a2                            00000138
ric_a3                            0000013F
ric_a4                            00000142
ric_b                             00000144
ric_b1                            00000145
ric_b2                            0000014E
ric_b3                            00000155
ric_b4                            00000158
ric_c                             0000015A
ric_c1                            0000015B
ric_c2                            00000164
ric_c3                            0000016B
ric_c4                            0000016E
ric_d                             00000170
ric_d1                            00000171
ric_d2                            0000017A
ric_d3                            00000181
ric_d4                            00000184
ric_e                             00000186
ric_e1                            00000187
ric_e2                            00000190
ric_e3                            00000197
ric_e4                            0000019A
ric_f                             0000019C
ric_f1                            0000019D
ric_f2                            000001A6
ric_f3                            000001AD
ric_f4                            000001B0
rit1                              0000000C
rit2                              0000000D
rowparm                           00000028
rp0                               00000005
rp1                               00000006
save_s                            00000023
save_w                            00000022
sendlc1                           00000331
sendlcd                           0000032F
set_off                           000000E6
set_on                            000000C7
sgparm                            0000000F
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 30


SYMBOL TABLE
  LABEL                             VALUE 

speed                             0000001F
st_off                            000000DB
st_on                             000000C5
status                            00000003
swinput                           00000020
swoff                             00000001
swon                              00000000
t0cs                              00000005
t0ie                              00000005
t0if                              00000002
tab_a                             00000005
tab_b                             0000000C
tab_c                             00000017
tab_d                             0000002A
tab_e                             00000045
tab_f                             00000064
timchr1                           00000014
timchr2                           00000015
timeoff                           00000013
timeon                            00000012
tmax_of                           0000001E
tmed_of                           0000001D
tmed_on                           0000001C
tmin1_of                          00000019
tmin1_on                          00000016
tmin2_of                          0000001A
tmin2_on                          00000017
tmin3_of                          0000001B
tmin3_on                          00000018
tmr0                              00000001
tmrint                            0000007B
tmrint1                           00000087
tris_a                            00000085
tris_b                            00000086
w                                 00000000
w_conv                            00000024
w_count                           00000025
w_num1                            00000026
w_num2                            00000027
w_num3                            00000028
w_num4                            00000029
wrtlcd                            00000345
z                                 00000002
MPASM 02.30 Released           CWTOOL.ASM   10-27-2000  20:24:28         PAGE 31


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXX--- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   874
Program Memory Words Free:   150


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     9 reported,     0 suppressed

