MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00001 ;**************************************************************
                    00002 ;                    CW decoding program                      *
                    00003 ;                for PIC16F84 microprocessor                  *
                    00004 ;            dual mode version - 2x8 chars display            *
                    00005 ;               DMC-16117A LCD modules family                 *
                    00006 ;**************************************************************
                    00007 ;       displays on LCD the last N characters received        *
                    00008 ;       with automatic left shift of the text                 *
                    00009 ;       A "service" push button (P1) displays                 *    
                    00010 ;       the CW rate in characters / minute                    *
                    00011 ;                                                             *
                    00012 ;       I/O pins configuration :                              *
                    00013 ;                                                             *
                    00014 ;       RB0 : Enable                                          *                           
                    00015 ;       RB1 : RS                                              *
                    00016 ;       RB2 : n/c                                             *
                    00017 ;       RB3 : n/c                                             *  
                    00018 ;       RB4 : LCD (B4) LSB                                    *
                    00019 ;       RB5 : LCD (B5)                                        *
                    00020 ;       RB6 : LCD (B6)                                        *
                    00021 ;       RB7 : LCD (B7) MSB                                    *  
                    00022 ;                                                             *
                    00023 ;       RA0 : input CW                                        *
                    00024 ;       RA1 : P0                                              *  
                    00025 ;       RA2 : n/c                                             *  
                    00026 ;       RA3 : n/c                                             *  
                    00027 ;       RA4 : n/c                                             *  
                    00028 ;                                                             * 
                    00029 ;**************************************************************
                    00030 ;       processor pic16f84                                    *
                    00031 ;       no code protection                                    * 
                    00032 ;       power up timer disabled                               *
                    00033 ;       WDT enabled                                           *
                    00034 ;       XT oscillator                                         *                 
                    00035 ;**************************************************************
                    00036         list     p=16f84
2007 3FF9           00037         __config h'3ff9'
                    00038 
                    00039 ;       memory fixed locations
                    00040 
  00000000          00041 indf    equ      0x00
  00000001          00042 tmr0    equ      0x01
  00000002          00043 pcl     equ      0x02
  00000003          00044 status  equ      0x03
  00000004          00045 fsr     equ      0x04
  00000005          00046 port_a  equ      0x05
  00000006          00047 port_b  equ      0x06
  00000008          00048 eedata  equ      0x08
  00000009          00049 eeadr   equ      0x09
  0000000A          00050 pclath  equ      0x0A
  0000000B          00051 intcon  equ      0x0B
                    00052         
  00000081          00053 op_reg  equ      0x81
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000085          00054 tris_a  equ      0x85
  00000086          00055 tris_b  equ      0x86
  00000088          00056 eecon1  equ      0x88
  00000089          00057 eecon2  equ      0x89
                    00058 
                    00059 ;       program variables definitions 
  0000000C          00060 rit1    equ      0x0c   
  0000000D          00061 rit2    equ      0x0d
  0000000E          00062 cntchar equ      0x0e           ;received characters counter  
  0000000F          00063 bytelcd equ      0x0f
  00000010          00064 pldata  equ      0x10           ;received dit/dash map (max 8)
  00000011          00065 plval   equ      0x11           ;significant dit/dash map (max 8)
  00000012          00066 timeon  equ      0x12           ;ON signal duration 
  00000013          00067 timeoff equ      0x13           ;OFF signal duration
  00000014          00068 timchr1 equ      0x14           ;received characters timer1 (sec/10)    
  00000015          00069 timchr2 equ      0x15           ;received characters timer2 (sec/100)   
                    00070 
  00000016          00071 tmin1_on equ     0x16           ;ON signal lowest duration
  00000017          00072 tmin2_on equ     0x17
  00000018          00073 tmin3_on equ     0x18 
  00000019          00074 tmin1_of equ     0x19           ;OFF signal lowest duration
  0000001A          00075 tmin2_of equ     0x1a
  0000001B          00076 tmin3_of equ     0x1b
                    00077 
  0000001C          00078 tmed_on  equ     0x1c           ;ON signal mean duration
  0000001D          00079 tmed_of  equ     0x1d           ;OFF signal mean duration
  0000001E          00080 tmax_of  equ     0x1e           ;interwords pause mean duration
  0000001F          00081 speed    equ     0x1f
                    00082 
  00000020          00083 swinput  equ     0x20           ;input ON/OFF state indicator
  00000021          00084 ctrsegn  equ     0x21           ;received signs counter 
                    00085 
  00000022          00086 save_w   equ     0x22           ;W register save area 
  00000023          00087 save_s   equ     0x23           ;STATUS register save area 
                    00088 
  00000024          00089 w_conv   equ     0x24           ;subroutines work areas  
  00000025          00090 w_count  equ     0x25           ; - hex to ascii conversion
  00000026          00091 w_num1   equ     0x26           ; - multiply
  00000027          00092 w_num2   equ     0x27           ; - divide
  00000028          00093 w_num3   equ     0x28           ;
  00000029          00094 w_num4   equ     0x29           ;
                    00095 
  0000002A          00096 lcd_01   equ     0x2a           ; leftmost LCD display character
  0000002B          00097 lcd_02   equ     0x2b           ; 
  0000002C          00098 lcd_03   equ     0x2c           ; 
  0000002D          00099 lcd_04   equ     0x2d           ; 
  0000002E          00100 lcd_05   equ     0x2e           ; 
  0000002F          00101 lcd_06   equ     0x2f           ; 
  00000030          00102 lcd_07   equ     0x30           ; 
  00000031          00103 lcd_08   equ     0x31           ; 
  00000032          00104 lcd_09   equ     0x32           ; 
  00000033          00105 lcd_10   equ     0x33           ; 
  00000034          00106 lcd_11   equ     0x34           ; 
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000035          00107 lcd_12   equ     0x35           ; 
  00000036          00108 lcd_13   equ     0x36           ; 
  00000037          00109 lcd_14   equ     0x37           ; 
  00000038          00110 lcd_15   equ     0x38           ; 
  00000039          00111 lcd_16   equ     0x39           ; rightmost LCD display character
                    00112 
                    00113 ;       program constants definitions  
  00000002          00114 z        equ     0x02
  00000001          00115 dc       equ     0x01
  00000000          00116 c        equ     0x00
  00000007          00117 irp      equ     0x07
  00000006          00118 rp1      equ     0x06
  00000005          00119 rp0      equ     0x05
  00000000          00120 w        equ     0x00
  00000001          00121 f        equ     0x01
  00000000          00122 ps0      equ     0x00
  00000001          00123 ps1      equ     0x01
  00000002          00124 ps2      equ     0x02
  00000003          00125 psa      equ     0x03
  00000005          00126 t0cs     equ     0x05
  00000002          00127 t0if     equ     0x02
  00000005          00128 t0ie     equ     0x05
  00000007          00129 gie      equ     0x07
  00000000          00130 swon     equ     0x00
  00000001          00131 swoff    equ     0x01   
                    00132 
                    00133 ;       program settable parameters 
  00000008          00134 chrparm  equ     0x08           ; chars number for speed calculation
  0000000F          00135 sgparm   equ     0x0f           ; dit/dashes number for param. refresh  
                    00136          
                    00137 ;       Reset address
0000 287F           00138         goto     main00
                    00139 
                    00140 ;       Interrupt address
0004                00141         org      h'0004'
0004 286B           00142         goto     tmrint 
                    00143 
                    00144 ;     subroutine searching the character with W offset in the 1 sign tab_char
0005                00145 tab_a
                    00146         
0005 0782           00147         addwf    pcl,1          ; increments jump address
0006 3400           00148         dt       b'00000000'    ; only a dit
0007 3445           00149         dt       "E"
0008 3401           00150         dt       b'00000001'    ; only a dash 
0009 3454           00151         dt       "T"
000A 34FF           00152         dt       b'11111111'    ; filler
000B 3420           00153         dt       " "
000C                00154 endtb_a
                    00155 
                    00156 ;     subroutine searching the character with W offset in the 2 signs tab_char
000C                00157 tab_b
                    00158         
000C 0782           00159         addwf    pcl,1          ; increments jump address
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D 3400           00160         dt       b'00000000'    ; ..
000E 3449           00161         dt       "I"
000F 3402           00162         dt       b'00000010'    ; .-
0010 3441           00163         dt       "A"
0011 3401           00164         dt       b'00000001'    ; -.
0012 344E           00165         dt       "N"
0013 3403           00166         dt       b'00000011'    ; --
0014 344D           00167         dt       "M"
0015 34FF           00168         dt       b'11111111'    ; filler
0016 3420           00169         dt       " "
0017                00170 endtb_b
                    00171 
                    00172 ;     subroutine searching the character with W offset in the 3 signs tab_char
0017                00173 tab_c
                    00174         
0017 0782           00175         addwf    pcl,1          ; increments jump address
0018 3400           00176         dt       b'00000000'    ; ...
0019 3453           00177         dt       "S"
001A 3404           00178         dt       b'00000100'    ; ..-
001B 3455           00179         dt       "U"
001C 3402           00180         dt       b'00000010'    ; .-.
001D 3452           00181         dt       "R"
001E 3406           00182         dt       b'00000110'    ; .--
001F 3457           00183         dt       "W"
0020 3401           00184         dt       b'00000001'    ; -..
0021 3444           00185         dt       "D"
0022 3405           00186         dt       b'00000101'    ; -.-
0023 344B           00187         dt       "K"
0024 3403           00188         dt       b'00000011'    ; --.
0025 3447           00189         dt       "G"
0026 3407           00190         dt       b'00000111'    ; ---
0027 344F           00191         dt       "O"
0028 34FF           00192         dt       b'11111111'    ; filler
0029 3420           00193         dt       " "
002A                00194 endtb_c
                    00195 
                    00196 ;     subroutine searching the character with W offset in the 4 signs tab_char
002A                00197 tab_d
                    00198         
002A 0782           00199         addwf    pcl,1          ; increments jump address
002B 3400           00200         dt       b'00000000'    ; ....
002C 3448           00201         dt       "H"
002D 3408           00202         dt       b'00001000'    ; ...-
002E 3456           00203         dt       "V"
002F 3404           00204         dt       b'00000100'    ; ..-.
0030 3446           00205         dt       "F"
0031 3402           00206         dt       b'00000010'    ; .-..
0032 344C           00207         dt       "L"
0033 3406           00208         dt       b'00000110'    ; .--.
0034 3450           00209         dt       "P"
0035 340E           00210         dt       b'00001110'    ; .---
0036 344A           00211         dt       "J"
0037 3401           00212         dt       b'00000001'    ; -...
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0038 3442           00213         dt       "B"
0039 3409           00214         dt       b'00001001'    ; -..-
003A 3458           00215         dt       "X"
003B 3405           00216         dt       b'00000101'    ; -.-.
003C 3443           00217         dt       "C"
003D 340D           00218         dt       b'00001101'    ; -.--
003E 3459           00219         dt       "Y"
003F 3403           00220         dt       b'00000011'    ; --..
0040 345A           00221         dt       "Z"
0041 340B           00222         dt       b'00001011'    ; --.-
0042 3451           00223         dt       "Q"
0043 34FF           00224         dt       b'11111111'    ; filler
0044 3420           00225         dt       " "
0045                00226 endtb_d
                    00227 
                    00228 ;     subroutine searching the character with W offset in the 5 signs tab_char
0045                00229 tab_e
                    00230         
0045 0782           00231         addwf    pcl,1          ; increments jump address
0046 3400           00232         dt       b'00000000'    ; .....
0047 3435           00233         dt       "5"
0048 3410           00234         dt       b'00010000'    ; ....-
0049 3434           00235         dt       "4"
004A 3418           00236         dt       b'00011000'    ; ...--
004B 3433           00237         dt       "3"
004C 341C           00238         dt       b'00011100'    ; ..---
004D 3432           00239         dt       "2"
004E 341E           00240         dt       b'00011110'    ; .----
004F 3431           00241         dt       "1"
0050 341F           00242         dt       b'00011111'    ; -----
0051 3430           00243         dt       "0"
0052 3401           00244         dt       b'00000001'    ; -....
0053 3436           00245         dt       "6"
0054 3403           00246         dt       b'00000011'    ; --...
0055 3437           00247         dt       "7"
0056 3407           00248         dt       b'00000111'    ; ---..
0057 3438           00249         dt       "8"
0058 340F           00250         dt       b'00001111'    ; ----.
0059 3439           00251         dt       "9"
005A 3411           00252         dt       b'00010001'    ; -...-
005B 343D           00253         dt       "="
005C 34FF           00254         dt       b'11111111'    ; filler
005D 3420           00255         dt       " "
005E                00256 endtb_e
                    00257 
                    00258 ;     subroutine searching the character with W offset in the 6 signs tab_char
005E                00259 tab_f
                    00260         
005E 0782           00261         addwf    pcl,1          ; increments jump address
005F 3428           00262         dt       b'00101000'    ; ...-.-
0060 3423           00263         dt       "#"
0061 340C           00264         dt       b'00001100'    ; ..--..
0062 343F           00265         dt       "?"
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0063 3421           00266         dt       b'00100001'    ; -....-
0064 342D           00267         dt       "-"
0065 342A           00268         dt       b'00101010'    ; .-.-.-
0066 342E           00269         dt       "."
0067 3433           00270         dt       b'00110011'    ; --..--
0068 342C           00271         dt       ","
0069 34FF           00272         dt       b'11111111'    ; filler
006A 3420           00273         dt       " "
006B                00274 endtb_f
                    00275 
                    00276 ;       interrupt subroutine (only TIMER INTERRUPT)
006B                00277 tmrint
006B 00A2           00278         movwf   save_w          ; store W in save_w
006C 0E03           00279         swapf   status,w        ; store STATUS in W
006D 00A3           00280         movwf   save_s          ; store W in save_s
                    00281 
006E 0A92           00282         incf    timeon, f       ; ON timer increment
006F 0A93           00283         incf    timeoff, f      ; OFF timer increment
0070 0A95           00284         incf    timchr2, f      ; sec/100 timer increment 
0071 300A           00285         movlw   d'10'
0072 0215           00286         subwf   timchr2, w      ; verify if sec/100 timer > 9
0073 1C03           00287         btfss   status, c
0074 2877           00288         goto    tmrint1
0075 0195           00289         clrf    timchr2         ; if an overflow occurred clear sec/100
Message[305]: Using default destination of 1 (file).
0076 0A94           00290         incf    timchr1         ; and sec/10 timer increment 
0077                00291 tmrint1
0077 3064           00292         movlw   d'100'          ; set initial TMR0 value to 100
0078 0081           00293         movwf   tmr0            ; 155 x 64 = 9.9 mS interrupt cycle
0079 110B           00294         bcf     intcon, t0if    ; reset interrupt bit
                    00295 
007A 0E23           00296         swapf   save_s, w       ;
007B 0083           00297         movwf   status          ; restore STATUS register
007C 0EA2           00298         swapf   save_w, f       ; 
007D 0E22           00299         swapf   save_w, w       ; restore W register
007E 0009           00300         retfie
                    00301 
                    00302 ;       main program
007F                00303 main00
                    00304 ;       set initial value to I/O pins, timer and control registers
007F 0185           00305         clrf     port_a         ; clear data registers
0080 0186           00306         clrf     port_b
0081 1683           00307         bsf      status, rp0    ; memory bank1 set to address special registers
                    00308 
0082 30FF           00309         movlw    0xff           ; all port_a pins as input
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0083 0085           00310         movwf    tris_a
0084 3000           00311         movlw    0x00           ; all port_b pins as output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0085 0086           00312         movwf    tris_b
                    00313 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0086 1401           00314         bsf      op_reg, ps0
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0087 1081           00315         bcf      op_reg, ps1    ; set prescaler ratio to 64
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0088 1501           00316         bsf      op_reg, ps2    
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0089 1181           00317         bcf      op_reg, psa    ; assign prescaler to timer
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
008A 1281           00318         bcf      op_reg, t0cs   ; assign counter to internal clock
                    00319 
008B 1283           00320         bcf      status, rp0    ; memory bank0 reset to address data RAM
008C 3064           00321         movlw    d'100'
008D 0081           00322         movwf    tmr0           ; set TMR0 initial value to 100
008E 168B           00323         bsf      intcon, t0ie   ; timer interrupt enable
008F 178B           00324         bsf      intcon, gie    ; global interrupt enable
                    00325  
0090 01A1           00326         clrf     ctrsegn        ; clear received signs counter
0091 01A0           00327         clrf     swinput        ; clear input state indicators
0092 14A0           00328         bsf      swinput, swoff ; set default OFF state
0093 300F           00329         movlw    h'0f'          ; set HIGH and LOW mean time to 150 mS 
0094 009C           00330         movwf    tmed_on        ;  
0095 009D           00331         movwf    tmed_of
0096 3026           00332         movlw    h'26'          ; set max LOW time to 380 ms 
0097 009E           00333         movwf    tmax_of        ;
0098 30FF           00334         movlw    h'ff'          ; set min ON and OFF times to high-value
0099 0096           00335         movwf    tmin1_on       ; 
009A 0097           00336         movwf    tmin2_on       ;
009B 0098           00337         movwf    tmin3_on
009C 0099           00338         movwf    tmin1_of
009D 009A           00339         movwf    tmin2_of
009E 009B           00340         movwf    tmin3_of
009F 0192           00341         clrf     timeon         ; clear ON and OFF timers 
00A0 0193           00342         clrf     timeoff
00A1 0191           00343         clrf     plval          ; clear PLVAL and PLDATA
00A2 0190           00344         clrf     pldata
00A3 0194           00345         clrf     timchr1        ; clear received characters timers 
00A4 0195           00346         clrf     timchr2
00A5 019F           00347         clrf     speed
00A6 3008           00348         movlw    chrparm        ; set to CHRPARM the characters counter  
00A7 008E           00349         movwf    cntchar        ; to force count start
                    00350 
                    00351 ;       initialize LCD display
00A8 21A5           00352         call     inilcd
00A9 21C6           00353         call     panel
                    00354 
                    00355 ;       main loop
00AA                00356 main10
00AA 2355           00357         call     del05          ; delay 5 mS
00AB                00358 main15
00AB 2355           00359         call     del05          ; delay 5 mS
00AC                00360 main20
00AC 1C85           00361         btfss    port_a, 1      ; verify if P1 pressed
00AD 28AF           00362         goto     disparm        ; if so call parameters display routine  
00AE 28B3           00363         goto     main30
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00AF                00364 disparm
00AF 2206           00365         call     displ
00B0                00366 dispar1
00B0 0064           00367         clrwdt                  ; watchdog clear
00B1 1C85           00368         btfss    port_a, 1      ; display remains active as long as 
00B2 28B0           00369         goto     dispar1        ; P1 is pressed
                    00370 
                    00371 ;       ramo di decodifica CW
00B3                00372 main30
00B3 1C05           00373         btfss    port_a, 0      ; verify if signal HIGH on P0 
00B4 28C9           00374         goto     st_off         ; 
                    00375 
                    00376 ;       decoding branch for an HIGH input level 
00B5                00377 st_on
00B5 1820           00378         btfsc    swinput, swon  ; verify if input state changed 
00B6 28AB           00379         goto     main15         ; otherwise wait (goto loop)
00B7                00380 set_on
00B7 1420           00381         bsf      swinput, swon  ; if changed set SWON
00B8 10A0           00382         bcf      swinput, swoff ; reset SWOFF
00B9 0192           00383         clrf     timeon         ; and clear TIMEON  
00BA 22A0           00384         call     c_minof        ; refresh min OFF-state time
00BB 081D           00385         movf     tmed_of, w
00BC 0213           00386         subwf    timeoff, w     ; verify if OFF-state time greater
00BD 1C03           00387         btfss    status, c      ; inter-character time (tmed_of)
00BE 28AA           00388         goto     main10         ; if less re-cycle otherwise
00BF 20DF           00389         call     agspeed        ; update CW speed value 
00C0 20EC           00390         call     decod          ; decode and display received char
00C1 1D05           00391         btfss    port_a, 2      ; verify if 'space' mode active
00C2 28AC           00392         goto     main20         ; otherwise re-cycle
00C3 081E           00393         movf     tmax_of, w
00C4 0213           00394         subwf    timeoff, w     ; verify if OFF-state greater  
00C5 1C03           00395         btfss    status, c      ; inter-word time (tmax_of)
00C6 28AC           00396         goto     main20         ; if less re-cycle
00C7 2323           00397         call     shift          ; otherwise insert a space
00C8 28AC           00398         goto     main20         ; and re-cycle  
                    00399 
                    00400 ;       decoding branch for a LOW input level
00C9                00401 st_off 
00C9 1CA0           00402         btfss    swinput, swoff ; verify if input state changed
00CA 28D4           00403         goto     set_off        ; if so set SWON
00CB 30C8           00404         movlw    d'200'         ; otherwise verify if OFF state
00CC 0213           00405         subwf    timeoff, w     ; duration greater 2 seconds
00CD 1C03           00406         btfss    status, c      ; if less (ris < 0) 
00CE 28AB           00407         goto     main15         ; re-cycle (wait)
00CF 0193           00408         clrf     timeoff        ; if greater 2 seconds (ris > 0) clear timeof 
00D0 20EC           00409         call     decod          ; decode last received character
00D1 3008           00410         movlw    chrparm        ; set characters counter  
00D2 008E           00411         movwf    cntchar        ; to force count start
00D3 28AC           00412         goto     main20         ; and re-cycle (wait)
00D4                00413 set_off
00D4 14A0           00414         bsf      swinput, swoff ; if input state changed set SWOFF
00D5 1020           00415         bcf      swinput, swon  ; reset SWON
00D6 0193           00416         clrf     timeoff        ; and clear TIMEOFF
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D7 2294           00417         call     c_minon        ; update min ON-state time
00D8 0AA1           00418         incf     ctrsegn, f     ; increment received signs counter
00D9 300F           00419         movlw    sgparm         ;
00DA 0221           00420         subwf    ctrsegn, w     ; verify if more than N signs received 
00DB 1803           00421         btfsc    status, c      ;  
00DC 2262           00422         call     ag_parm        ; if ctrsegn > N refresh calculation parameters
00DD 2230           00423         call     dec_sg         ; and received sign decoding
00DE 28AA           00424         goto     main10         ; at end re-cycle (wait)        
                    00425         
                    00426 ;       end main program
                    00427 
                    00428 ;       Speed rate update routine 
                    00429 ;
00DF                00430 agspeed
00DF 3008           00431         movlw    chrparm
00E0 020E           00432         subwf    cntchar, w     ; compare counter to the stated limit
00E1 1C03           00433         btfss    status, c      ; if counter >= limit : skip
00E2 28EA           00434         goto     agsped2        ; if counter < limite go to end    
00E3 018E           00435         clrf     cntchar        ; clear counter
00E4 0891           00436         movf     plval, f       ; verify PLVAL content
00E5 1903           00437         btfsc    status, z      ; skip if <> zero
00E6 28E8           00438         goto     agsped1        ; otherwise bypass speed calculation
00E7 2280           00439         call     cw_rate
00E8                00440 agsped1
00E8 0194           00441         clrf     timchr1
00E9 0195           00442         clrf     timchr2
00EA                00443 agsped2
Message[305]: Using default destination of 1 (file).
00EA 0A8E           00444         incf     cntchar
00EB 0008           00445         return  
                    00446 
                    00447 ;       Received character decoding routine
                    00448 ;
                    00449 ;       input :         
                    00450 ;       - PLVAL area containing significant bits map
                    00451 ;       - PLDATA area containing received values (0=dit,1=dash) 
                    00452 ;
                    00453 ;       output :
                    00454 ;       - decoded character in w_conv  
                    00455 ;       - decoded character on LCD display
                    00456 ;       
00EC                00457 decod
00EC 3020           00458         movlw    " "            ; space default character
00ED 00A4           00459         movwf    w_conv         ;
00EE 0891           00460         movf     plval, f       ; verify PLVAL content
00EF 1D03           00461         btfss    status, z      ; if not zero
00F0 28F4           00462         goto     decod1         ; go to decoding
00F1 2355           00463         call     del05          ; otherwise delay and return
00F2 2355           00464         call     del05          ;
00F3 0008           00465         return                  ; go to end routine     
00F4                00466 decod1  
00F4 3001           00467         movlw    d'1'           ; verify if plval = 1
00F5 0291           00468         subwf    plval, f       ;
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F6 1D03           00469         btfss    status, z      ;
00F7 28FA           00470         goto     decod3         ;
00F8 2121           00471         call     ric_a          ; and tab A search
00F9 291A           00472         goto     endecod
                    00473 
00FA                00474 decod3  
00FA 3002           00475         movlw    d'2'           ; verify if plval = 3
00FB 0291           00476         subwf    plval, f       ;
00FC 1D03           00477         btfss    status, z      ;
00FD 2900           00478         goto     decod7         ;
00FE 2137           00479         call     ric_b          ; and tab B search
00FF 291A           00480         goto     endecod
                    00481 
0100                00482 decod7  
0100 3004           00483         movlw    d'4'           ; verify if plval = 7
0101 0291           00484         subwf    plval, f       ;
0102 1D03           00485         btfss    status, z      ;
0103 2906           00486         goto     decod15        ;
0104 214D           00487         call     ric_c          ; and tab C search
0105 291A           00488         goto     endecod
                    00489         
0106                00490 decod15 
0106 3008           00491         movlw    d'8'           ; verify if plval = 15
0107 0291           00492         subwf    plval, f       ;
0108 1D03           00493         btfss    status, z      ;
0109 290C           00494         goto     decod31        ;
010A 2163           00495         call     ric_d          ; and tab D search
010B 291A           00496         goto     endecod
                    00497 
010C                00498 decod31 
010C 3010           00499         movlw    d'16'          ; verify if plval = 31
010D 0291           00500         subwf    plval, f       ;
010E 1D03           00501         btfss    status, z      ;
010F 2912           00502         goto     decod63        ;
0110 2179           00503         call     ric_e          ; and tab E search
0111 291A           00504         goto     endecod
                    00505 
0112                00506 decod63 
0112 3020           00507         movlw    d'32'          ; verify if plval = 63
0113 0291           00508         subwf    plval, f       ;
0114 1D03           00509         btfss    status, z      ;
0115 2918           00510         goto     nodecod        ;
0116 218F           00511         call     ric_f          ; and tab F search
0117 291A           00512         goto     endecod
                    00513 
0118                00514 nodecod
0118 302A           00515         movlw    "*"
0119 00A4           00516         movwf    w_conv         ; 
                    00517 
011A                00518 endecod
011A 0191           00519         clrf     plval          ; clear PLVAL e PLDATA
011B 0190           00520         clrf     pldata
011C 2323           00521         call     shift          ; shift display area
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

011D 0824           00522         movf     w_conv, w      ; move decoded char to lcd_16
011E 00B9           00523         movwf    lcd_16         ;
011F 2308           00524         call     sendlcd        ; send area to display
                    00525 
0120 0008           00526         return
                    00527 
                    00528 ;       Tab search subroutines 
                    00529 ;
                    00530 ;       input :         
                    00531 ;       - PLDATA area containing received values (0=dit,1=dash) 
                    00532 ;
                    00533 ;       output :
                    00534 ;       - decoded character in w_conv  
                    00535 ;       
0121                00536 ric_a
0121 0103           00537         clrw                    ; initial offset = 0
0122                00538 ric_a1
0122 00A5           00539         movwf    w_count        ; save current offset
0123 2005           00540         call     tab_a          ; search entry at offset W
0124 00A6           00541         movwf    w_num1         ; save found map 
0125 30FF           00542         movlw    b'11111111'    ; verify if tab bottom reached
0126 0226           00543         subwf    w_num1, w      ;
0127 1D03           00544         btfss    status, z      ; if so enforce "*" in w_conv
0128 292B           00545         goto     ric_a2         ; otherwise verify the map 
0129 302A           00546         movlw    "*"            ;
012A 2935           00547         goto     ric_a4         ;
012B                00548 ric_a2
012B 0826           00549         movf     w_num1, w      ; restore in W the map
012C 0210           00550         subwf    pldata, w      ; and verify if matches to PLDATA
012D 1903           00551         btfsc    status, z      ; if not re-cycle
012E 2932           00552         goto     ric_a3
012F 0825           00553         movf     w_count, w     ; restore current offset to W
0130 3E02           00554         addlw    d'2'           ; 2 locations increment
0131 2922           00555         goto     ric_a1         ; and re-cycle
0132                00556 ric_a3
0132 0825           00557         movf     w_count, w     ; if map matches
0133 3E01           00558         addlw    d'1'           ; 1 location increment
0134 2005           00559         call     tab_a          ; and get corresponding character
0135                00560 ric_a4
0135 00A4           00561         movwf    w_conv
0136 0008           00562         return
                    00563 
0137                00564 ric_b
0137 0103           00565         clrw                    ; initial offset = 0
0138                00566 ric_b1
0138 00A5           00567         movwf    w_count        ; save current offset
0139 200C           00568         call     tab_b          ; search entry at offset W
013A 00A6           00569         movwf    w_num1         ; save found map 
013B 30FF           00570         movlw    b'11111111'    ; verify if tab bottom reached
013C 0226           00571         subwf    w_num1, w      ;
013D 1D03           00572         btfss    status, z      ; if so enforce "*" in w_conv
013E 2941           00573         goto     ric_b2         ; otherwise verify the map
013F 302A           00574         movlw    "*"            ;
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0140 294B           00575         goto     ric_b4         ;
0141                00576 ric_b2
0141 0826           00577         movf     w_num1, w      ; restore in W the map
0142 0210           00578         subwf    pldata, w      ; and verify if matches to PLDATA
0143 1903           00579         btfsc    status, z      ; if not re-cycle
0144 2948           00580         goto     ric_b3
0145 0825           00581         movf     w_count, w     ; restore current offset to W
0146 3E02           00582         addlw    d'2'           ; 2 locations increment
0147 2938           00583         goto     ric_b1         ; and re-cycle
0148                00584 ric_b3
0148 0825           00585         movf     w_count, w     ; if map matches
0149 3E01           00586         addlw    d'1'           ; 1 location increment
014A 200C           00587         call     tab_b          ; and get corresponding character
014B                00588 ric_b4
014B 00A4           00589         movwf    w_conv
014C 0008           00590         return
                    00591 
014D                00592 ric_c
014D 0103           00593         clrw                    ; initial offset = 0
014E                00594 ric_c1
014E 00A5           00595         movwf    w_count        ; save current offset
014F 2017           00596         call     tab_c          ; search entry at offset W
0150 00A6           00597         movwf    w_num1         ; save found map 
0151 30FF           00598         movlw    b'11111111'    ; verify if tab bottom reached
0152 0226           00599         subwf    w_num1, w      ;
0153 1D03           00600         btfss    status, z      ; if so enforce "*" in w_conv
0154 2957           00601         goto     ric_c2         ; otherwise verify the map
0155 302A           00602         movlw    "*"            ;
0156 2961           00603         goto     ric_c4         ;
0157                00604 ric_c2
0157 0826           00605         movf     w_num1, w      ; restore in W the map
0158 0210           00606         subwf    pldata, w      ; and verify if matches to PLDATA
0159 1903           00607         btfsc    status, z      ; if not re-cycle
015A 295E           00608         goto     ric_c3
015B 0825           00609         movf     w_count, w     ; restore current offset to W
015C 3E02           00610         addlw    d'2'           ; 2 locations increment
015D 294E           00611         goto     ric_c1         ; and re-cycle
015E                00612 ric_c3
015E 0825           00613         movf     w_count, w     ; if map matches
015F 3E01           00614         addlw    d'1'           ; 1 location increment
0160 2017           00615         call     tab_c          ; and get corresponding character
0161                00616 ric_c4
0161 00A4           00617         movwf    w_conv
0162 0008           00618         return
                    00619 
0163                00620 ric_d
0163 0103           00621         clrw                    ; initial offset = 0
0164                00622 ric_d1
0164 00A5           00623         movwf    w_count        ; save current offset
0165 202A           00624         call     tab_d          ; search entry at offset W
0166 00A6           00625         movwf    w_num1         ; save found map 
0167 30FF           00626         movlw    b'11111111'    ; verify if tab bottom reached
0168 0226           00627         subwf    w_num1, w      ;
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0169 1D03           00628         btfss    status, z      ; if so enforce "*" in w_conv
016A 296D           00629         goto     ric_d2         ; otherwise verify the map
016B 302A           00630         movlw    "*"            ;
016C 2977           00631         goto     ric_d4         ;
016D                00632 ric_d2
016D 0826           00633         movf     w_num1, w      ; restore in W the map
016E 0210           00634         subwf    pldata, w      ; and verify if matches to PLDATA
016F 1903           00635         btfsc    status, z      ; if not re-cycle
0170 2974           00636         goto     ric_d3
0171 0825           00637         movf     w_count, w     ; restore current offset to W
0172 3E02           00638         addlw    d'2'           ; 2 locations increment
0173 2964           00639         goto     ric_d1         ; and re-cycle
0174                00640 ric_d3
0174 0825           00641         movf     w_count, w     ; if map matches
0175 3E01           00642         addlw    d'1'           ; 1 location increment
0176 202A           00643         call     tab_d          ; and get corresponding character
0177                00644 ric_d4
0177 00A4           00645         movwf    w_conv
0178 0008           00646         return
                    00647 
0179                00648 ric_e
0179 0103           00649         clrw                    ; initial offset = 0
017A                00650 ric_e1
017A 00A5           00651         movwf    w_count        ; save current offset
017B 2045           00652         call     tab_e          ; search entry at offset W
017C 00A6           00653         movwf    w_num1         ; save found map 
017D 30FF           00654         movlw    b'11111111'    ; verify if tab bottom reached
017E 0226           00655         subwf    w_num1, w      ;
017F 1D03           00656         btfss    status, z      ; if so enforce "*" in w_conv
0180 2983           00657         goto     ric_e2         ; otherwise verify the map
0181 302A           00658         movlw    "*"            ;
0182 298D           00659         goto     ric_e4         ;
0183                00660 ric_e2
0183 0826           00661         movf     w_num1, w      ; restore in W the map
0184 0210           00662         subwf    pldata, w      ; and verify if matches to PLDATA
0185 1903           00663         btfsc    status, z      ; if not re-cycle
0186 298A           00664         goto     ric_e3
0187 0825           00665         movf     w_count, w     ; restore current offset to W
0188 3E02           00666         addlw    d'2'           ; 2 locations increment
0189 297A           00667         goto     ric_e1         ; and re-cycle
018A                00668 ric_e3
018A 0825           00669         movf     w_count, w     ; if map matches
018B 3E01           00670         addlw    d'1'           ; 1 location increment
018C 2045           00671         call     tab_e          ; and get corresponding character
018D                00672 ric_e4
018D 00A4           00673         movwf    w_conv
018E 0008           00674         return
                    00675 
018F                00676 ric_f
018F 0103           00677         clrw                    ; initial offset = 0
0190                00678 ric_f1
0190 00A5           00679         movwf    w_count        ; save current offset
0191 205E           00680         call     tab_f          ; search entry at offset W
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0192 00A6           00681         movwf    w_num1         ; save found map 
0193 30FF           00682         movlw    b'11111111'    ; verify if tab bottom reached
0194 0226           00683         subwf    w_num1, w      ;
0195 1D03           00684         btfss    status, z      ; if so enforce "*" in w_conv
0196 2999           00685         goto     ric_f2         ; otherwise verify the map
0197 302A           00686         movlw    "*"            ;
0198 29A3           00687         goto     ric_f4         ;
0199                00688 ric_f2
0199 0826           00689         movf     w_num1, w      ; restore in W the map
019A 0210           00690         subwf    pldata, w      ; and verify if matches to PLDATA
019B 1903           00691         btfsc    status, z      ; if not re-cycle
019C 29A0           00692         goto     ric_f3
019D 0825           00693         movf     w_count, w     ; restore current offset to W
019E 3E02           00694         addlw    d'2'           ; 2 locations increment
019F 2990           00695         goto     ric_f1         ; and re-cycle
01A0                00696 ric_f3
01A0 0825           00697         movf     w_count, w     ; if map matches
01A1 3E01           00698         addlw    d'1'           ; 1 location increment
01A2 205E           00699         call     tab_f          ; and get corresponding character
01A3                00700 ric_f4
01A3 00A4           00701         movwf    w_conv
01A4 0008           00702         return
                    00703                  
                    00704 ;     LCD display initialization routine
                    00705 ;         - 2 raw 5x7
                    00706 ;         - 4 bit operation
                    00707 ;         - no cursor           
01A5                00708 inilcd
01A5 3031           00709         movlw    b'00110001'    ; 8 bits initialization
01A6 0086           00710         movwf    port_b         
01A7 1006           00711         bcf      port_b,0       ; reset enable
01A8 234B           00712         call     del50
01A9 3031           00713         movlw    b'00110001'    ; repeat 8 bits initialization
01AA 0086           00714         movwf    port_b         
01AB 1006           00715         bcf      port_b,0       ; reset enable
01AC 234B           00716         call     del50
01AD 3031           00717         movlw    b'00110001'    ; repeat 8 bits initialization
01AE 0086           00718         movwf    port_b         
01AF 1006           00719         bcf      port_b,0       ; reset enable
01B0 234B           00720         call     del50
01B1 3021           00721         movlw    b'00100001'    ; 4 bits initialization
01B2 0086           00722         movwf    port_b         
01B3 1006           00723         bcf      port_b,0       ; reset enable
01B4 234B           00724         call     del50
                    00725 
01B5 3028           00726         movlw    b'00101000'    ; set two 5x7 line
01B6 008F           00727         movwf    bytelcd         
01B7 2331           00728         call     cmdlcd         ; send command
01B8 234B           00729         call     del50
                    00730 
01B9 3006           00731         movlw    b'00000110'    ; set LCD mode 
01BA 008F           00732         movwf    bytelcd        ; cursor increment/no shift
01BB 2331           00733         call     cmdlcd         ; send command
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01BC 234B           00734         call     del50
                    00735 
01BD 300C           00736         movlw    b'00001100'    ; display on / cursor off
01BE 008F           00737         movwf    bytelcd         
01BF 2331           00738         call     cmdlcd         ; send command
01C0 234B           00739         call     del50
                    00740 
01C1 3001           00741         movlw    b'00000001'    ; clear LCD / home cursor
01C2 008F           00742         movwf    bytelcd         
01C3 2331           00743         call     cmdlcd         ; send command
01C4 234B           00744         call     del50
01C5                00745 endlcd
01C5 0008           00746         return
                    00747 
                    00748 ;       Initial text display routine 
                    00749 ;
01C6                00750 panel
01C6 3020           00751         movlw    " "            ; display " CW "
01C7 00AA           00752         movwf    lcd_01
01C8 3043           00753         movlw    "C"
01C9 00AB           00754         movwf    lcd_02
01CA 3057           00755         movlw    "W"
01CB 00AC           00756         movwf    lcd_03
01CC 3020           00757         movlw    " "
01CD 00AD           00758         movwf    lcd_04
01CE 3044           00759         movlw    "D"            ; display "Deco"
01CF 00AE           00760         movwf    lcd_05
01D0 3065           00761         movlw    "e"
01D1 00AF           00762         movwf    lcd_06
01D2 3063           00763         movlw    "c"
01D3 00B0           00764         movwf    lcd_07
01D4 306F           00765         movlw    "o"
01D5 00B1           00766         movwf    lcd_08
01D6 3064           00767         movlw    "d"            ; display "der "
01D7 00B2           00768         movwf    lcd_09
01D8 3065           00769         movlw    "e"
01D9 00B3           00770         movwf    lcd_10
01DA 3072           00771         movlw    "r"
01DB 00B4           00772         movwf    lcd_11
01DC 3020           00773         movlw    " "
01DD 00B5           00774         movwf    lcd_12
01DE 3020           00775         movlw    " "            ; display "  -> "
01DF 00B6           00776         movwf    lcd_13
01E0 3020           00777         movlw    " "
01E1 00B7           00778         movwf    lcd_14
01E2 307E           00779         movlw    0x7e
01E3 00B8           00780         movwf    lcd_15
01E4 3020           00781         movlw    " "
01E5 00B9           00782         movwf    lcd_16
01E6 2308           00783         call     sendlcd
01E7                00784 endpanl
01E7 0008           00785         return
                    00786 
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00787 ;       Conversion routine from hex (1 byte) to ascii (3 bytes)
                    00788 ;
                    00789 ;       input :         - hex value in w_num4
                    00790 ;
                    00791 ;       output :        - ascii value on 3 bytes starting from w_num1  
                    00792 ;       
01E8                00793 convert
01E8 0829           00794         movf     w_num4, w 
01E9 00A4           00795         movwf    w_conv         ; move hex byte to working area
01EA 01A5           00796         clrf     w_count        ; clear digit counter   
01EB 3064           00797         movlw    d'100'         ; set hundred in W
01EC                00798 conve01
01EC 02A4           00799         subwf    w_conv, f      ; subtract 100 from w_conv
01ED 1803           00800         btfsc    status, c      ; if negative
01EE 29F1           00801         goto     conve02        ; restore last total
01EF 07A4           00802         addwf    w_conv, f      ; and exit
01F0 29F3           00803         goto     conve10        ; otherwise ( >=0 )     
01F1                00804 conve02                         ; increment hundred counter
01F1 0AA5           00805         incf     w_count, f     ; and loop
01F2 29EC           00806         goto     conve01        
                    00807 
01F3                00808 conve10
01F3 0825           00809         movf     w_count, w     ; 
01F4 3830           00810         iorlw    h'30'          ; set numeric half digit 
01F5 00A6           00811         movwf    w_num1         ; move ascii character to first output byte 
01F6 300A           00812         movlw    d'10'          ; set ten in W
01F7 01A5           00813         clrf     w_count        ; clear digit counter   
01F8                00814 conve11
01F8 02A4           00815         subwf    w_conv, f      ; subtract 10 from w_conv
01F9 1803           00816         btfsc    status, c      ; if negative
01FA 29FD           00817         goto     conve12        ; restore last total
01FB 07A4           00818         addwf    w_conv, f      ; and exit
01FC 29FF           00819         goto     conve20        ; otherwise     
01FD                00820 conve12                         ; increment ten counter
01FD 0AA5           00821         incf     w_count, f     ; and loop
01FE 29F8           00822         goto     conve11        
                    00823 
01FF                00824 conve20 
01FF 0825           00825         movf     w_count, w     ; 
0200 3830           00826         iorlw    h'30'          ; set numeric half digit
0201 00A7           00827         movwf    w_num2         ; move ascii character to second output byte
0202 0824           00828         movf     w_conv, w      ; 
0203 3830           00829         iorlw    h'30'          ; set unit numeric half digit
0204 00A8           00830         movwf    w_num3         ; move ascii character to third output byte
0205                00831 endconv
0205 0008           00832         return
                    00833 
                    00834 ;       Speed rate display routine  
                    00835 ;
                    00836 ;       input :         - speed in chars / minute 
                    00837 ;
                    00838 ;       output :        - display on LCD module  
                    00839 ;       
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0206                00840 displ
0206 3020           00841         movlw    " "            
0207 00AA           00842         movwf    lcd_01
0208 00AB           00843         movwf    lcd_02
0209 081F           00844         movf     speed, w       ; display "nnn"
020A 00A9           00845         movwf    w_num4
020B 21E8           00846         call     convert
020C 0826           00847         movf     w_num1, w
020D 390F           00848         andlw    h'0f'
020E 1D03           00849         btfss    status, z      ; if first digit zero set " "
020F 2A12           00850         goto     displ1  
0210 3020           00851         movlw    " "
0211 00A6           00852         movwf    w_num1
0212                00853 displ1
0212 0826           00854         movf     w_num1, w
0213 00AC           00855         movwf    lcd_03
0214 0827           00856         movf     w_num2, w
0215 00AD           00857         movwf    lcd_04
0216 0828           00858         movf     w_num3, w
0217 00AE           00859         movwf    lcd_05
0218 3020           00860         movlw    " "            ; display " cha"
0219 00AF           00861         movwf    lcd_06
021A 3063           00862         movlw    "c"
021B 00B0           00863         movwf    lcd_07
021C 3068           00864         movlw    "h"
021D 00B1           00865         movwf    lcd_08
021E 3061           00866         movlw    "a"
021F 00B2           00867         movwf    lcd_09
0220 3072           00868         movlw    "r"            ; display "r/mi"
0221 00B3           00869         movwf    lcd_10
0222 302F           00870         movlw    "/"
0223 00B4           00871         movwf    lcd_11
0224 306D           00872         movlw    "m"
0225 00B5           00873         movwf    lcd_12
0226 3069           00874         movlw    "i"
0227 00B6           00875         movwf    lcd_13
0228 306E           00876         movlw    "n"            ; display "n  "
0229 00B7           00877         movwf    lcd_14
022A 3020           00878         movlw    " "
022B 00B8           00879         movwf    lcd_15
022C 3020           00880         movlw    " "
022D 00B9           00881         movwf    lcd_16
022E 2308           00882         call     sendlcd
022F 0008           00883         return
                    00884 
                    00885 ;       Received sign decoding routine 
                    00886 ;
                    00887 ;       input : 
                    00888 ;       - received signal duration      
                    00889 ;       - PLVAL area containing map of received signs
                    00890 ;       - PLDATA area containing received values (0=punto, 1=linea) 
                    00891 ;
                    00892 ;       output :
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00893 ;       - updated PLVAL area  
                    00894 ;       - updated PLDATA area
                    00895 ;       
0230                00896 dec_sg
0230 1811           00897         btfsc    plval, 0       ; verify if plval = 00000000
0231 2A38           00898         goto     dec_sg1        ;
0232 1411           00899         bsf      plval, 0       ; first sign of the received character
0233 081C           00900         movf     tmed_on, w     ;
0234 0212           00901         subwf    timeon, w      ; verify if duration > mean ON time (dit)
0235 1803           00902         btfsc    status, c      ;
0236 1410           00903         bsf      pldata, 0      ; greater duration (dash)
0237 2A61           00904         goto     end_sg
0238                00905 dec_sg1
0238 1891           00906         btfsc    plval, 1       ; verify if plval = 00000001
0239 2A40           00907         goto     dec_sg2        ;
023A 1491           00908         bsf      plval, 1       ; second sign of the received character
023B 081C           00909         movf     tmed_on, w     ;
023C 0212           00910         subwf    timeon, w      ; verify if duration > mean ON time (dit)
023D 1803           00911         btfsc    status, c      ;
023E 1490           00912         bsf      pldata, 1      ; greater duration (dash)
023F 2A61           00913         goto     end_sg 
0240                00914 dec_sg2
0240 1911           00915         btfsc    plval, 2       ; verify if plval = 00000011
0241 2A48           00916         goto     dec_sg3        ;
0242 1511           00917         bsf      plval, 2       ; third sign of the received character
0243 081C           00918         movf     tmed_on, w     ;
0244 0212           00919         subwf    timeon, w      ; verify if duration > mean ON time (dit)
0245 1803           00920         btfsc    status, c      ;
0246 1510           00921         bsf      pldata, 2      ; greater duration (dash)
0247 2A61           00922         goto     end_sg
0248                00923 dec_sg3
0248 1991           00924         btfsc    plval, 3       ; verify if plval = 00000111
0249 2A50           00925         goto     dec_sg4        ;
024A 1591           00926         bsf      plval, 3       ; fourth sign of the received character
024B 081C           00927         movf     tmed_on, w     ;
024C 0212           00928         subwf    timeon, w      ; verify if duration > mean ON time (dit)
024D 1803           00929         btfsc    status, c      ;
024E 1590           00930         bsf      pldata, 3      ; greater duration (dash)
024F 2A61           00931         goto     end_sg         
0250                00932 dec_sg4
0250 1A11           00933         btfsc    plval, 4       ; verify if plval = 00001111
0251 2A58           00934         goto     dec_sg5        ;
0252 1611           00935         bsf      plval, 4       ; fifth sign of the received character
0253 081C           00936         movf     tmed_on, w     ;
0254 0212           00937         subwf    timeon, w      ; verify if duration > mean ON time (dit)
0255 1803           00938         btfsc    status, c      ;
0256 1610           00939         bsf      pldata, 4      ; greater duration (dash)
0257 2A61           00940         goto     end_sg
0258                00941 dec_sg5
0258 1A91           00942         btfsc    plval, 5       ; verify if plval = 00011111
0259 2A60           00943         goto     dec_sg6        ;
025A 1691           00944         bsf      plval, 5       ; sixth sign of the received character
025B 081C           00945         movf     tmed_on, w     ;
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

025C 0212           00946         subwf    timeon, w      ; verify if duration > mean ON time (dit)
025D 1803           00947         btfsc    status, c      ;
025E 1690           00948         bsf      pldata, 5      ; greater duration (dash)
025F 2A61           00949         goto     end_sg 
0260                00950 dec_sg6
0260 1711           00951         bsf      plval, 6       ; if more than six signs set a default          
0261                00952 end_sg  
0261 0008           00953         return
                    00954 
                    00955 ;       Working parameters calculation routine
                    00956 ;       
                    00957 ;       tmed_on 
                    00958 ;       tmed_of    
                    00959 ;       tmax_of      
                    00960 ;
0262                00961 ag_parm
                    00962 ;       tmed_on computing
0262 0818           00963         movf     tmin3_on, w
0263 00A7           00964         movwf    w_num2         ; multiplicand in w_num2
0264 3002           00965         movlw    d'2'
0265 00A8           00966         movwf    w_num3         ; 2 in w_num3
0266 22EA           00967         call     moltip
0267 0827           00968         movf     w_num2, w
0268 009C           00969         movwf    tmed_on
                    00970 
                    00971 ;       tmed_of computing
0269 081B           00972         movf     tmin3_of, w
026A 00A7           00973         movwf    w_num2         ; multiplicand in w_num2
026B 3002           00974         movlw    d'2'
026C 00A8           00975         movwf    w_num3         ; 2 in w_num3
026D 22EA           00976         call     moltip
026E 0827           00977         movf     w_num2, w
026F 009D           00978         movwf    tmed_of
                    00979 
                    00980 ;       tmax_of computing
0270 081B           00981         movf     tmin3_of, w
0271 00A7           00982         movwf    w_num2         ; multiplicand in w_num2
0272 3005           00983         movlw    d'5'
0273 00A8           00984         movwf    w_num3         ; 5 in w_num3
0274 22EA           00985         call     moltip
0275 0827           00986         movf     w_num2, w      ; compute tmax_of = tmin_of * 5
0276 009E           00987         movwf    tmax_of
                    00988 
0277 01A1           00989         clrf     ctrsegn
0278 30FF           00990         movlw    0xff
0279 0096           00991         movwf    tmin1_on
027A 0097           00992         movwf    tmin2_on
027B 0098           00993         movwf    tmin3_on
027C 0099           00994         movwf    tmin1_of
027D 009A           00995         movwf    tmin2_of
027E 009B           00996         movwf    tmin3_of
027F 0008           00997         return
                    00998 
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00999 ;       Speed rate calculation routine
                    01000 ;       
                    01001 ;       is applied the formula V = (600 x chrparm)/ timchr1  
                    01002 ;       where chrparm is the provided number of characters
                    01003 ;       timchr1 is the chars packet duration in sec/10         
                    01004 ;
0280                01005 cw_rate
0280 300A           01006         movlw    d'10'
0281 00A7           01007         movwf    w_num2
0282 3008           01008         movlw    chrparm
0283 00A8           01009         movwf    w_num3         ; compute chrparm x 10
0284 22EA           01010         call     moltip
0285 303C           01011         movlw    d'60'
0286 00A8           01012         movwf    w_num3         ; compute chrparm x 10 x 60
0287 22EA           01013         call     moltip
0288 0814           01014         movf     timchr1, w     
0289 00A8           01015         movwf    w_num3         ; set the divisor to timchr1
028A 22F7           01016         call     dividi
028B 0827           01017         movf     w_num2, w
028C 0727           01018         addwf    w_num2, w      ; multiply remainder x 2
028D 0214           01019         subwf    timchr1, w     ; compare timchr1 to (remainder x 2)
028E 1803           01020         btfsc    status, c      ;
028F 2A91           01021         goto     cw_rate1       ; if result > 0 there is no rounding
0290 0AA6           01022         incf     w_num1, f      ; otherwise rounding to the upper digit  
0291                01023 cw_rate1
0291 0826           01024         movf     w_num1, w
0292 009F           01025         movwf    speed
0293 0008           01026         return
                    01027 
                    01028 ;       Minimum ON time calculation routine.
                    01029 ;       stores the three lowest measured values 
                    01030 ;       in the observation interval (sgparm = received signs)    
0294                01031 c_minon
0294 3003           01032         movlw    d'3'           ; verify if timeon < 30 ms
0295 0212           01033         subwf    timeon, w      ; if so no computing is done
0296 1C03           01034         btfss    status, c      ; 
0297 2A9F           01035         goto     end_mon        
0298 0812           01036         movf     timeon, w      ; 
0299 0218           01037         subwf    tmin3_on, w    ; calculate tmin3_on - timeon
029A 1C03           01038         btfss    status, c      ;
029B 2A9F           01039         goto     end_mon        ; if result < 0 exit
029C 0812           01040         movf     timeon, w      ; otherwise substitute for tmin3_on
029D 0098           01041         movwf    tmin3_on       ;
029E 22AC           01042         call     ord_on         ; and tabel reorg 
029F                01043 end_mon
029F 0008           01044         return  
                    01045 
                    01046 ;       Minimum OFF time calculation routine.
                    01047 ;       stores the three lowest measured values 
                    01048 ;       in the observation interval (sgparm = received signs) 
02A0                01049 c_minof
02A0 3003           01050         movlw    d'3'           ; verify if timeoff < 30 ms
02A1 0213           01051         subwf    timeoff, w     ; if so no computing is done
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02A2 1C03           01052         btfss    status, c      ; 
02A3 2AAB           01053         goto     end_mof        ;
02A4 0813           01054         movf     timeoff, w     ; 
02A5 021B           01055         subwf    tmin3_of, w    ; calculate tmin3_of - timeoff
02A6 1C03           01056         btfss    status, c      ;
02A7 2AAB           01057         goto     end_mof        ; if result < 0 exit
02A8 0813           01058         movf     timeoff, w     ; otherwise substitute for tmin3_of
02A9 009B           01059         movwf    tmin3_of       ;
02AA 22CB           01060         call     ord_of         ; and tabel reorg
02AB                01061 end_mof
02AB 0008           01062         return  
                    01063 
                    01064 ;       Ascending sort routine for
                    01065 ;       tmin1_on, tmin2_on, tmin3_on
02AC                01066 ord_on
02AC 0817           01067         movf     tmin2_on, w    ; 
02AD 0218           01068         subwf    tmin3_on, w    ; calculate tmin3_on - tmin2_on
02AE 1803           01069         btfsc    status, c      ;
02AF 2AB6           01070         goto     ord_on1        ; if result > 0 go on
02B0 0817           01071         movf     tmin2_on, w    ; otherwise swaps tmin2_on and tmin3_on 
02B1 00A6           01072         movwf    w_num1         ;
02B2 0818           01073         movf     tmin3_on, w    ;  
02B3 0097           01074         movwf    tmin2_on       ;
02B4 0826           01075         movf     w_num1, w      ; 
02B5 0098           01076         movwf    tmin3_on       ;
02B6                01077 ord_on1
02B6 0816           01078         movf     tmin1_on, w    ; 
02B7 0217           01079         subwf    tmin2_on, w    ; calculat tmin2_on - tmin1_on
02B8 1803           01080         btfsc    status, c      ;
02B9 2ACA           01081         goto     en_ordn        ; if result > 0 go to end sort
02BA 0816           01082         movf     tmin1_on, w    ; otherwise swaps tmin1_on and tmin2_on 
02BB 00A6           01083         movwf    w_num1         ;
02BC 0817           01084         movf     tmin2_on, w    ;  
02BD 0096           01085         movwf    tmin1_on       ;
02BE 0826           01086         movf     w_num1, w      ; 
02BF 0097           01087         movwf    tmin2_on       ;
02C0                01088 ord_on2
02C0 0817           01089         movf     tmin2_on, w    ; 
02C1 0218           01090         subwf    tmin3_on, w    ; calculate tmin3_on - tmin2_on
02C2 1803           01091         btfsc    status, c      ;
02C3 2ACA           01092         goto     en_ordn        ; if result > 0 go to end sort
02C4 0817           01093         movf     tmin2_on, w    ; otherwise swaps tmin2_on and tmin3_on 
02C5 00A6           01094         movwf    w_num1         ;
02C6 0818           01095         movf     tmin3_on, w    ;  
02C7 0097           01096         movwf    tmin2_on       ;
02C8 0826           01097         movf     w_num1, w      ; 
02C9 0098           01098         movwf    tmin3_on       ;
02CA                01099 en_ordn
02CA 0008           01100         return
                    01101 
                    01102 ;       Ascending sort routine for
                    01103 ;       tmin1_of, tmin2_of, tmin3_of
02CB                01104 ord_of
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02CB 081A           01105         movf     tmin2_of, w    ; 
02CC 021B           01106         subwf    tmin3_of, w    ; calculate tmin3_of - tmin2_of
02CD 1803           01107         btfsc    status, c      ;
02CE 2AD5           01108         goto     ord_of1        ; if result > 0 go on
02CF 081A           01109         movf     tmin2_of, w    ; otherwise swaps tmin2_of and tmin3_of 
02D0 00A6           01110         movwf    w_num1         ;
02D1 081B           01111         movf     tmin3_of, w    ;  
02D2 009A           01112         movwf    tmin2_of       ;
02D3 0826           01113         movf     w_num1, w      ; 
02D4 009B           01114         movwf    tmin3_of       ;
02D5                01115 ord_of1
02D5 0819           01116         movf     tmin1_of, w    ; 
02D6 021A           01117         subwf    tmin2_of, w    ; calculate tmin2_of - tmin1_of
02D7 1803           01118         btfsc    status, c      ;
02D8 2AE9           01119         goto     en_ordf        ; if result > 0 go to end sort
02D9 0819           01120         movf     tmin1_of, w    ; otherwise swaps tmin1_of and tmin2_of 
02DA 00A6           01121         movwf    w_num1         ;
02DB 081A           01122         movf     tmin2_of, w    ;  
02DC 0099           01123         movwf    tmin1_of       ;
02DD 0826           01124         movf     w_num1, w      ; 
02DE 009A           01125         movwf    tmin2_of       ;
02DF                01126 ord_of2
02DF 081A           01127         movf     tmin2_of, w    ; 
02E0 021B           01128         subwf    tmin3_of, w    ; calculate tmin3_of - tmin2_of
02E1 1803           01129         btfsc    status, c      ;
02E2 2AE9           01130         goto     en_ordf        ; if result > 0 go to end sort
02E3 081A           01131         movf     tmin2_of, w    ; otherwise swaps tmin2_on and tmin3_on 
02E4 00A6           01132         movwf    w_num1         ;
02E5 081B           01133         movf     tmin3_of, w    ;  
02E6 009A           01134         movwf    tmin2_of       ;
02E7 0826           01135         movf     w_num1, w      ; 
02E8 009B           01136         movwf    tmin3_of       ;
02E9                01137 en_ordf
02E9 0008           01138         return  
                    01139 
                    01140 ;       Multiply routine between two 1 byte numbers
                    01141 ;
                    01142 ;       input :
                    01143 ;               multiplicand in w_num2
                    01144 ;               multiplyer in w_num3
                    01145 ;
                    01146 ;       output :
                    01147 ;               product in w_num1 + w_num2      
02EA                01148 moltip
                    01149 
02EA 01A6           01150         clrf     w_num1         ; clear first product digit
02EB 0827           01151         movf     w_num2, w      ;
02EC 00A5           01152         movwf    w_count        ; save multiplicand in w_count
02ED 03A8           01153         decf     w_num3, f      ; 
02EE                01154 moltip1         
02EE 0064           01155         clrwdt                  ; watchdog clear
02EF 0825           01156         movf     w_count, w     ; sum multiplicand to the result
02F0 07A7           01157         addwf    w_num2, f      ; of the previous sum 
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02F1 1C03           01158         btfss    status, c      ;
02F2 2AF4           01159         goto     moltip2        ; if there is a carry increment the
02F3 0AA6           01160         incf     w_num1, f      ; first product digit
02F4                01161 moltip2
02F4 0BA8           01162         decfsz   w_num3, f      ; otherwise decrement multiplyer
02F5 2AEE           01163         goto     moltip1        ; and re-cycle until zero       
02F6                01164 endmolt 
02F6 0008           01165         return
                    01166 
                    01167 ;       Divide routine between a two bytes dividend 
                    01168 ;       and a 1 byte divisor 
                    01169 ;       Quotient must have only a digit
                    01170 ;
                    01171 ;       input :
                    01172 ;               dividend in w_num1 + w_num2
                    01173 ;               divisor in w_num3
                    01174 ;
                    01175 ;       output :
                    01176 ;               quotient in w_num1
                    01177 ;               remainder in w_num2     
02F7                01178 dividi
02F7 01A5           01179         clrf     w_count        ; initial quotient clear
02F8                01180 dividi1                         ; 
02F8 0064           01181         clrwdt                  ; watchdog clear                
02F9 0AA5           01182         incf     w_count, f     ; increment quotient at every re-cycle  
02FA 0828           01183         movf     w_num3, w      ; subtract divisor from result obtained
02FB 02A7           01184         subwf    w_num2, f      ; by the previous subtraction
02FC 1803           01185         btfsc    status, c      ; if negative carry
02FD 2AF8           01186         goto     dividi1        ; decrement fist dividend digit
02FE 3001           01187         movlw    d'1'           ; 
02FF 02A6           01188         subwf    w_num1, f
0300 1803           01189         btfsc    status,c       ; re-cycle until first digit 
0301 2AF8           01190         goto     dividi1        ; becomes negative and
0302 0828           01191         movf     w_num3, w      ; at end restore last 
0303 07A7           01192         addwf    w_num2, f      ; subtraction, putting the remainder
0304 03A5           01193         decf     w_count, f     ; in w_num2
0305 0825           01194         movf     w_count, w     ; then decrements quotient
0306 00A6           01195         movwf    w_num1         ; and store it in w_num1
0307                01196 enddiv
0307 0008           01197         return
                    01198 
                    01199         
                    01200 ;       LCD display routine 
                    01201 ;
                    01202 ;       input :         - string to display, starting at w_num1
                    01203 ;                       - characters number to display in w_count
                    01204 ;
                    01205 ;       output :        - send to LCD display  
                    01206 ;       
0308                01207 sendlcd
                    01208 
0308 3080           01209         movlw    0x80           ; set cursor at first line start                
0309 008F           01210         movwf    bytelcd         
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

030A 2331           01211         call     cmdlcd         ; send command
                    01212 
030B 3008           01213         movlw    0x08           ; set character counter to 8
030C 00A5           01214         movwf    w_count        
030D 302A           01215         movlw    lcd_01
030E 0084           01216         movwf    fsr            ; load pointer to lcd_01
030F                01217 sendlc1
030F 0800           01218         movf     indf, w        ;
0310 008F           01219         movwf    bytelcd        ; move to bytelcd the character to send 
0311 233E           01220         call     wrtlcd
0312 0A84           01221         incf     fsr, f         ; position indf at next character       
0313 0BA5           01222         decfsz   w_count, f     ; re-cycle until counter is zero
0314 2B0F           01223         goto     sendlc1
                    01224 
0315 30C0           01225         movlw    0xc0           ; set cursor at second line start               
0316 008F           01226         movwf    bytelcd         
0317 2331           01227         call     cmdlcd         ; send command
                    01228 
0318 3008           01229         movlw    0x08           ; set character counter to 8
0319 00A5           01230         movwf    w_count        
031A 3032           01231         movlw    lcd_09
031B 0084           01232         movwf    fsr            ; load pointer to lcd_09
031C                01233 sendlc2
031C 0800           01234         movf     indf, w        ;
031D 008F           01235         movwf    bytelcd        ; move to bytelcd the character to send 
031E 233E           01236         call     wrtlcd
031F 0A84           01237         incf     fsr, f         ; position indf at next character       
0320 0BA5           01238         decfsz   w_count, f     ; re-cycle until counter is zero
0321 2B1C           01239         goto     sendlc2
                    01240 
0322                01241 endsend
0322 0008           01242         return
                    01243 
                    01244 ;       LCD display shift routine 
                    01245 ;       execute a one byte left shift of the LCD_01 to LCD_16 area 
                    01246 ;       and inserts a "space" into the LCD_16 byte
                    01247 ;       
0323                01248 shift
0323 300F           01249         movlw    d'15'
0324 00A5           01250         movwf    w_count        
0325 302A           01251         movlw    lcd_01
0326 0084           01252         movwf    fsr            ; load pointer to lcd_01
0327                01253 shift10
0327 0A84           01254         incf     fsr, f         ; position indf at next character
0328 0800           01255         movf     indf, w        ; and save character to W reg
0329 0384           01256         decf     fsr, f         ; then position indf at previous character
032A 0080           01257         movwf    indf           ; and move saved char
032B 0A84           01258         incf     fsr, f         ; position indf at next character
032C 0BA5           01259         decfsz   w_count, f     ; re-cycle until counter is zero
032D 2B27           01260         goto     shift10
032E                01261 endshift
032E 3020           01262         movlw    " "
032F 0080           01263         movwf    indf           ; at end set LCD_16 at space
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0330 0008           01264         return
                    01265 
                    01266 ;     This routine sends a command to LCD display (4 bits at a time)
0331                01267 cmdlcd
0331 080F           01268         movf     bytelcd,w
0332 39F0           01269         andlw    b'11110000'    ; clear right nibble
0333 3801           01270         iorlw    b'00000001'    ; set RS = 0, ENA = 1
0334 0086           01271         movwf    port_b         ; move nibble to port_b
0335 1006           01272         bcf      port_b,0       ; enable goes down
0336 235F           01273         call     delcd          ; one delay
                    01274         
0337 0E0F           01275         swapf    bytelcd,0      ; exchange nibbles in bytelcd
0338 39F0           01276         andlw    b'11110000'
0339 3801           01277         iorlw    b'00000001'  
033A 0086           01278         movwf    port_b
033B 1006           01279         bcf      port_b,0
033C 235F           01280         call     delcd
033D                01281 endcmlc
033D 0008           01282         return                
                    01283 
                    01284 ;       This routine sends a character to LCD display (4 bits at a time)
033E                01285 wrtlcd
033E 080F           01286         movf     bytelcd,w
033F 39F0           01287         andlw    b'11110000'    ; clear right nibble
0340 3803           01288         iorlw    b'00000011'    ; set RS = 1, ENA = 1
0341 0086           01289         movwf    port_b         ; move nibble to port_b
0342 1006           01290         bcf      port_b,0       ; enable goes down
0343 235F           01291         call     delcd          ; one delay
                    01292         
0344 0E0F           01293         swapf    bytelcd,w      ; exchange nibbles in bytelcd
0345 39F0           01294         andlw    b'11110000'
0346 3803           01295         iorlw    b'00000011'  
0347 0086           01296         movwf    port_b
0348 1006           01297         bcf      port_b,0
0349 235F           01298         call     delcd
034A                01299 endwrlc
034A 0008           01300         return  
                    01301 
                    01302 ;       50 mS delay routine 
034B                01303 del50
034B 307D           01304         movlw    d'125'         ; 125 primary cycles
034C 008C           01305         movwf    rit1           ; 
034D                01306 del51
034D 3064           01307         movlw    d'100'         ; 100 secondary cycles
034E 008D           01308         movwf    rit2
034F                01309 del52
034F 0064           01310         clrwdt                  ; watchdog clear
0350 0B8D           01311         decfsz   rit2,1         ; decrement counter2
0351 2B4F           01312         goto     del52          ; if counter2 > 0 re-cycle                              ; re-cycle
0352 0B8C           01313         decfsz   rit1,1         ; if counter2 = 0 decrement counter1        
0353 2B4D           01314         goto     del51          ; if counter1 > 0 re-cycle
0354                01315 endl50
0354 0008           01316         return                  ; end routine
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    01317 
                    01318 ;       5 mS delay routine 
0355                01319 del05
0355 3030           01320         movlw    d'48'          ; 48 primary cycles
0356 008C           01321         movwf    rit1           ; 
0357                01322 del051
0357 3019           01323         movlw    d'25'          ; 25 secondary cycles
0358 008D           01324         movwf    rit2
0359                01325 del052
0359 0064           01326         clrwdt                  ; watchdog clear
035A 0B8D           01327         decfsz   rit2,1         ; decrement counter2
035B 2B59           01328         goto     del052         ; if counter2 > 0 re-cycle
035C 0B8C           01329         decfsz   rit1,1         ; if counter2 = 0 decrement counter1        
035D 2B57           01330         goto     del051         ; if counter1 > 0 re-cycle
035E                01331 endl05
035E 0008           01332         return                  ; end routine
                    01333 
                    01334 ;       0.25 mS delay routine 
035F                01335 delcd
035F 3032           01336         movlw    d'50'          ; 50 delay cycles
0360 008C           01337         movwf    rit1
0361                01338 delcd1  
0361 0064           01339         clrwdt                  ; watchdog clear
0362 0000           01340         nop                     ; 1 microsec delay
0363 0B8C           01341         decfsz   rit1,1         ; if counter > 0 re-cycle
0364 2B61           01342         goto     delcd1         
0365                01343 endcd
0365 0008           01344         return                  ; end routine
                    01345 
                    01346         end
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 27


SYMBOL TABLE
  LABEL                             VALUE 

__16F84                           00000001
ag_parm                           00000262
agsped1                           000000E8
agsped2                           000000EA
agspeed                           000000DF
bytelcd                           0000000F
c                                 00000000
c_minof                           000002A0
c_minon                           00000294
chrparm                           00000008
cmdlcd                            00000331
cntchar                           0000000E
conve01                           000001EC
conve02                           000001F1
conve10                           000001F3
conve11                           000001F8
conve12                           000001FD
conve20                           000001FF
convert                           000001E8
ctrsegn                           00000021
cw_rate                           00000280
cw_rate1                          00000291
dc                                00000001
dec_sg                            00000230
dec_sg1                           00000238
dec_sg2                           00000240
dec_sg3                           00000248
dec_sg4                           00000250
dec_sg5                           00000258
dec_sg6                           00000260
decod                             000000EC
decod1                            000000F4
decod15                           00000106
decod3                            000000FA
decod31                           0000010C
decod63                           00000112
decod7                            00000100
del05                             00000355
del051                            00000357
del052                            00000359
del50                             0000034B
del51                             0000034D
del52                             0000034F
delcd                             0000035F
delcd1                            00000361
dispar1                           000000B0
disparm                           000000AF
displ                             00000206
displ1                            00000212
dividi                            000002F7
dividi1                           000002F8
eeadr                             00000009
eecon1                            00000088
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 28


SYMBOL TABLE
  LABEL                             VALUE 

eecon2                            00000089
eedata                            00000008
en_ordf                           000002E9
en_ordn                           000002CA
end_mof                           000002AB
end_mon                           0000029F
end_sg                            00000261
endcd                             00000365
endcmlc                           0000033D
endconv                           00000205
enddiv                            00000307
endecod                           0000011A
endl05                            0000035E
endl50                            00000354
endlcd                            000001C5
endmolt                           000002F6
endpanl                           000001E7
endsend                           00000322
endshift                          0000032E
endtb_a                           0000000C
endtb_b                           00000017
endtb_c                           0000002A
endtb_d                           00000045
endtb_e                           0000005E
endtb_f                           0000006B
endwrlc                           0000034A
f                                 00000001
fsr                               00000004
gie                               00000007
indf                              00000000
inilcd                            000001A5
intcon                            0000000B
irp                               00000007
lcd_01                            0000002A
lcd_02                            0000002B
lcd_03                            0000002C
lcd_04                            0000002D
lcd_05                            0000002E
lcd_06                            0000002F
lcd_07                            00000030
lcd_08                            00000031
lcd_09                            00000032
lcd_10                            00000033
lcd_11                            00000034
lcd_12                            00000035
lcd_13                            00000036
lcd_14                            00000037
lcd_15                            00000038
lcd_16                            00000039
main00                            0000007F
main10                            000000AA
main15                            000000AB
main20                            000000AC
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 29


SYMBOL TABLE
  LABEL                             VALUE 

main30                            000000B3
moltip                            000002EA
moltip1                           000002EE
moltip2                           000002F4
nodecod                           00000118
op_reg                            00000081
ord_of                            000002CB
ord_of1                           000002D5
ord_of2                           000002DF
ord_on                            000002AC
ord_on1                           000002B6
ord_on2                           000002C0
panel                             000001C6
pcl                               00000002
pclath                            0000000A
pldata                            00000010
plval                             00000011
port_a                            00000005
port_b                            00000006
ps0                               00000000
ps1                               00000001
ps2                               00000002
psa                               00000003
ric_a                             00000121
ric_a1                            00000122
ric_a2                            0000012B
ric_a3                            00000132
ric_a4                            00000135
ric_b                             00000137
ric_b1                            00000138
ric_b2                            00000141
ric_b3                            00000148
ric_b4                            0000014B
ric_c                             0000014D
ric_c1                            0000014E
ric_c2                            00000157
ric_c3                            0000015E
ric_c4                            00000161
ric_d                             00000163
ric_d1                            00000164
ric_d2                            0000016D
ric_d3                            00000174
ric_d4                            00000177
ric_e                             00000179
ric_e1                            0000017A
ric_e2                            00000183
ric_e3                            0000018A
ric_e4                            0000018D
ric_f                             0000018F
ric_f1                            00000190
ric_f2                            00000199
ric_f3                            000001A0
ric_f4                            000001A3
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 30


SYMBOL TABLE
  LABEL                             VALUE 

rit1                              0000000C
rit2                              0000000D
rp0                               00000005
rp1                               00000006
save_s                            00000023
save_w                            00000022
sendlc1                           0000030F
sendlc2                           0000031C
sendlcd                           00000308
set_off                           000000D4
set_on                            000000B7
sgparm                            0000000F
shift                             00000323
shift10                           00000327
speed                             0000001F
st_off                            000000C9
st_on                             000000B5
status                            00000003
swinput                           00000020
swoff                             00000001
swon                              00000000
t0cs                              00000005
t0ie                              00000005
t0if                              00000002
tab_a                             00000005
tab_b                             0000000C
tab_c                             00000017
tab_d                             0000002A
tab_e                             00000045
tab_f                             0000005E
timchr1                           00000014
timchr2                           00000015
timeoff                           00000013
timeon                            00000012
tmax_of                           0000001E
tmed_of                           0000001D
tmed_on                           0000001C
tmin1_of                          00000019
tmin1_on                          00000016
tmin2_of                          0000001A
tmin2_on                          00000017
tmin3_of                          0000001B
tmin3_on                          00000018
tmr0                              00000001
tmrint                            0000006B
tmrint1                           00000077
tris_a                            00000085
tris_b                            00000086
w                                 00000000
w_conv                            00000024
w_count                           00000025
w_num1                            00000026
w_num2                            00000027
MPASM 02.30 Released         LCD16117.ASM   10-11-2000  19:43:26         PAGE 31


SYMBOL TABLE
  LABEL                             VALUE 

w_num3                            00000028
w_num4                            00000029
wrtlcd                            0000033E
z                                 00000002


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX---------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   867
Program Memory Words Free:   157


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     9 reported,     0 suppressed

